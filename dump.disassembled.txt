
int0_reset_vect:
  0000: 940c 0185      jmp 0x030a <boot()>

int1_INT0_vect:
  0004: 940c 01ad      jmp 0x035a <bad_interrupt>

int2_INT1_vect:
  0008: 940c 01ad      jmp 0x035a <bad_interrupt>

int3_INT2_vect:
  000c: 940c 01ad      jmp 0x035a <bad_interrupt>

int4_INT3_vect:
  0010: 940c 01ad      jmp 0x035a <bad_interrupt>

int5:
  0014: 940c 01ad      jmp 0x035a <bad_interrupt>

int6:
  0018: 940c 01ad      jmp 0x035a <bad_interrupt>

int7_INT6_vect:
  001c: 940c 01ad      jmp 0x035a <bad_interrupt>

int8:
  0020: 940c 01ad      jmp 0x035a <bad_interrupt>

int9_PCINT0_vect:
  0024: 940c 01ad      jmp 0x035a <bad_interrupt>

int10_USB_GEN_vect:
  0028: 940c 1b84      jmp 0x3708 <int0a>

int11_USB_COM_vect:
  002c: 940c 1a31      jmp 0x3462 <int0b>

int12_WDT_vect:
  0030: 940c 01ad      jmp 0x035a <bad_interrupt>

int13:
  0034: 940c 01ad      jmp 0x035a <bad_interrupt>

int14:
  0038: 940c 01ad      jmp 0x035a <bad_interrupt>

int15:
  003c: 940c 01ad      jmp 0x035a <bad_interrupt>

int16_TIMER1_CAPT_vect:
  0040: 940c 01ad      jmp 0x035a <bad_interrupt>

int17_TIMER1_COMPA_vect:
  0044: 940c 01ad      jmp 0x035a <bad_interrupt>

int18_TIMER1_COMPB_vect:
  0048: 940c 01ad      jmp 0x035a <bad_interrupt>

int19_TIMER1_COMPC_vect:
  004c: 940c 01ad      jmp 0x035a <bad_interrupt>

int20_TIMER1_OVF_vect:
  0050: 940c 01ad      jmp 0x035a <bad_interrupt>

int21_TIMER0_COMPA_vect:
  0054: 940c 01ad      jmp 0x035a <bad_interrupt>

int22_TIMER0_COMPB_vect:
  0058: 940c 01ad      jmp 0x035a <bad_interrupt>

int23_TIMER0_OVF_vect:
  005c: 940c 14a1      jmp 0x2942 <TIMER0_OVF_vect>

int24_SPI_STC_vect:
  0060: 940c 01ad      jmp 0x035a <bad_interrupt>

int25_USART1_RX_vect:
  0064: 940c 01ad      jmp 0x035a <bad_interrupt>

int26_USART1_UDRE_vect:
  0068: 940c 01ad      jmp 0x035a <bad_interrupt>

int27_USART1_TX_vect:
  006c: 940c 01ad      jmp 0x035a <bad_interrupt>

int28_ANALOG_COMP_vect:
  0070: 940c 01ad      jmp 0x035a <bad_interrupt>

int29_ADC_vect:
  0074: 940c 01ad      jmp 0x035a <bad_interrupt>

int30_EE_READY_vect:
  0078: 940c 01ad      jmp 0x035a <bad_interrupt>

int31_TIMER3_CAPT_vect:
  007c: 940c 01ad      jmp 0x035a <bad_interrupt>

int32_TIMER3_COMPA_vect:
  0080: 940c 01ad      jmp 0x035a <bad_interrupt>

int33_TIMER3_COMPB_vect:
  0084: 940c 01ad      jmp 0x035a <bad_interrupt>

int34_TIMER3_COMPC_vect:
  0088: 940c 01ad      jmp 0x035a <bad_interrupt>

int35_TIMER3_OVF_vect:
  008c: 940c 01ad      jmp 0x035a <bad_interrupt>

int36_TWI_vect:
  0090: 940c 1077      jmp 0x20ee <int24>

int37_SPM_READY_vect:
  0094: 940c 01ad      jmp 0x035a <bad_interrupt>

int38_TIMER4_COMPA_vect:
  0098: 940c 01ad      jmp 0x035a <bad_interrupt>

int39_TIMER4_COMPB_vect:
  009c: 940c 01ad      jmp 0x035a <bad_interrupt>

int40_TIMER4_COMPD_vect:
  00a0: 940c 01ad      jmp 0x035a <bad_interrupt>

int41_TIMER4_OVF_vect:
  00a4: 940c 01ad      jmp 0x035a <bad_interrupt>

int42_TIMER4_FPF_vect:
  00a8: 940c 01ad      jmp 0x035a <bad_interrupt>

jumptable_00ac?:
  00ac: 143a addr 0x2874 <_loc_2874>
  00ae: 143f addr 0x287e <_loc_287e>
  00b0: 1444 addr 0x2888 <_loc_2888>
  00b2: 144e addr 0x289c <_loc_289c>
  00b4: 1498 addr 0x2930 <_loc_2930>
  00b6: 1498 addr 0x2930 <_loc_2930>
  00b8: 1498 addr 0x2930 <_loc_2930>
  00ba: 1458 addr 0x28b0 <_loc_28b0>
  00bc: 1462 addr 0x28c4 <_loc_28c4>
  00be: 146c addr 0x28d8 <_loc_28d8>
  00c0: 1476 addr 0x28ec <_loc_28ec>
  00c2: 1483 addr 0x2906 <_loc_2906>
  00c4: 1498 addr 0x2930 <_loc_2930>
  00c6: 148b addr 0x2916 <_loc_2916>
  00c8: 15aa addr 0x2b54 <_loc_2b54>
  00ca: 15ad addr 0x2b5a <_loc_2b5a>
  00cc: 15a0 addr 0x2b40 <_loc_2b40>
  00ce: 15a4 addr 0x2b48 <_loc_2b48>
  00d0: 15ce addr 0x2b9c <_loc_2b9c>
  00d2: 15ce addr 0x2b9c <_loc_2b9c>
  00d4: 15ce addr 0x2b9c <_loc_2b9c>
  00d6: 15b1 addr 0x2b62 <_loc_2b62>
  00d8: 15b5 addr 0x2b6a <_loc_2b6a>
  00da: 15b9 addr 0x2b72 <_loc_2b72>
  00dc: 15bf addr 0x2b7e <_loc_2b7e>
  00de: 15c3 addr 0x2b86 <_loc_2b86>
  00e0: 15ce addr 0x2b9c <_loc_2b9c>
  00e2: 15c9 addr 0x2b92 <_loc_2b92>

?:
  00e4:            0000 0002 0008 0e00 0003 0401      ............
  00f0:  000b 0000 0000 0000 0000 0000 0000 0000  ................
  0100:  0000 0408 0201 1040 8040 1020 4080 4080  .......@.@. @.@.
  0110:  0802 0401 8040 2010 0201 1080 1020 4040  .....@ ...... @@
  0120:  0404 0404 0403 0405 0202 0202 0403 0202  ................
  0130:  0202 0606 0606 0606 0404 0202 0204 0000  ................
  0140:  0000 2500 2800 2b00 2e00 3100 0000 0000  ..%.(.+...1.....
  0150:  2400 2700 2a00 2d00 3000 080b 0002 0202  $.'.*.-.0.......
  0160:  0100 0904 0000 0102 0200 0005 2400 1001  ............$...
  0170:  0524 0101 0104 2402 0605 2406 0001 0705  .$....$...$.....
  0180:  8103 1000 4009 0401 0002 0a00 0000 0705  ....@...........
  0190:  0202 4000 0007 0583 0240 0000 00c1 8081  ..@......@......
  01a0:  c112 0100 0202 0000 4041 2337 8000 0101  ........@A#7....
  01b0:  0200 0112 0100 0200 0000 4041 2337 8000  ..........@A#7..
  01c0:  0101 0200 0118 0341 0072 0064 0075 0069  .......A.r.d.u.i
  01d0:  006e 006f 0020 004c 004c 0043 0022 0341  .n.o. .L.L.C.".A
  01e0:  0072 0064 0075 0069 006e 006f 0020 004d  .r.d.u.i.n.o. .M
  01f0:  0069 0063 0072 006f 0020 0020 0020 0004  .i.c.r.o. . . ..
  0200:  0309 0400 0000 0000 0000 002a 2b28 0000  ...........*+(..
  0210:  0000 0000 0000 0000 0000 0000 0000 0000  ................
  0220:  0000 002c 9eb4 a0a1 a2a4 34a6 a7a5 ae36  ...,......4....6
  0230:  2d37 3827 1e1f 2021 2223 2425 26b3 33b6  -78'.. !"#$%&.3.
  0240:  2eb7 b89f 8485 8687 8889 8a8b 8c8d 8e8f  ................
  0250:  9091 9293 9495 9697 9899 9a9b 9c9d 2f31  ............../1
  0260:  30a3 ad35 0405 0607 0809 0a0b 0c0d 0e0f  0..5............
  0270:  1011 1213 1415 1617 1819 1a1b 1c1d afb1  ................
  0280:  b0b5 0009 0402 0001 0300 0000 0921 0101  .............!..
  0290:  0001 2265 0007 0584 0340 0001 0501 0902  .."e.....@......
  02a0:  a101 0901 a100 8501 0509 1901 2903 1500  ............)...
  02b0:  2501 9503 7501 8102 9501 7505 8103 0501  %...u.....u.....
  02c0:  0930 0931 0938 1581 257f 7508 9503 8106  .0.1.8..%.u.....
  02d0:  c0c0 0501 0906 a101 8502 0507 19e0 29e7  ..............).
  02e0:  1500 2501 7501 9508 8102 9501 7508 8103  ..%.u.......u...
  02f0:  9506 7508 1500 2565 0507 1900 2965 8100  ..u...%e....)e..
  0300:  c000                                     ..

constructors_tables:
  0302: 0a34 addr 0x1468 <cons4_Chall>
  0304: 0f96 addr 0x1f2c <cons3_Wire>
  0306: 1866 addr 0x30cc <cons2_Serial>
  0308: 1d12 addr 0x3a24 <cons1_?>

boot():
  030a: 2411           r1 := 0
  030c: be1f           PORT.SREG := 0
  030e: efcf e0da      r29:r28 := 0xaff (=__stack)
  0312: bfde           PORT.SPH := r29
  0314: bfcd           PORT.SPL := r28
  0316: e016           r17 := 6          # copy .data to RAM[0x100..0x65a]
  0318: e0a0 e0b1      r27:r26 := 0x100 (=gamemode_addresses)
  031c: ede8 e3fb      r31:r30 := 0x3bd8
  0320: c002           jmp 0x0326 <_loc_0326>
_loc_0322:
  0322: 9005           r0 := PROG[r31:r30 ++]
  0324: 920d           *(r27:r26 ++) := r0
_loc_0326:
  0326: 35aa 07b1 f7d9 if(r27:r26 != r17:0x5a):jmp 0x0322 <_loc_0322>
  032c: e018           r17 := 8
  032e: e5aa e0b6      r27:r26 := 0x65a (=Chall)
  0332: c001           jmp 0x0336 <_loc_0336> # Zero-ize RAM[0x65a..0x89f]
_loc_0334:
  0334: 921d           *(r27:r26 ++) := 0
_loc_0336:
  0336: 39af 07b1 f7e1 if(r27:r26 != r17:0x9f):jmp 0x0334 <_loc_0334>
  033c: e011           r17 := 1
  033e: e8c5 e0d1      r29:r28 := 0x185  # Use jumptable 0x302..0x30a
  0342: c004           jmp 0x034c <_loc_034c>
_loc_0344:
  0344: 9721           r29:r28 -= 1
  0346: 01fe           r31:r30 := r29:r28
  0348: 940e 1d96      call 0x3b2c <jump_indirect_to_PROG[r31:r30*2]>
_loc_034c:
  034c: 38c1 07d1 f7c9 if(r29:r28 != r17:0x81):jmp 0x0344 <_loc_0344>
  0352: 940e 1877      call 0x30ee <main()>
  0356: 940c 1dea      jmp 0x3bd4 <halt>

bad_interrupt:
  035a: 940c 0000      jmp 0x0000 <int0_reset_vect>

int32_t checksum(byte *data=r25:r24, uint size=r23:r22)->r25:r24:r23:r22:
  035e: 92cf           push r12
  0360: 92df           push r13
  0362: 92ef           push r14
  0364: 92ff           push r15
  0366: 930f           push r16
  0368: 931f           push r17
  036a: 93cf           push r28
  036c: 93df           push r29
  036e: 01ec           r29:r28 := r25:r24
  0370: 018b           r17:r16 := r23:r22
  0372: 01fc           r31:r30 := r25:r24
  0374: e462 e577      r23:r22 := 0x5742 # r = 0x52415742
  0378: e481 e592      r25:r24 := 0x5241
_for(r31:r30 in data..data+size):
  037c: 019f           r19:r18 := r31:r30
  037e: 1b2c 0b3d      r19:r18 -= r29:r28
  0382: 1720 0731 f484 if(r19:r18 >=s r17:r16):jmp 0x03a8 <_loc_03a8>
  0388: 9121           r18 := *(r31:r30 ++)
  038a: 016b           r13:r12 := r23:r22
  038c: 017c           r15:r14 := r25:r24
  038e: 0ec2 1cd1 1ce1 1cf1 r15:r14:r13:r12 += 0:0:0:r18
  0396: 01a7           r21:r20 := r15:r14 # r21:r20:r19:r18 = r + *(r31:r30)
  0398: 0196           r19:r18 := r13:r12
  039a: ee6f eb7e      r23:r22 := 0xbeef # r = r21:r20:r19:r18 * 0xd34dbeef
  039e: e48d ed93      r25:r24 := 0xd34d
  03a2: 940e 1d1d      call 0x3a3a <libgcc.mulsi3(A=r25:r24:r23:r22, B=r21:r20:r19:r18)->r25:r24:r23:r22=A*B>
  03a6: cfea           jmp 0x037c <_for(r31:r30 in data..data+size)>
_loc_03a8:
  03a8: 91df           pop r29
  03aa: 91cf           pop r28
  03ac: 911f           pop r17
  03ae: 910f           pop r16
  03b0: 90ff           pop r15
  03b2: 90ef           pop r14
  03b4: 90df           pop r13
  03b6: 90cf           pop r12
  03b8: 9508           ret

world_war_simulation:
  03ba: 92cf           push r12
  03bc: 92df           push r13
  03be: 92ef           push r14
  03c0: 92ff           push r15
  03c2: 930f           push r16
  03c4: 931f           push r17
  03c6: 93cf           push r28
  03c8: 93df           push r29
  03ca: b7cd           r28 := PORT.SPL
  03cc: b7de           r29 := PORT.SPH
  03ce: 972e           r29:r28 -= 14
  03d0: b60f           r0 := PORT.SREG
  03d2: 94f8           Clear(I flag)
  03d4: bfde           PORT.SPH := r29
  03d6: be0f           PORT.SREG := r0
  03d8: bfcd           PORT.SPL := r28
  03da: e263 e075      r23:r22 := 0x523 (="\r\n")
  03de: e387 e098      r25:r24 := 0x837 (=Serial)
  03e2: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  03e6: e16c e071      r23:r22 := 0x11c (="==============================================")
  03ea: e387 e098      r25:r24 := 0x837 (=Serial)
  03ee: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  03f2: e46b e071      r23:r22 := 0x14b (="              World War Simulation")
  03f6: e387 e098      r25:r24 := 0x837 (=Serial)
  03fa: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  03fe: e66e e071      r23:r22 := 0x16e (="=====================\o/======================")
  0402: e387 e098      r25:r24 := 0x837 (=Serial)
  0406: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  040a: e265 e075      r23:r22 := 0x525 (="")
  040e: e387 e098      r25:r24 := 0x837 (=Serial)
  0412: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  0416: e96d e071      r23:r22 := 0x19d (="Enter access code to launch nuclear strike: ")
  041a: e387 e098      r25:r24 := 0x837 (=Serial)
  041e: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  0422: e000 e010      r17:r16 := 0
_loc_0426:
  0426: e387 e098      r25:r24 := 0x837 (=Serial)
  042a: 940e 176e      call 0x2edc <int Serial?::available()>
  042e: 1618 0619 f4cc if(0 >=s r25:r24):jmp 0x0466 <_readcode_end>
  0434: 3008 0511 f4b4 if(r17:r16 >=s 8):jmp 0x0466 <_readcode_end>
  043a: 0178           r15:r14 := r17:r16
  043c: ef8f           r24 := 0xff
  043e: 1ae8           r14 -= r24
  0440: 0af8           r15 -= r24+C
  0442: e387 e098      r25:r24 := 0x837 (=Serial)
  0446: 940e 1792      call 0x2f24 <int Serial?::read()>
  044a: e0e1 e0f0      r31:r30 := 1      # Read a char into [SP+1+r17:r16] ; r17:r16=0..7
  044e: 0fec 1ffd      r31:r30 += r29:r28
  0452: 0fe0 1ff1      r31:r30 += r17:r16
  0456: 8380           *(r31:r30) := r24
  0458: 2f68           r22 := r24
  045a: e387 e098      r25:r24 := 0x837 (=Serial)
  045e: 940e 167a      call 0x2cf4 <size_t Print::print(char c=r22)>
  0462: 0187           r17:r16 := r15:r14
  0464: cfe0           jmp 0x0426 <_loc_0426>
_readcode_end:
  0466: 01fe           r31:r30 := r29:r28
  0468: 0fe0 1ff1      r31:r30 += r17:r16
  046c: 8180           r24 := *(r31:r30) # Read last char...
  046e: 308d f061      if(r24 == 13):jmp 0x048a <_char_is_\r_or_\n>
  0472: 308a f051      if(r24 == 10):jmp 0x048a <_char_is_\r_or_\n>
  0476: 3008 0511 f6a9 if(r17:r16 != 8):jmp 0x0426 <_loc_0426>
_loc_047c:
  047c: 01fe           r31:r30 := r29:r28
  047e: 9631           r31:r30 += 1
  0480: 019e           r19:r18 := r29:r28
  0482: 5f27 4f3f      r19:r18 -= -9
  0486: 018f           r17:r16 := r31:r30 # r17:r16 = SP+1, r19:r18 = SP+9=end of inputbuffer
  0488: c00a           jmp 0x049e <_loc_049e>
_char_is_\r_or_\n:
  048a: 3002 0511 f7b1 if(r17:r16 != 2):jmp 0x047c <_loc_047c>
  0490: 8189           r24 := *(r29:r28 + 0x01)
  0492: 3781 f799      if(r24 != 0x71):jmp 0x047c <_loc_047c>
  0496: c077           jmp 0x0586 <_ret>
_loop_check_alldigits:
  0498: 17e2 07f3 f039 if(r31:r30 == r19:r18):jmp 0x04ac <_loop_check_alldigits_ok>
_loc_049e:
  049e: 9181           r24 := *(r31:r30 ++)
  04a0: 5380           r24 -= 0x30
  04a2: 308a f3c8      if(r24 < 10):jmp 0x0498 <_loop_check_alldigits>
  04a6: ec6a e071      r23:r22 := 0x1ca (="- ERROR -")
  04aa: c069           jmp 0x057e <_print_r23:r22_and_ret>
_loop_check_alldigits_ok:
  04ac: 01ae           r21:r20 := r29:r28
  04ae: 5f46 4f5f      r21:r20 -= -10
  04b2: e46e           r22 := 0x4e
  04b4: e58a e096      r25:r24 := 0x65a (=Chall)
  04b8: 940e 0851      call 0x10a2 <Chall::read_4b_from_encextflash(r22=pageaddr, r21:r20=buffer)>
  04bc: e068 e070      r23:r22 := 8
  04c0: 01c8           r25:r24 := r17:r16
  04c2: 940e 01af      call 0x035e <int32_t checksum(byte *data=r25:r24, uint size=r23:r22)->r25:r24:r23:r22>
  04c6: 84ca           r12 := *(r29:r28 + 0x0a)
  04c8: 84db           r13 := *(r29:r28 + 0x0b)
  04ca: 84ec           r14 := *(r29:r28 + 0x0c)
  04cc: 84fd           r15 := *(r29:r28 + 0x0d)
  04ce: 156c 057d 058e 059f f151 if(r25:r24:r23:r22 == r15:r14:r13:r12):jmp 0x052c <_loc_052c>
  04d8: ec6a e071      r23:r22 := 0x1ca (="- ERROR -")
  04dc: e387 e098      r25:r24 := 0x837 (=Serial)
  04e0: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  04e4: ed68 e071      r23:r22 := 0x1d8 (="Read serial:")
  04e8: e387 e098      r25:r24 := 0x837 (=Serial)
  04ec: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  04f0: 854a           r20 := *(r29:r28 + 0x0a)
  04f2: 855b           r21 := *(r29:r28 + 0x0b)
  04f4: 856c           r22 := *(r29:r28 + 0x0c)
  04f6: 857d           r23 := *(r29:r28 + 0x0d)
  04f8: e02a e030      r19:r18 := 10
  04fc: e387 e098      r25:r24 := 0x837 (=Serial)
  0500: 940e 175c      call 0x2eb8 <size_t Print::println(unsigned long num, int base)>
  0504: ee65 e071      r23:r22 := 0x1e5 (="Expecting: ")
  0508: e387 e098      r25:r24 := 0x837 (=Serial)
  050c: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  0510: e068 e070      r23:r22 := 8
  0514: 01c8           r25:r24 := r17:r16
  0516: 940e 01af      call 0x035e <int32_t checksum(byte *data=r25:r24, uint size=r23:r22)->r25:r24:r23:r22>
  051a: 01ab           r21:r20 := r23:r22
  051c: 01bc           r23:r22 := r25:r24
  051e: e02a e030      r19:r18 := 10
  0522: e387 e098      r25:r24 := 0x837 (=Serial)
  0526: 940e 175c      call 0x2eb8 <size_t Print::println(unsigned long num, int base)>
  052a: c02d           jmp 0x0586 <_ret>
_loc_052c:
  052c: ef61 e071      r23:r22 := 0x1f1 (="- MISSILES LAUNCHED, ENJOY -")
  0530: e387 e098      r25:r24 := 0x837 (=Serial)
  0534: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  0538: e028 e030      r19:r18 := 8
  053c: 01a8           r21:r20 := r17:r16
  053e: e164           r22 := 0x14
  0540: e58a e096      r25:r24 := 0x65a (=Chall)
  0544: 940e 0855      call 0x10aa <Chall::write_to_encextflash(r25:r24=this, r22=pageaddr, r21:r20=data, r19:r18=size)>
  0548: e58a e096      r25:r24 := 0x65a (=Chall)
  054c: 940e 09c5      call 0x138a <Chall::write_all_extflashmem(data@stack, size is 0xf8)>
  0550: 01ae           r21:r20 := r29:r28
  0552: 5f42 4f5f      r21:r20 -= -14
  0556: e160           r22 := 0x10
  0558: e58a e096      r25:r24 := 0x65a (=Chall)
  055c: 940e 0849      call 0x1092 <Chall::read_1b_from_encextflash(r22=pageaddr, r21:r20=buffer)>
  0560: 858e           r24 := *(r29:r28 + 0x0e)
  0562: 3082 f481      if(r24 != 2):jmp 0x0586 <_ret>
  0566: e043           r20 := 3
  0568: e160           r22 := 0x10
  056a: e58a e096      r25:r24 := 0x65a (=Chall)
  056e: 940e 099f      call 0x133e <Chall::write_int8_to_encextflash(r22=pageaddr, r20)>
  0572: e58a e096      r25:r24 := 0x65a (=Chall)
  0576: 940e 09c5      call 0x138a <Chall::write_all_extflashmem(data@stack, size is 0xf8)>
  057a: e162 e072      r23:r22 := 0x212 (="!!! GOD MODE ENABLED !!!")
_print_r23:r22_and_ret:
  057e: e387 e098      r25:r24 := 0x837 (=Serial)
  0582: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
_ret:
  0586: 962e           r29:r28 += 14
  0588: b60f           r0 := PORT.SREG
  058a: 94f8           Clear(I flag)
  058c: bfde           PORT.SPH := r29
  058e: be0f           PORT.SREG := r0
  0590: bfcd           PORT.SPL := r28
  0592: 91df           pop r29
  0594: 91cf           pop r28
  0596: 911f           pop r17
  0598: 910f           pop r16
  059a: 90ff           pop r15
  059c: 90ef           pop r14
  059e: 90df           pop r13
  05a0: 90cf           pop r12
  05a2: 9508           ret

show_victory_if_complete_and_mode3():
  05a4: 93cf           push r28
  05a6: 93df           push r29
  05a8: b7cd           r28 := PORT.SPL
  05aa: b7de           r29 := PORT.SPH
  05ac: 56c7 40d1      r29:r28 -= 0x167
  05b0: b60f           r0 := PORT.SREG
  05b2: 94f8           Clear(I flag)
  05b4: bfde           PORT.SPH := r29
  05b6: be0f           PORT.SREG := r0
  05b8: bfcd           PORT.SPL := r28
  05ba: e02c e030      r19:r18 := 12
  05be: 01ae           r21:r20 := r29:r28
  05c0: 5a44 4f5e      r21:r20 -= -0x15c
  05c4: e160           r22 := 0x10
  05c6: e58a e096      r25:r24 := 0x65a (=Chall)
  05ca: 940e 073b      call 0x0e76 <Chall::read_from_encextflash(r22=pageaddr, r21:r20=buffer, r19:r18=size)>
  05ce: e52b e030      r19:r18 := 0x5b
  05d2: 01ae           r21:r20 := r29:r28
  05d4: 5f4f 4f5e      r21:r20 -= -0x101
  05d8: e563           r22 := 0x53
  05da: e58a e096      r25:r24 := 0x65a (=Chall)
  05de: 940e 073b      call 0x0e76 <Chall::read_from_encextflash(r22=pageaddr, r21:r20=buffer, r19:r18=size)>
  05e2: e04c e050      r21:r20 := 12
  05e6: 01be           r23:r22 := r29:r28
  05e8: 5a64 4f7e      r23:r22 -= -0x15c
  05ec: 01ce           r25:r24 := r29:r28
  05ee: 9601           r25:r24 += 1
  05f0: 940e 031b      call 0x0636 <rc4_init(uint8 rc4State[256]=r25:r24, uint8* key=r23:r22, keylen=r21:r20)>
  05f4: e54b e050      r21:r20 := 0x5b
  05f8: 01be           r23:r22 := r29:r28
  05fa: 5f6f 4f7e      r23:r22 -= -0x101
  05fe: 01ce           r25:r24 := r29:r28
  0600: 9601           r25:r24 += 1
  0602: 940e 0371      call 0x06e2 <rc4_crypt(uint8 rc4State[256]=r25:r24, uint8* data=r23:r22, len=r21:r20)>
  0606: 5fcf 4fde      r29:r28 -= -0x101
  060a: 8188           r24 := *(r29:r28)
  060c: 50c1 40d1      r29:r28 -= 0x101
  0610: 338d f439      if(r24 != 0x3d):jmp 0x0622 <_loc_0622>
  0614: 01be           r23:r22 := r29:r28
  0616: 5f6f 4f7e      r23:r22 -= -0x101
  061a: e387 e098      r25:r24 := 0x837 (=Serial)
  061e: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
_loc_0622:
  0622: 59c9 4fde      r29:r28 -= -0x167
  0626: b60f           r0 := PORT.SREG
  0628: 94f8           Clear(I flag)
  062a: bfde           PORT.SPH := r29
  062c: be0f           PORT.SREG := r0
  062e: bfcd           PORT.SPL := r28
  0630: 91df           pop r29
  0632: 91cf           pop r28
  0634: 9508           ret

rc4_init(uint8 rc4State[256]=r25:r24, uint8* key=r23:r22, keylen=r21:r20):
  0636: 92af           push r10
  0638: 92bf           push r11
  063a: 92cf           push r12
  063c: 92df           push r13
  063e: 92ef           push r14
  0640: 92ff           push r15
  0642: 930f           push r16
  0644: 931f           push r17
  0646: 93cf           push r28
  0648: 93df           push r29
  064a: 018c           r17:r16 := r25:r24
  064c: 017b           r15:r14 := r23:r22
  064e: 016a           r13:r12 := r21:r20
  0650: 1541 0551 f1c9 if(r21:r20 == 0):jmp 0x06c8 <_return 1>
  0656: 1561 0571 f1b1 if(r23:r22 == 0):jmp 0x06c8 <_return 1>
  065c: 01ec           r29:r28 := r25:r24
  065e: 01fc           r31:r30 := r25:r24
  0660: e020 e030      r19:r18 := 0
_loc_0664:
  0664: 9321           *(r31:r30 ++) := r18 # fill 256 bytes of r25:r24 with 0,1,2,3...
  0666: 5f2f 4f3f      r19:r18 -= -1
  066a: 1521           cmp r18, 0
  066c: e061           r22 := 1
  066e: 0736           cmp_carry r19, r22
  0670: f7c9           brne 0x0664 <_loc_0664>
  0672: e0e0 e0f0      r31:r30 := 0
  0676: e090           r25 := 0
  0678: 2ca1 24bb      r11:r10 := 0
  067c: 94b3           r11 ++
_for(r31:r30 in 0..0xff):
  067e: 8148           r20 := *(r29:r28)
  0680: 2f24 e030      r19:r18 := 0:r20
  0684: 0f29 1d31      r19:r18 += 0:r25
  0688: 01cf           r25:r24 := r31:r30
  068a: 01b6           r23:r22 := r13:r12
  068c: 940e 1d41      call 0x3a82 <libgcc.divmodhi4(dividend=r25:r24, divisor=r23:r22)->25:r24=r,r23:r22=q>
  0690: 01d7           r27:r26 := r15:r14
  0692: 0fa8 1fb9      r27:r26 += r25:r24
  0696: 918c           r24 := *(r27:r26)
  0698: 01b9           r23:r22 := r19:r18
  069a: 0f68 1d71      r23:r22 += 0:r24
  069e: fd87           skip_if_not(bit(r24, 7))
  06a0: 957a           r23 --
  06a2: 01cb           r25:r24 := r23:r22
  06a4: 01b5           r23:r22 := r11:r10
  06a6: 940e 1d41      call 0x3a82 <libgcc.divmodhi4(dividend=r25:r24, divisor=r23:r22)->25:r24=r,r23:r22=q>
  06aa: 2f98           r25 := r24
  06ac: 01d8           r27:r26 := r17:r16
  06ae: 0fa8 1db1      r27:r26 += 0:r24
  06b2: 918c           r24 := *(r27:r26)
  06b4: 9389           *(r29:r28 ++) := r24
  06b6: 934c           *(r27:r26) := r20
  06b8: 9631           r31:r30 += 1
  06ba: 15e1           cmp r30, 0
  06bc: e071           r23 := 1
  06be: 07f7           cmp_carry r31, r23
  06c0: f6f1           brne 0x067e <_for(r31:r30 in 0..0xff)>
  06c2: e080 e090      r25:r24 := 0
  06c6: c002           jmp 0x06cc <_ret>
_return 1:
  06c8: e081 e090      r25:r24 := 1
_ret:
  06cc: 91df           pop r29
  06ce: 91cf           pop r28
  06d0: 911f           pop r17
  06d2: 910f           pop r16
  06d4: 90ff           pop r15
  06d6: 90ef           pop r14
  06d8: 90df           pop r13
  06da: 90cf           pop r12
  06dc: 90bf           pop r11
  06de: 90af           pop r10
  06e0: 9508           ret

rc4_crypt(uint8 rc4State[256]=r25:r24, uint8* data=r23:r22, len=r21:r20):
  06e2: 92ef           push r14
  06e4: 92ff           push r15
  06e6: 930f           push r16
  06e8: 931f           push r17
  06ea: 93cf           push r28
  06ec: 93df           push r29
  06ee: 01ec           r29:r28 := r25:r24
  06f0: 1561 0571 f161 if(r23:r22 == 0):jmp 0x074e <_loc_074e>
  06f6: 1541 0551 f149 if(r21:r20 == 0):jmp 0x074e <_loc_074e>
  06fc: 01db           r27:r26 := r23:r22
  06fe: e030           r19 := 0
  0700: e020           r18 := 0
_loc_0702:
  0702: 01cd           r25:r24 := r27:r26
  0704: 1b86 0b97      r25:r24 -= r23:r22
  0708: 1784 0795 f4ec if(r25:r24 >=s r21:r20):jmp 0x0748 <_loc_0748>
  070e: 5f2f           r18 -= -1
  0710: 2fe2 e0f0      r31:r30 := 0:r18
  0714: 017f           r15:r14 := r31:r30
  0716: 0eec 1efd      r15:r14 += r29:r28
  071a: 01f7           r31:r30 := r15:r14
  071c: 8190           r25 := *(r31:r30)
  071e: 0f39           r19 += r25
  0720: 018e           r17:r16 := r29:r28
  0722: 0f03 1d11      r17:r16 += 0:r19
  0726: 01f8           r31:r30 := r17:r16
  0728: 8180           r24 := *(r31:r30)
  072a: 01f7           r31:r30 := r15:r14
  072c: 8380           *(r31:r30) := r24
  072e: 01f8           r31:r30 := r17:r16
  0730: 8390           *(r31:r30) := r25
  0732: 01f7           r31:r30 := r15:r14
  0734: 8180           r24 := *(r31:r30)
  0736: 0f98           r25 += r24
  0738: 01fe           r31:r30 := r29:r28
  073a: 0fe9 1df1      r31:r30 += 0:r25
  073e: 919c           r25 := *(r27:r26)
  0740: 8180           r24 := *(r31:r30)
  0742: 2789           r24 ^= r25        # *(r27:r26 ++) ^= RC4_PRGA(...)
  0744: 938d           *(r27:r26 ++) := r24
  0746: cfdd           jmp 0x0702 <_loc_0702>
_loc_0748:
  0748: e080 e090      r25:r24 := 0
  074c: c002           jmp 0x0752 <_loc_0752>
_loc_074e:
  074e: e081 e090      r25:r24 := 1
_loc_0752:
  0752: 91df           pop r29
  0754: 91cf           pop r28
  0756: 911f           pop r17
  0758: 910f           pop r16
  075a: 90ff           pop r15
  075c: 90ef           pop r14
  075e: 9508           ret

quizz_game():
  0760: 92ef           push r14
  0762: 92ff           push r15
  0764: 930f           push r16
  0766: 931f           push r17
  0768: 93cf           push r28
  076a: 93df           push r29
  076c: b7cd           r28 := PORT.SPL
  076e: b7de           r29 := PORT.SPH
  0770: 54cb 09d1      r29:r28 -= 0x4b
  0774: b60f           r0 := PORT.SREG
  0776: 94f8           Clear(I flag)
  0778: bfde           PORT.SPH := r29
  077a: be0f           PORT.SREG := r0
  077c: bfcd           PORT.SPL := r28
  077e: 962c           r29:r28 += 12
  0780: ae1f           *(r29:r28 + 0x3f) := 0
  0782: 972c           r29:r28 -= 12
  0784: e08a           r24 := 10         # Copy 5 question addresses into [SP+0x41..]
  0786: e1e2 e0f1      r31:r30 := 0x112 (=quizz_questions)
  078a: 01de           r27:r26 := r29:r28
  078c: 5baf 4fbf      r27:r26 -= -0x41
_loc_0790:
  0790: 9001           r0 := *(r31:r30 ++)
  0792: 920d           *(r27:r26 ++) := r0
  0794: 958a           r24 --
  0796: f7e1           brne 0x0790 <_loc_0790>
  0798: 01ae           r21:r20 := r29:r28
  079a: 5b45 4f5f      r21:r20 -= -0x4b
  079e: e161           r22 := 0x11       # Load quizz question number into [SP+0x4b]
  07a0: e58a e096      r25:r24 := 0x65a (=Chall)
  07a4: 940e 0849      call 0x1092 <Chall::read_1b_from_encextflash(r22=pageaddr, r21:r20=buffer)>
  07a8: e265 e075      r23:r22 := 0x525 (="")
  07ac: e387 e098      r25:r24 := 0x837 (=Serial)
  07b0: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  07b4: e26b e072      r23:r22 := 0x22b (="Quizz> answer 'q' to quit the game, names start with a capital letter.")
_loc_07b8:
  07b8: e387 e098      r25:r24 := 0x837 (=Serial)
  07bc: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
_loc_07c0:
  07c0: 962c           r29:r28 += 12
  07c2: ad8f           r24 := *(r29:r28 + 0x3f)
  07c4: 972c           r29:r28 -= 12
  07c6: 3085 f048      if(r24 < 5):jmp 0x07dc <_loc_07dc>
  07ca: e762 e072      r23:r22 := 0x272 (="You won this game !")
  07ce: e387 e098      r25:r24 := 0x837 (=Serial)
  07d2: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  07d6: e081 e090      r25:r24 := 1
  07da: c0e3           jmp 0x09a2 <_loc_09a2>
_loc_07dc:
  07dc: e866 e072      r23:r22 := 0x286 (="Quizz> ")
  07e0: e387 e098      r25:r24 := 0x837 (=Serial)
  07e4: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  07e8: e86e e072      r23:r22 := 0x28e (="Question ")
  07ec: e387 e098      r25:r24 := 0x837 (=Serial)
  07f0: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  07f4: 962c           r29:r28 += 12
  07f6: ad6f           r22 := *(r29:r28 + 0x3f)
  07f8: 972c           r29:r28 -= 12
  07fa: e070           r23 := 0
  07fc: 5f6f 4f7f      r23:r22 -= -1
  0800: e04a e050      r21:r20 := 10
  0804: e387 e098      r25:r24 := 0x837 (=Serial)
  0808: 940e 1747      call 0x2e8e <size_t Print::print(unsigned int n=r23:r22, int base=r21:r20)>
  080c: e36a e074      r23:r22 := 0x43a (=": ")
  0810: e387 e098      r25:r24 := 0x837 (=Serial)
  0814: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  0818: 962c           r29:r28 += 12
  081a: ad8f           r24 := *(r29:r28 + 0x3f)
  081c: 972c           r29:r28 -= 12
  081e: 01fe           r31:r30 := r29:r28
  0820: 5bef 4fff      r31:r30 -= -0x41
  0824: 0fe8 1df1      r31:r30 += 0:r24
  0828: 0fe8 1df1      r31:r30 += 0:r24
  082c: 8160           r22 := *(r31:r30)
  082e: 8171           r23 := *(r31:r30 + 0x01)
  0830: e387 e098      r25:r24 := 0x837 (=Serial)
  0834: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  0838: e866 e072      r23:r22 := 0x286 (="Quizz> ")
  083c: e387 e098      r25:r24 := 0x837 (=Serial)
  0840: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  0844: e000 e010      r17:r16 := 0
_loc_0848:
  0848: e387 e098      r25:r24 := 0x837 (=Serial)
  084c: 940e 176e      call 0x2edc <int Serial?::available()>
  0850: 1618 0619 f00c if(0 <s r25:r24):jmp 0x0858 <_loc_0858>
  0856: c0a0           jmp 0x0998 <_loc_0998>
_loc_0858:
  0858: 3200 0511 f40c if(r17:r16 >=s 0x20):jmp 0x0860 <_loc_0860>
  085e: c086           jmp 0x096c <_loc_096c>
_loc_0860:
  0860: 01c8           r25:r24 := r17:r16
  0862: 9701           r25:r24 -= 1
  0864: e2e1 e0f0      r31:r30 := 0x21
  0868: 0fec 1ffd      r31:r30 += r29:r28
  086c: 0fe8 1ff9      r31:r30 += r25:r24
  0870: 8120           r18 := *(r31:r30)
  0872: 302d f141      if(r18 == 13):jmp 0x08c6 <_loc_08c6>
  0876: 302a f131      if(r18 == 10):jmp 0x08c6 <_loc_08c6>
  087a: 3200 0511 f721 if(r17:r16 != 0x20):jmp 0x0848 <_loc_0848>
_loc_0880:
  0880: e2e1 e0f0      r31:r30 := 0x21
  0884: 0fec 1ffd      r31:r30 += r29:r28
  0888: 0fe8 1ff9      r31:r30 += r25:r24
  088c: 8210           *(r31:r30) := 0
  088e: 962c           r29:r28 += 12
  0890: ad8f           r24 := *(r29:r28 + 0x3f)
  0892: 972c           r29:r28 -= 12
  0894: 3082 f139      if(r24 == 2):jmp 0x08e6 <_loc_08e6>
  0898: f458           brcc 0x08b0 <_loc_08b0>
  089a: 2388 f0e9      if_not(r24):jmp 0x08d8 <_loc_08d8>
  089e: 3081 f599      if(r24 != 1):jmp 0x0908 <_loc_0908>
  08a2: e220 e030      r19:r18 := 0x20
  08a6: 01ae           r21:r20 := r29:r28
  08a8: 5f4f 4f5f      r21:r20 -= -1
  08ac: e264           r22 := 0x24
  08ae: c028           jmp 0x0900 <_loc_0900>
_loc_08b0:
  08b0: 3083 f101      if(r24 == 3):jmp 0x08f4 <_loc_08f4>
  08b4: 3084 f541      if(r24 != 4):jmp 0x0908 <_loc_0908>
  08b8: e220 e030      r19:r18 := 0x20
  08bc: 01ae           r21:r20 := r29:r28
  08be: 5f4f 4f5f      r21:r20 -= -1
  08c2: e464           r22 := 0x44
  08c4: c01d           jmp 0x0900 <_loc_0900>
_loc_08c6:
  08c6: 3002 0511 f6d1 if(r17:r16 != 2):jmp 0x0880 <_loc_0880>
  08cc: a129           r18 := *(r29:r28 + 0x21)
  08ce: 3721 f6b9      if(r18 != 0x71):jmp 0x0880 <_loc_0880>
  08d2: ef8f ef9f      r25:r24 := 0xffff
  08d6: c065           jmp 0x09a2 <_loc_09a2>
_loc_08d8:
  08d8: e220 e030      r19:r18 := 0x20
  08dc: 01ae           r21:r20 := r29:r28
  08de: 5f4f 4f5f      r21:r20 -= -1
  08e2: e260           r22 := 0x20
  08e4: c00d           jmp 0x0900 <_loc_0900>
_loc_08e6:
  08e6: e220 e030      r19:r18 := 0x20
  08ea: 01ae           r21:r20 := r29:r28
  08ec: 5f4f 4f5f      r21:r20 -= -1
  08f0: e26b           r22 := 0x2b
  08f2: c006           jmp 0x0900 <_loc_0900>
_loc_08f4:
  08f4: e220 e030      r19:r18 := 0x20
  08f8: 01ae           r21:r20 := r29:r28
  08fa: 5f4f 4f5f      r21:r20 -= -1
  08fe: e368           r22 := 0x38
_loc_0900:
  0900: e58a e096      r25:r24 := 0x65a (=Chall)
  0904: 940e 073b      call 0x0e76 <Chall::read_from_encextflash(r22=pageaddr, r21:r20=buffer, r19:r18=size)>
_loc_0908:
  0908: 8149           r20 := *(r29:r28 + 0x01)
  090a: 2755           r21 := 0
  090c: fd47           skip_if_not(bit(r20, 7))
  090e: 9550           r21 := 0xff - r21
  0910: 01be           r23:r22 := r29:r28
  0912: 5f6e 4f7f      r23:r22 -= -2
  0916: 01ce           r25:r24 := r29:r28
  0918: 9681           r25:r24 += 0x21
  091a: 940e 1dd4      call 0x3ba8 <libgcc.strncmp(r25:r24=s1, r23:r22=s2, r21:r20=n)->r24>
  091e: 2b89           r24 |= r25
  0920: f511           brne 0x0966 <_loc_0966>
  0922: e968 e072      r23:r22 := 0x298 (="Correct.")
  0926: e387 e098      r25:r24 := 0x837 (=Serial)
  092a: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  092e: 962c           r29:r28 += 12
  0930: ad8f           r24 := *(r29:r28 + 0x3f)
  0932: 972c           r29:r28 -= 12
  0934: 5f8f           r24 -= -1
  0936: 962c           r29:r28 += 12
  0938: af8f           *(r29:r28 + 0x3f) := r24
  093a: 972c           r29:r28 -= 12
  093c: 3085 f430      if(r24 >= 5):jmp 0x094c <_game_won>
  0940: ea61 e072      r23:r22 := 0x2a1 (=" Next question.")
  0944: e387 e098      r25:r24 := 0x837 (=Serial)
  0948: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
_game_won:
  094c: 962c           r29:r28 += 12
  094e: ad4f           r20 := *(r29:r28 + 0x3f)
  0950: 972c           r29:r28 -= 12
  0952: e161           r22 := 0x11
  0954: e58a e096      r25:r24 := 0x65a (=Chall)
  0958: 940e 099f      call 0x133e <Chall::write_int8_to_encextflash(r22=pageaddr, r20)>
  095c: e58a e096      r25:r24 := 0x65a (=Chall)
  0960: 940e 09c5      call 0x138a <Chall::write_all_extflashmem(data@stack, size is 0xf8)>
  0964: cf2d           jmp 0x07c0 <_loc_07c0>
_loc_0966:
  0966: eb61 e072      r23:r22 := 0x2b1 (="Nope, try again.")
  096a: cf26           jmp 0x07b8 <_loc_07b8>
_loc_096c:
  096c: 0178           r15:r14 := r17:r16
  096e: ef8f           r24 := 0xff
  0970: 1ae8           r14 -= r24
  0972: 0af8           r15 -= r24+C
  0974: e387 e098      r25:r24 := 0x837 (=Serial)
  0978: 940e 1792      call 0x2f24 <int Serial?::read()>
  097c: e2e1 e0f0      r31:r30 := 0x21
  0980: 0fec 1ffd      r31:r30 += r29:r28
  0984: 0fe0 1ff1      r31:r30 += r17:r16
  0988: 8380           *(r31:r30) := r24
  098a: 2f68           r22 := r24
  098c: e387 e098      r25:r24 := 0x837 (=Serial)
  0990: 940e 167a      call 0x2cf4 <size_t Print::print(char c=r22)>
  0994: 0187           r17:r16 := r15:r14
  0996: cf58           jmp 0x0848 <_loc_0848>
_loc_0998:
  0998: 1501 0511 f409 if(r17:r16 != 0):jmp 0x09a0 <_loc_09a0>
  099e: cf54           jmp 0x0848 <_loc_0848>
_loc_09a0:
  09a0: cf5f           jmp 0x0860 <_loc_0860>
_loc_09a2:
  09a2: 5bc5 4fdf      r29:r28 -= -0x4b
  09a6: b60f           r0 := PORT.SREG
  09a8: 94f8           Clear(I flag)
  09aa: bfde           PORT.SPH := r29
  09ac: be0f           PORT.SREG := r0
  09ae: bfcd           PORT.SPL := r28
  09b0: 91df           pop r29
  09b2: 91cf           pop r28
  09b4: 911f           pop r17
  09b6: 910f           pop r16
  09b8: 90ff           pop r15
  09ba: 90ef           pop r14
  09bc: 9508           ret

fortune_game():
  09be: 92cf           push r12
  09c0: 92df           push r13
  09c2: 92ef           push r14
  09c4: 92ff           push r15
  09c6: 931f           push r17
  09c8: 93cf           push r28
  09ca: 93df           push r29
  09cc: b7cd           r28 := PORT.SPL
  09ce: b7de           r29 := PORT.SPH
  09d0: 97a4           r29:r28 -= 0x24
  09d2: b60f           r0 := PORT.SREG
  09d4: 94f8           Clear(I flag)
  09d6: bfde           PORT.SPH := r29
  09d8: be0f           PORT.SREG := r0
  09da: bfcd           PORT.SPL := r28
  09dc: a219           *(r29:r28 + 0x21) := 0
  09de: a21a           *(r29:r28 + 0x22) := 0
  09e0: a21b           *(r29:r28 + 0x23) := 0
  09e2: a21c           *(r29:r28 + 0x24) := 0
  09e4: 01ae           r21:r20 := r29:r28
  09e6: 5d4f 4f5f      r21:r20 -= -0x21
  09ea: e162           r22 := 0x12
  09ec: e58a e096      r25:r24 := 0x65a (=Chall)
  09f0: 940e 084d      call 0x109a <Chall::read_2b_from_encextflash(r22=pageaddr, r21:r20=buffer)>
  09f4: e265 e075      r23:r22 := 0x525 (="")
  09f8: e387 e098      r25:r24 := 0x837 (=Serial)
  09fc: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  0a00: eb6a e073      r23:r22 := 0x3ba (="Fortune> Get 65535 coins to win this game. Enter 'q' to quit.")
_loc_0a04:
  0a04: e387 e098      r25:r24 := 0x837 (=Serial)
  0a08: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
_loc_0a0c:
  0a0c: ef68 e073      r23:r22 := 0x3f8 (="Fortune> You have ")
  0a10: e387 e098      r25:r24 := 0x837 (=Serial)
  0a14: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  0a18: a149           r20 := *(r29:r28 + 0x21)
  0a1a: a15a           r21 := *(r29:r28 + 0x22)
  0a1c: a16b           r22 := *(r29:r28 + 0x23)
  0a1e: a17c           r23 := *(r29:r28 + 0x24)
  0a20: e02a e030      r19:r18 := 10
  0a24: e387 e098      r25:r24 := 0x837 (=Serial)
  0a28: 940e 16fd      call 0x2dfa <size_t Print::print(long n=r23:r22:r21:r20, int base=r19:r18)>
  0a2c: ed6a e074      r23:r22 := 0x4da
  0a30: e387 e098      r25:r24 := 0x837 (=Serial)
  0a34: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  0a38: a189           r24 := *(r29:r28 + 0x21)
  0a3a: a19a           r25 := *(r29:r28 + 0x22)
  0a3c: a1ab           r26 := *(r29:r28 + 0x23)
  0a3e: a1bc           r27 := *(r29:r28 + 0x24)
  0a40: 3f8f           cmp r24, 0xff
  0a42: 4f9f           r25 -= -1+C
  0a44: 05a1 05b1      cmp_carry r27:r26, 0
  0a48: f439           brne 0x0a58 <_loc_0a58>
  0a4a: e06b e074      r23:r22 := 0x40b (="You won this game.")
  0a4e: e387 e098      r25:r24 := 0x837 (=Serial)
  0a52: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  0a56: c134           jmp 0x0cc0 <_loc_0cc0>
_loc_0a58:
  0a58: e16e e074      r23:r22 := 0x41e (="Fortune> Bet on number (0-9): ")
  0a5c: e387 e098      r25:r24 := 0x837 (=Serial)
  0a60: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  0a64: 2ce1 2cf1      r15:r14 := 0
_loc_0a68:
  0a68: e387 e098      r25:r24 := 0x837 (=Serial)
  0a6c: 940e 176e      call 0x2edc <int Serial?::available()>
  0a70: 1618 0619 f00c if(0 <s r25:r24):jmp 0x0a78 <_loc_0a78>
  0a76: c0ee           jmp 0x0c54 <_loc_0c54>
_loc_0a78:
  0a78: e280           r24 := 0x20
  0a7a: 16e8 04f1 f40c if(r15:r14 >=s 0:r24):jmp 0x0a82 <_loc_0a82>
  0a80: c0ee           jmp 0x0c5e <_loc_0c5e>
_loc_0a82:
  0a82: 01fe           r31:r30 := r29:r28
  0a84: 0dee 1dff      r31:r30 += r15:r14
  0a88: 8180           r24 := *(r31:r30)
  0a8a: 308d f039      if(r24 == 13):jmp 0x0a9c <_loc_0a9c>
  0a8e: 308a f029      if(r24 == 10):jmp 0x0a9c <_loc_0a9c>
  0a92: e220           r18 := 0x20
  0a94: 16e2 04f1 f739 if(r15:r14 != 0:r18):jmp 0x0a68 <_loc_0a68>
  0a9a: c008           jmp 0x0aac <_loc_0aac>
_loc_0a9c:
  0a9c: e082           r24 := 2
  0a9e: 16e8 04f1 f421 if(r15:r14 != 0:r24):jmp 0x0aac <_loc_0aac>
  0aa4: 8189           r24 := *(r29:r28 + 0x01)
  0aa6: 3781 f409      if(r24 != 0x71):jmp 0x0aac <_loc_0aac>
  0aaa: c0d1           jmp 0x0c4e <_loc_0c4e>
_loc_0aac:
  0aac: e265 e075      r23:r22 := 0x525 (="")
  0ab0: e387 e098      r25:r24 := 0x837 (=Serial)
  0ab4: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  0ab8: 8119           r17 := *(r29:r28 + 0x01)
  0aba: ed80           r24 := 0xd0
  0abc: 0f81           r24 += r17
  0abe: 308a f008      if(r24 < 10):jmp 0x0ac4 <_loc_0ac4>
  0ac2: cfa4           jmp 0x0a0c <_loc_0a0c>
_loc_0ac4:
  0ac4: e36d e074      r23:r22 := 0x43d (="Fortune> Number of coins to bet: ")
  0ac8: e387 e098      r25:r24 := 0x837 (=Serial)
  0acc: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  0ad0: 8219           *(r29:r28 + 0x01) := 0
  0ad2: 2ce1 2cf1      r15:r14 := 0
_loc_0ad6:
  0ad6: e387 e098      r25:r24 := 0x837 (=Serial)
  0ada: 940e 176e      call 0x2edc <int Serial?::available()>
  0ade: 1618 0619 f00c if(0 <s r25:r24):jmp 0x0ae6 <_loc_0ae6>
  0ae4: c0d2           jmp 0x0c8a <_loc_0c8a>
_loc_0ae6:
  0ae6: e220           r18 := 0x20
  0ae8: 16e2 04f1 f40c if(r15:r14 >=s 0:r18):jmp 0x0af0 <_loc_0af0>
  0aee: c0d2           jmp 0x0c94 <_loc_0c94>
_loc_0af0:
  0af0: 0167           r13:r12 := r15:r14
  0af2: e081           r24 := 1
  0af4: 1ac8 08d1      r13:r12 -= 0:r24
  0af8: e0e1 e0f0      r31:r30 := 1
  0afc: 0fec 1ffd      r31:r30 += r29:r28
  0b00: 0dec 1dfd      r31:r30 += r13:r12
  0b04: 8180           r24 := *(r31:r30)
  0b06: 308d f031      if(r24 == 13):jmp 0x0b16 <_loc_0b16>
  0b0a: 308a f021      if(r24 == 10):jmp 0x0b16 <_loc_0b16>
  0b0e: e220           r18 := 0x20
  0b10: 16e2 04f1 f701 if(r15:r14 != 0:r18):jmp 0x0ad6 <_loc_0ad6>
_loc_0b16:
  0b16: e265 e075      r23:r22 := 0x525 (="")
  0b1a: e387 e098      r25:r24 := 0x837 (=Serial)
  0b1e: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  0b22: e082           r24 := 2
  0b24: 16e8 04f1 f421 if(r15:r14 != 0:r24):jmp 0x0b32 <_loc_0b32>
  0b2a: 8189           r24 := *(r29:r28 + 0x01)
  0b2c: 3781 f409      if(r24 != 0x71):jmp 0x0b32 <_loc_0b32>
  0b30: c08e           jmp 0x0c4e <_loc_0c4e>
_loc_0b32:
  0b32: e0e1 e0f0      r31:r30 := 1
  0b36: 0fec 1ffd      r31:r30 += r29:r28
  0b3a: 0dec 1dfd      r31:r30 += r13:r12
  0b3e: 8210           *(r31:r30) := 0
  0b40: 01ce           r25:r24 := r29:r28
  0b42: 9601           r25:r24 += 1
  0b44: 940e 1db6      call 0x3b6c <libgcc.atoi(r25:r24=str)->r25:r24=number>
  0b48: 016c           r13:r12 := r25:r24
  0b4a: 24ee           r14 := 0
  0b4c: fcd7           skip_if_not(bit(r13, 7))
  0b4e: 94e0           r14 := 0xff - r14
  0b50: 2cfe           r15 := r14
  0b52: a189           r24 := *(r29:r28 + 0x21)
  0b54: a19a           r25 := *(r29:r28 + 0x22)
  0b56: a1ab           r26 := *(r29:r28 + 0x23)
  0b58: a1bc           r27 := *(r29:r28 + 0x24)
  0b5a: 158c 059d 05ae 05bf f40c if(r27:r26:r25:r24 >=s r15:r14:r13:r12):jmp 0x0b66 <_loc_0b66>
  0b64: c071           jmp 0x0c48 <_loc_0c48>
_loc_0b66:
  0b66: 14c1 04d1 04e1 04f1 f409 if(r15:r14:r13:r12 != 0):jmp 0x0b72 <_loc_0b72>
  0b70: c06b           jmp 0x0c48 <_loc_0c48>
_loc_0b72:
  0b72: e064           r22 := 4
  0b74: e288 e098      r25:r24 := 0x828 (=Badge)
  0b78: 940e 1228      call 0x2450 <uint16_t Ndh15Badge::touch_measure(uint8_t pin)>
  0b7c: e06a e070      r23:r22 := 10
  0b80: 940e 1d2d      call 0x3a5a <libgcc.udivmodhi4(dividend=r25:r24, divisor=r23:r22)->25:r24=r,r23:r22=q>
  0b84: e0a0 e0b0      r27:r26 := 0
  0b88: 2f41 2755      r21:r20 := 0:r17
  0b8c: fd47           skip_if_not(bit(r20, 7))
  0b8e: 9550           r21 := 0xff - r21
  0b90: 5340 0951      r21:r20 -= 0x30
  0b94: 2766           r22 := 0
  0b96: fd57           skip_if_not(bit(r21, 7))
  0b98: 9560           r22 := 0xff - r22
  0b9a: 2f76           r23 := r22
  0b9c: 1784 0795 07a6 07b7 f529 if(r27:r26:r25:r24 != r23:r22:r21:r20):jmp 0x0bf0 <_loc_0bf0>
  0ba6: e56f e074      r23:r22 := 0x45f (="Fortune> Lucky you ! You've been rewarded with ")
  0baa: e387 e098      r25:r24 := 0x837 (=Serial)
  0bae: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  0bb2: e02a e030      r19:r18 := 10
  0bb6: 01b7           r23:r22 := r15:r14
  0bb8: 01a6           r21:r20 := r13:r12
  0bba: e387 e098      r25:r24 := 0x837 (=Serial)
  0bbe: 940e 16fd      call 0x2dfa <size_t Print::print(long n=r23:r22:r21:r20, int base=r19:r18)>
  0bc2: e86f e074      r23:r22 := 0x48f (=" coins !")
  0bc6: e387 e098      r25:r24 := 0x837 (=Serial)
  0bca: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  0bce: 0ccc 1cdd 1cee 1cff r15:r14:r13:r12 *= 2
  0bd6: a189           r24 := *(r29:r28 + 0x21)
  0bd8: a19a           r25 := *(r29:r28 + 0x22)
  0bda: a1ab           r26 := *(r29:r28 + 0x23)
  0bdc: a1bc           r27 := *(r29:r28 + 0x24)
  0bde: 0ec8 1ed9 1eea 1efb r15:r14:r13:r12 += r27:r26:r25:r24
  0be6: a2c9           *(r29:r28 + 0x21) := r12
  0be8: a2da           *(r29:r28 + 0x22) := r13
  0bea: a2eb           *(r29:r28 + 0x23) := r14
  0bec: a2fc           *(r29:r28 + 0x24) := r15
  0bee: c020           jmp 0x0c30 <_loc_0c30>
_loc_0bf0:
  0bf0: e968 e074      r23:r22 := 0x498 (="Fortune> Nope, you lost ")
  0bf4: e387 e098      r25:r24 := 0x837 (=Serial)
  0bf8: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  0bfc: e02a e030      r19:r18 := 10
  0c00: 01b7           r23:r22 := r15:r14
  0c02: 01a6           r21:r20 := r13:r12
  0c04: e387 e098      r25:r24 := 0x837 (=Serial)
  0c08: 940e 16fd      call 0x2dfa <size_t Print::print(long n=r23:r22:r21:r20, int base=r19:r18)>
  0c0c: eb61 e074      r23:r22 := 0x4b1 (=" coins ...")
  0c10: e387 e098      r25:r24 := 0x837 (=Serial)
  0c14: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  0c18: a189           r24 := *(r29:r28 + 0x21)
  0c1a: a19a           r25 := *(r29:r28 + 0x22)
  0c1c: a1ab           r26 := *(r29:r28 + 0x23)
  0c1e: a1bc           r27 := *(r29:r28 + 0x24)
  0c20: 198c 099d 09ae 09bf r27:r26:r25:r24 -= r15:r14:r13:r12
  0c28: a389           *(r29:r28 + 0x21) := r24
  0c2a: a39a           *(r29:r28 + 0x22) := r25
  0c2c: a3ab           *(r29:r28 + 0x23) := r26
  0c2e: a3bc           *(r29:r28 + 0x24) := r27
_loc_0c30:
  0c30: a149           r20 := *(r29:r28 + 0x21)
  0c32: a15a           r21 := *(r29:r28 + 0x22)
  0c34: e162           r22 := 0x12
  0c36: e58a e096      r25:r24 := 0x65a (=Chall)
  0c3a: 940e 09b2      call 0x1364 <Chall::write_int16_to_encextflash(r22=pageaddr, r21:r20)>
  0c3e: e58a e096      r25:r24 := 0x65a (=Chall)
  0c42: 940e 09c5      call 0x138a <Chall::write_all_extflashmem(data@stack, size is 0xf8)>
  0c46: cee2           jmp 0x0a0c <_loc_0a0c>
_loc_0c48:
  0c48: eb6c e074      r23:r22 := 0x4bc (="Fortune> You don't have enough coins.")
  0c4c: cedb           jmp 0x0a04 <_loc_0a04>
_loc_0c4e:
  0c4e: ef8f ef9f      r25:r24 := 0xffff
  0c52: c036           jmp 0x0cc0 <_loc_0cc0>
_loc_0c54:
  0c54: 14e1 04f1 f409 if(r15:r14 != 0):jmp 0x0c5c <_loc_0c5c>
  0c5a: cf06           jmp 0x0a68 <_loc_0a68>
_loc_0c5c:
  0c5c: cf12           jmp 0x0a82 <_loc_0a82>
_loc_0c5e:
  0c5e: 0167           r13:r12 := r15:r14
  0c60: ef2f           r18 := 0xff
  0c62: 1ac2           r12 -= r18
  0c64: 0ad2           r13 -= r18+C
  0c66: e387 e098      r25:r24 := 0x837 (=Serial)
  0c6a: 940e 1792      call 0x2f24 <int Serial?::read()>
  0c6e: e0e1 e0f0      r31:r30 := 1
  0c72: 0fec 1ffd      r31:r30 += r29:r28
  0c76: 0dee 1dff      r31:r30 += r15:r14
  0c7a: 8380           *(r31:r30) := r24
  0c7c: 2f68           r22 := r24
  0c7e: e387 e098      r25:r24 := 0x837 (=Serial)
  0c82: 940e 167a      call 0x2cf4 <size_t Print::print(char c=r22)>
  0c86: 0176           r15:r14 := r13:r12
  0c88: ceef           jmp 0x0a68 <_loc_0a68>
_loc_0c8a:
  0c8a: 14e1 04f1 f409 if(r15:r14 != 0):jmp 0x0c92 <_loc_0c92>
  0c90: cf22           jmp 0x0ad6 <_loc_0ad6>
_loc_0c92:
  0c92: cf2e           jmp 0x0af0 <_loc_0af0>
_loc_0c94:
  0c94: 0167           r13:r12 := r15:r14
  0c96: ef8f           r24 := 0xff
  0c98: 1ac8           r12 -= r24
  0c9a: 0ad8           r13 -= r24+C
  0c9c: e387 e098      r25:r24 := 0x837 (=Serial)
  0ca0: 940e 1792      call 0x2f24 <int Serial?::read()>
  0ca4: e0e1 e0f0      r31:r30 := 1
  0ca8: 0fec 1ffd      r31:r30 += r29:r28
  0cac: 0dee 1dff      r31:r30 += r15:r14
  0cb0: 8380           *(r31:r30) := r24
  0cb2: 2f68           r22 := r24
  0cb4: e387 e098      r25:r24 := 0x837 (=Serial)
  0cb8: 940e 167a      call 0x2cf4 <size_t Print::print(char c=r22)>
  0cbc: 0176           r15:r14 := r13:r12
  0cbe: cf0b           jmp 0x0ad6 <_loc_0ad6>
_loc_0cc0:
  0cc0: 96a4           r29:r28 += 0x24
  0cc2: b60f           r0 := PORT.SREG
  0cc4: 94f8           Clear(I flag)
  0cc6: bfde           PORT.SPH := r29
  0cc8: be0f           PORT.SREG := r0
  0cca: bfcd           PORT.SPL := r28
  0ccc: 91df           pop r29
  0cce: 91cf           pop r28
  0cd0: 911f           pop r17
  0cd2: 90ff           pop r15
  0cd4: 90ef           pop r14
  0cd6: 90df           pop r13
  0cd8: 90cf           pop r12
  0cda: 9508           ret

Chall::Chall(r25:r24=this):
  0cdc: 01fc           r31:r30 := r25:r24
  0cde: 95f3           r31 ++
  0ce0: 5f88 4f9e      r25:r24 -= -0x108
_loc_0ce4:
  0ce4: 9211           *(r31:r30 ++) := 0
  0ce6: 17e8 07f9 f7e1 if(r31:r30 != r25:r24):jmp 0x0ce4 <_loc_0ce4>
  0cec: 9508           ret

Chall::checksum(r25:r24=this, r23:r22=data, r21:r20=size)->r25:r24:r23:r22:
  0cee: 92cf           push r12
  0cf0: 92df           push r13
  0cf2: 92ef           push r14
  0cf4: 92ff           push r15
  0cf6: 930f           push r16
  0cf8: 931f           push r17
  0cfa: 93cf           push r28
  0cfc: 93df           push r29
  0cfe: 01eb           r29:r28 := r23:r22
  0d00: 018a           r17:r16 := r21:r20
  0d02: 01fb           r31:r30 := r23:r22
  0d04: e462 e577      r23:r22 := 0x5742
  0d08: e481 e592      r25:r24 := 0x5241
_loc_0d0c:
  0d0c: 019f           r19:r18 := r31:r30
  0d0e: 1b2c 0b3d      r19:r18 -= r29:r28
  0d12: 1720 0731 f484 if(r19:r18 >=s r17:r16):jmp 0x0d38 <_loc_0d38>
  0d18: 9121           r18 := *(r31:r30 ++)
  0d1a: 016b           r13:r12 := r23:r22
  0d1c: 017c           r15:r14 := r25:r24
  0d1e: 0ec2 1cd1 1ce1 1cf1 r15:r14:r13:r12 += 0:0:0:r18
  0d26: 01a7           r21:r20 := r15:r14
  0d28: 0196           r19:r18 := r13:r12
  0d2a: ee6f eb7e      r23:r22 := 0xbeef
  0d2e: e48d ed93      r25:r24 := 0xd34d
  0d32: 940e 1d1d      call 0x3a3a <libgcc.mulsi3(A=r25:r24:r23:r22, B=r21:r20:r19:r18)->r25:r24:r23:r22=A*B>
  0d36: cfea           jmp 0x0d0c <_loc_0d0c>
_loc_0d38:
  0d38: 91df           pop r29
  0d3a: 91cf           pop r28
  0d3c: 911f           pop r17
  0d3e: 910f           pop r16
  0d40: 90ff           pop r15
  0d42: 90ef           pop r14
  0d44: 90df           pop r13
  0d46: 90cf           pop r12
  0d48: 9508           ret

Chall::check_extflashmem():
  0d4a: 928f           push r8
  0d4c: 929f           push r9
  0d4e: 92af           push r10
  0d50: 92bf           push r11
  0d52: 92ef           push r14
  0d54: 92ff           push r15
  0d56: 930f           push r16
  0d58: 931f           push r17
  0d5a: 93cf           push r28
  0d5c: 93df           push r29
  0d5e: b7cd           r28 := PORT.SPL
  0d60: b7de           r29 := PORT.SPH
  0d62: 95da           r29 --
  0d64: b60f           r0 := PORT.SREG
  0d66: 94f8           Clear(I flag)
  0d68: bfde           PORT.SPH := r29
  0d6a: be0f           PORT.SREG := r0
  0d6c: bfcd           PORT.SPL := r28
  0d6e: 017c           r15:r14 := r25:r24
  0d70: e028 e030      r19:r18 := 8
  0d74: 01ae           r21:r20 := r29:r28
  0d76: 5047 4f5f      r21:r20 -= -0xf9 (=OTGTCON)
  0d7a: e060           r22 := 0
  0d7c: e288 e098      r25:r24 := 0x828 (=Badge)
  0d80: 940e 135f      call 0x26be <int Ndh15Badge::readPage(uint8_t paddr=r22, byte *pdata=r21:r20, int length=r19:r18)>
  0d84: 2b89           r24 |= r25
  0d86: f409           brne 0x0d8a <_loc_0d8a>
  0d88: c04e           jmp 0x0e26 <_loc_0e26>
_loc_0d8a:
  0d8a: 50c7 4fdf      r29:r28 -= -0xf9 (=OTGTCON)
  0d8e: 8188           r24 := *(r29:r28)
  0d90: 8199           r25 := *(r29:r28 + 0x01)
  0d92: 81aa           r26 := *(r29:r28 + 0x02)
  0d94: 81bb           r27 := *(r29:r28 + 0x03)
  0d96: 5fc9 40d0      r29:r28 -= 0xf9
  0d9a: 348e           cmp r24, 0x4e     # First 4 bytes at page 0 are "NDHC"
  0d9c: 4494 44a8 44b3 r27:r26:r25 -= 0x434844+C
  0da2: f009           breq 0x0da6 <_loc_0da6>
  0da4: c043           jmp 0x0e2c <_return 0>
_loc_0da6:
  0da6: e000 e010      r17:r16 := 0      # Read the 0xf8 bytes after the first 8 in a buffer
_loc_0daa:
  0daa: e041 e050      r21:r20 := 1
  0dae: 0f4c 1f5d      r21:r20 += r29:r28
  0db2: 0f40 1f51      r21:r20 += r17:r16
  0db6: e068           r22 := 8
  0db8: 0f60           r22 += r16
  0dba: e028 e030      r19:r18 := 8
  0dbe: e288 e098      r25:r24 := 0x828 (=Badge)
  0dc2: 940e 135f      call 0x26be <int Ndh15Badge::readPage(uint8_t paddr=r22, byte *pdata=r21:r20, int length=r19:r18)>
  0dc6: 5f08 4f1f      r17:r16 -= -8
  0dca: 3f08 0511 f769 if(r17:r16 != 0xf8):jmp 0x0daa <_loc_0daa>
  0dd0: e028 e030      r19:r18 := 8
  0dd4: 01ae           r21:r20 := r29:r28
  0dd6: 5047 4f5f      r21:r20 -= -0xf9 (=OTGTCON)
  0dda: e064           r22 := 4
  0ddc: e288 e098      r25:r24 := 0x828 (=Badge)
  0de0: 940e 135f      call 0x26be <int Ndh15Badge::readPage(uint8_t paddr=r22, byte *pdata=r21:r20, int length=r19:r18)>
  0de4: 50c7 4fdf      r29:r28 -= -0xf9 (=OTGTCON)
  0de8: 8088           r8 := *(r29:r28)
  0dea: 8099           r9 := *(r29:r28 + 0x01)
  0dec: 80aa           r10 := *(r29:r28 + 0x02)
  0dee: 80bb           r11 := *(r29:r28 + 0x03)
  0df0: 5fc9 40d0      r29:r28 -= 0xf9
  0df4: ef48 e050      r21:r20 := 0xf8 (=UPINT)
  0df8: 01be           r23:r22 := r29:r28
  0dfa: 5f6f 4f7f      r23:r22 -= -1
  0dfe: 01c7           r25:r24 := r15:r14
  0e00: 940e 0677      call 0x0cee <Chall::checksum(r25:r24=this, r23:r22=data, r21:r20=size)->r25:r24:r23:r22>
  0e04: 1568 0579 058a 059b f491 if(r25:r24:r23:r22 != r11:r10:r9:r8):jmp 0x0e32 <_return 2>
  0e0e: 01a7           r21:r20 := r15:r14
  0e10: 9553           r21 ++
  0e12: e028 e030      r19:r18 := 8
  0e16: e068           r22 := 8
  0e18: e288 e098      r25:r24 := 0x828 (=Badge)
  0e1c: 940e 135f      call 0x26be <int Ndh15Badge::readPage(uint8_t paddr=r22, byte *pdata=r21:r20, int length=r19:r18)>
  0e20: e081 e090      r25:r24 := 1
  0e24: c008           jmp 0x0e36 <_ret>
_loc_0e26:
  0e26: ef8f ef9f      r25:r24 := 0xffff
  0e2a: c005           jmp 0x0e36 <_ret>
_return 0:
  0e2c: e080 e090      r25:r24 := 0
  0e30: c002           jmp 0x0e36 <_ret>
_return 2:
  0e32: e082 e090      r25:r24 := 2
_ret:
  0e36: 95d3           r29 ++
  0e38: b60f           r0 := PORT.SREG
  0e3a: 94f8           Clear(I flag)
  0e3c: bfde           PORT.SPH := r29
  0e3e: be0f           PORT.SREG := r0
  0e40: bfcd           PORT.SPL := r28
  0e42: 91df           pop r29
  0e44: 91cf           pop r28
  0e46: 911f           pop r17
  0e48: 910f           pop r16
  0e4a: 90ff           pop r15
  0e4c: 90ef           pop r14
  0e4e: 90bf           pop r11
  0e50: 90af           pop r10
  0e52: 909f           pop r9
  0e54: 908f           pop r8
  0e56: 9508           ret

Chall::genkey(this=r25:r24, r22=pageaddr, r21:r20=keybuffer[9]):
  0e58: 01fc           r31:r30 := r25:r24 # Copy 8 bytes from this+0x100 to buffer...
  0e5a: 95f3           r31 ++
  0e5c: 01da           r27:r26 := r21:r20
  0e5e: 5f88 4f9e      r25:r24 -= -0x108
_loc_0e62:
  0e62: 9121           r18 := *(r31:r30 ++)
  0e64: 932d           *(r27:r26 ++) := r18
  0e66: 17e8 07f9 f7d9 if(r31:r30 != r25:r24):jmp 0x0e62 <_loc_0e62>
  0e6c: 01fa           r31:r30 := r21:r20 # ... and put r22 after ; return 0
  0e6e: 8760           *(r31:r30 + 0x08) := r22
  0e70: e080 e090      r25:r24 := 0
  0e74: 9508           ret

Chall::read_from_encextflash(r22=pageaddr, r21:r20=buffer, r19:r18=size):
  0e76: 922f           push r2
  0e78: 923f           push r3
  0e7a: 924f           push r4
  0e7c: 925f           push r5
  0e7e: 926f           push r6
  0e80: 927f           push r7
  0e82: 928f           push r8
  0e84: 929f           push r9
  0e86: 92af           push r10
  0e88: 92bf           push r11
  0e8a: 92cf           push r12
  0e8c: 92df           push r13
  0e8e: 92ef           push r14
  0e90: 92ff           push r15
  0e92: 930f           push r16
  0e94: 931f           push r17
  0e96: 93cf           push r28
  0e98: 93df           push r29
  0e9a: b7cd           r28 := PORT.SPL
  0e9c: b7de           r29 := PORT.SPH
  0e9e: 9762           r29:r28 -= 0x12
  0ea0: b60f           r0 := PORT.SREG
  0ea2: 94f8           Clear(I flag)
  0ea4: bfde           PORT.SPH := r29
  0ea6: be0f           PORT.SREG := r0
  0ea8: bfcd           PORT.SPL := r28
  0eaa: 016c           r13:r12 := r25:r24
  0eac: 2f16           r17 := r22        # save args: r13:r12=this, r17=pageaddr, r11:r10=buffer, r15:r14=size
  0eae: 015a           r11:r10 := r21:r20
  0eb0: 0179           r15:r14 := r19:r18
  0eb2: 2f86           r24 := r22
  0eb4: 7f88           r24 &= 0xf8
  0eb6: 2e38           r3 := r24
  0eb8: 2f86           r24 := r22
  0eba: 7087           r24 &= 7
  0ebc: f409           brne 0x0ec0 <_loc_0ec0>
  0ebe: c04c           jmp 0x0f58 <_read_aligned_page_on_8bytes>
_loc_0ec0:
  0ec0: 014e           r9:r8 := r29:r28  # read into [SP+10] flash[arg_addr & 0xf8 ..+8]
  0ec2: e08a           r24 := 10
  0ec4: 0e88 1c91      r9:r8 += 0:r24
  0ec8: e028 e030      r19:r18 := 8
  0ecc: 01a4           r21:r20 := r9:r8
  0ece: 2d63           r22 := r3
  0ed0: e288 e098      r25:r24 := 0x828 (=Badge)
  0ed4: 940e 135f      call 0x26be <int Ndh15Badge::readPage(uint8_t paddr=r22, byte *pdata=r21:r20, int length=r19:r18)>
  0ed8: 01ae           r21:r20 := r29:r28
  0eda: 5f4f 4f5f      r21:r20 -= -1
  0ede: 2d63           r22 := r3
  0ee0: 01c6           r25:r24 := r13:r12
  0ee2: 940e 072c      call 0x0e58 <Chall::genkey(this=r25:r24, r22=pageaddr, r21:r20=keybuffer[9])>
  0ee6: ff97 c003      if_not(bit(r25, 7)):jmp 0x0ef0 <_loc_0ef0>
_loc_0eea:
  0eea: ef8f ef9f      r25:r24 := 0xffff
  0eee: c0b8           jmp 0x1060 <_ret>
_loc_0ef0:
  0ef0: e049 e050      r21:r20 := 9
  0ef4: 01be           r23:r22 := r29:r28
  0ef6: 5f6f 4f7f      r23:r22 -= -1
  0efa: 01c6           r25:r24 := r13:r12
  0efc: 940e 031b      call 0x0636 <rc4_init(uint8 rc4State[256]=r25:r24, uint8* key=r23:r22, keylen=r21:r20)>
  0f00: e048 e050      r21:r20 := 8
  0f04: 01b4           r23:r22 := r9:r8
  0f06: 01c6           r25:r24 := r13:r12
  0f08: 940e 0371      call 0x06e2 <rc4_crypt(uint8 rc4State[256]=r25:r24, uint8* data=r23:r22, len=r21:r20)>
  0f0c: 2d23 e030      r19:r18 := 0:r3
  0f10: 2fe1 e0f0      r31:r30 := 0:r17
  0f14: 01c9           r25:r24 := r19:r18
  0f16: 1b8e 0b9f      r25:r24 -= r31:r30
  0f1a: 9608           r25:r24 += 8
  0f1c: 158e 059f f01c if(r25:r24 <s r15:r14):jmp 0x0f28 <_loc_0f28>
  0f22: 0d1e           r17 += r14
  0f24: 1913           r17 -= r3
  0f26: c001           jmp 0x0f2a <_loc_0f2a>
_loc_0f28:
  0f28: e018           r17 := 8
_loc_0f2a:
  0f2a: 1be2 0bf3      r31:r30 -= r19:r18
  0f2e: 0de8 1df9      r31:r30 += r9:r8
  0f32: 01d5           r27:r26 := r11:r10
  0f34: 019f           r19:r18 := r31:r30
  0f36: 2f61 e070      r23:r22 := 0:r17
_loc_0f3a:
  0f3a: 018f           r17:r16 := r31:r30
  0f3c: 1b02 0b13      r17:r16 -= r19:r18
  0f40: 01cf           r25:r24 := r31:r30
  0f42: 1988 0999      r25:r24 -= r9:r8
  0f46: 1786 0797 f41c if(r25:r24 >=s r23:r22):jmp 0x0f52 <_loc_0f52>
  0f4c: 9181           r24 := *(r31:r30 ++)
  0f4e: 938d           *(r27:r26 ++) := r24
  0f50: cff4           jmp 0x0f3a <_loc_0f3a>
_loc_0f52:
  0f52: e088           r24 := 8
  0f54: 0e38           r3 += r24
  0f56: c002           jmp 0x0f5c <_loc_0f5c>
_read_aligned_page_on_8bytes:
  0f58: e000 e010      r17:r16 := 0
_loc_0f5c:
  0f5c: 1ae0 0af1      r15:r14 -= r17:r16
  0f60: 0127           r5:r4 := r15:r14
  0f62: fef7 c003      if_not(bit(r15, 7)):jmp 0x0f6c <_loc_0f6c>
  0f66: e087           r24 := 7
  0f68: 0e48 1c51      r5:r4 += 0:r24
_loc_0f6c:
  0f6c: e033           r19 := 3          # r5:r4 = (size + 7) / 8
_loc_0f6e:
  0f6e: 9455           asr r5
  0f70: 9447           r4:C := C:r4 ; >> 1
  0f72: 953a           r19 --
  0f74: f7e1           brne 0x0f6e <_loc_0f6e>
  0f76: 2c61 2c71      r7:r6 := 0
  0f7a: 2c23           r2 := r3
  0f7c: 1a20           r2 -= r16
_loc_0f7e:
  0f7e: 1464 0475 f564 if(r7:r6 >=s r5:r4):jmp 0x0fdc <_loc_0fdc>
  0f84: 0145           r9:r8 := r11:r10
  0f86: 0e80 1e91      r9:r8 += r17:r16
  0f8a: e028 e030      r19:r18 := 8
  0f8e: 01a4           r21:r20 := r9:r8
  0f90: 2d72           r23 := r2
  0f92: 0f70           r23 += r16
  0f94: 2f67           r22 := r23        # Read 8 bytes from extflash page r23=r2+r16 into r11:r10[r17:r16..]
  0f96: e288 e098      r25:r24 := 0x828 (=Badge)
  0f9a: 8b7a           *(r29:r28 + 0x12) := r23
  0f9c: 940e 135f      call 0x26be <int Ndh15Badge::readPage(uint8_t paddr=r22, byte *pdata=r21:r20, int length=r19:r18)>
  0fa0: 01ae           r21:r20 := r29:r28
  0fa2: 5f4f 4f5f      r21:r20 -= -1
  0fa6: 897a           r23 := *(r29:r28 + 0x12)
  0fa8: 2f67           r22 := r23
  0faa: 01c6           r25:r24 := r13:r12
  0fac: 940e 072c      call 0x0e58 <Chall::genkey(this=r25:r24, r22=pageaddr, r21:r20=keybuffer[9])>
  0fb0: fd97 cf9b      if(bit(r25, 7)):jmp 0x0eea <_loc_0eea>
  0fb4: e049 e050      r21:r20 := 9
  0fb8: 01be           r23:r22 := r29:r28
  0fba: 5f6f 4f7f      r23:r22 -= -1
  0fbe: 01c6           r25:r24 := r13:r12
  0fc0: 940e 031b      call 0x0636 <rc4_init(uint8 rc4State[256]=r25:r24, uint8* key=r23:r22, keylen=r21:r20)>
  0fc4: e048 e050      r21:r20 := 8
  0fc8: 01b4           r23:r22 := r9:r8
  0fca: 01c6           r25:r24 := r13:r12
  0fcc: 940e 0371      call 0x06e2 <rc4_crypt(uint8 rc4State[256]=r25:r24, uint8* data=r23:r22, len=r21:r20)>
  0fd0: 5f08 4f1f      r17:r16 -= -8
  0fd4: ef8f           r24 := 0xff
  0fd6: 1a68           r6 -= r24
  0fd8: 0a78           r7 -= r24+C
  0fda: cfd1           jmp 0x0f7e <_loc_0f7e>
_loc_0fdc:
  0fdc: 01c2           r25:r24 := r5:r4
  0fde: e023           r18 := 3
_loc_0fe0:
  0fe0: 0f88 1f99      r25:r24 *= 2
  0fe4: 952a           r18 --
  0fe6: f7e1           brne 0x0fe0 <_loc_0fe0>
  0fe8: 1ae8 0af9      r15:r14 -= r25:r24
  0fec: 141e 041f f01c if(0 <s r15:r14):jmp 0x0ff8 <_loc_0ff8>
_loc_0ff2:
  0ff2: e080 e090      r25:r24 := 0
  0ff6: c034           jmp 0x1060 <_ret>
_loc_0ff8:
  0ff8: e088           r24 := 8
  0ffa: 9e48           r1:r0 := r4 * r24
  0ffc: 0c30           r3 += r0
  0ffe: 2411           r1 := 0
  1000: e028 e030      r19:r18 := 8
  1004: 01ae           r21:r20 := r29:r28
  1006: 5f46 4f5f      r21:r20 -= -10
  100a: 2d63           r22 := r3
  100c: e288 e098      r25:r24 := 0x828 (=Badge)
  1010: 940e 135f      call 0x26be <int Ndh15Badge::readPage(uint8_t paddr=r22, byte *pdata=r21:r20, int length=r19:r18)>
  1014: 01ae           r21:r20 := r29:r28
  1016: 5f4f 4f5f      r21:r20 -= -1
  101a: 2d63           r22 := r3
  101c: 01c6           r25:r24 := r13:r12
  101e: 940e 072c      call 0x0e58 <Chall::genkey(this=r25:r24, r22=pageaddr, r21:r20=keybuffer[9])>
  1022: fd97 cf62      if(bit(r25, 7)):jmp 0x0eea <_loc_0eea>
  1026: e049 e050      r21:r20 := 9
  102a: 01be           r23:r22 := r29:r28
  102c: 5f6f 4f7f      r23:r22 -= -1
  1030: 01c6           r25:r24 := r13:r12
  1032: 940e 031b      call 0x0636 <rc4_init(uint8 rc4State[256]=r25:r24, uint8* key=r23:r22, keylen=r21:r20)>
  1036: e048 e050      r21:r20 := 8
  103a: 01be           r23:r22 := r29:r28
  103c: 5f66 4f7f      r23:r22 -= -10
  1040: 01c6           r25:r24 := r13:r12
  1042: 940e 0371      call 0x06e2 <rc4_crypt(uint8 rc4State[256]=r25:r24, uint8* data=r23:r22, len=r21:r20)>
  1046: 01de           r27:r26 := r29:r28
  1048: 961a           r27:r26 += 10
  104a: 01f5           r31:r30 := r11:r10
  104c: 0fe0 1ff1      r31:r30 += r17:r16
  1050: 0eea 1efb      r15:r14 += r27:r26
_loc_1054:
  1054: 918d           r24 := *(r27:r26 ++)
  1056: 9381           *(r31:r30 ++) := r24
  1058: 15ae 05bf f7d9 if(r27:r26 != r15:r14):jmp 0x1054 <_loc_1054>
  105e: cfc9           jmp 0x0ff2 <_loc_0ff2>
_ret:
  1060: 9662           r29:r28 += 0x12
  1062: b60f           r0 := PORT.SREG
  1064: 94f8           Clear(I flag)
  1066: bfde           PORT.SPH := r29
  1068: be0f           PORT.SREG := r0
  106a: bfcd           PORT.SPL := r28
  106c: 91df           pop r29
  106e: 91cf           pop r28
  1070: 911f           pop r17
  1072: 910f           pop r16
  1074: 90ff           pop r15
  1076: 90ef           pop r14
  1078: 90df           pop r13
  107a: 90cf           pop r12
  107c: 90bf           pop r11
  107e: 90af           pop r10
  1080: 909f           pop r9
  1082: 908f           pop r8
  1084: 907f           pop r7
  1086: 906f           pop r6
  1088: 905f           pop r5
  108a: 904f           pop r4
  108c: 903f           pop r3
  108e: 902f           pop r2
  1090: 9508           ret

Chall::read_1b_from_encextflash(r22=pageaddr, r21:r20=buffer):
  1092: e021 e030      r19:r18 := 1
  1096: 940c 073b      jmp 0x0e76 <Chall::read_from_encextflash(r22=pageaddr, r21:r20=buffer, r19:r18=size)>

Chall::read_2b_from_encextflash(r22=pageaddr, r21:r20=buffer):
  109a: e022 e030      r19:r18 := 2
  109e: 940c 073b      jmp 0x0e76 <Chall::read_from_encextflash(r22=pageaddr, r21:r20=buffer, r19:r18=size)>

Chall::read_4b_from_encextflash(r22=pageaddr, r21:r20=buffer):
  10a2: e024 e030      r19:r18 := 4
  10a6: 940c 073b      jmp 0x0e76 <Chall::read_from_encextflash(r22=pageaddr, r21:r20=buffer, r19:r18=size)>

Chall::write_to_encextflash(r25:r24=this, r22=pageaddr, r21:r20=data, r19:r18=size):
  10aa: 923f           push r3
  10ac: 924f           push r4
  10ae: 925f           push r5
  10b0: 926f           push r6
  10b2: 927f           push r7
  10b4: 928f           push r8
  10b6: 929f           push r9
  10b8: 92af           push r10
  10ba: 92bf           push r11
  10bc: 92cf           push r12
  10be: 92df           push r13
  10c0: 92ef           push r14
  10c2: 92ff           push r15
  10c4: 930f           push r16
  10c6: 931f           push r17
  10c8: 93cf           push r28
  10ca: 93df           push r29
  10cc: b7cd           r28 := PORT.SPL
  10ce: b7de           r29 := PORT.SPH
  10d0: 9761           r29:r28 -= 0x11
  10d2: b60f           r0 := PORT.SREG
  10d4: 94f8           Clear(I flag)
  10d6: bfde           PORT.SPH := r29
  10d8: be0f           PORT.SREG := r0
  10da: bfcd           PORT.SPL := r28
  10dc: 017c           r15:r14 := r25:r24
  10de: 2f16           r17 := r22
  10e0: 015a           r11:r10 := r21:r20
  10e2: 0169           r13:r12 := r19:r18
  10e4: 2f86           r24 := r22
  10e6: 7f88           r24 &= 0xf8
  10e8: 2e58           r5 := r24
  10ea: 2f86           r24 := r22
  10ec: 7087           r24 &= 7
  10ee: f409           brne 0x10f2 <_loc_10f2>
  10f0: c060           jmp 0x11b2 <_loc_11b2>
_loc_10f2:
  10f2: 014e           r9:r8 := r29:r28
  10f4: e09a           r25 := 10
  10f6: 0e89 1c91      r9:r8 += 0:r25
  10fa: e028 e030      r19:r18 := 8
  10fe: 01a4           r21:r20 := r9:r8
  1100: 2d65           r22 := r5
  1102: e288 e098      r25:r24 := 0x828 (=Badge)
  1106: 940e 135f      call 0x26be <int Ndh15Badge::readPage(uint8_t paddr=r22, byte *pdata=r21:r20, int length=r19:r18)>
  110a: 01ae           r21:r20 := r29:r28
  110c: 5f4f 4f5f      r21:r20 -= -1
  1110: 2d65           r22 := r5
  1112: 01c7           r25:r24 := r15:r14
  1114: 940e 072c      call 0x0e58 <Chall::genkey(this=r25:r24, r22=pageaddr, r21:r20=keybuffer[9])>
  1118: fd97 c0f7      if(bit(r25, 7)):jmp 0x130a <_loc_130a>
  111c: e049 e050      r21:r20 := 9
  1120: 01be           r23:r22 := r29:r28
  1122: 5f6f 4f7f      r23:r22 -= -1
  1126: 01c7           r25:r24 := r15:r14
  1128: 940e 031b      call 0x0636 <rc4_init(uint8 rc4State[256]=r25:r24, uint8* key=r23:r22, keylen=r21:r20)>
  112c: e048 e050      r21:r20 := 8
  1130: 01b4           r23:r22 := r9:r8
  1132: 01c7           r25:r24 := r15:r14
  1134: 940e 0371      call 0x06e2 <rc4_crypt(uint8 rc4State[256]=r25:r24, uint8* data=r23:r22, len=r21:r20)>
  1138: 2d85 e090      r25:r24 := 0:r5
  113c: 2fe1 e0f0      r31:r30 := 0:r17
  1140: 019c           r19:r18 := r25:r24
  1142: 1b2e 0b3f      r19:r18 -= r31:r30
  1146: 5f28 4f3f      r19:r18 -= -8
  114a: 152c 053d f01c if(r19:r18 <s r13:r12):jmp 0x1156 <_loc_1156>
  1150: 0d1c           r17 += r12
  1152: 1915           r17 -= r5
  1154: c001           jmp 0x1158 <_loc_1158>
_loc_1156:
  1156: e018           r17 := 8
_loc_1158:
  1158: 01d5           r27:r26 := r11:r10
  115a: 1be8 0bf9      r31:r30 -= r25:r24
  115e: 0de8 1df9      r31:r30 += r9:r8
  1162: 019f           r19:r18 := r31:r30
  1164: 2f61 e070      r23:r22 := 0:r17
_loc_1168:
  1168: 018f           r17:r16 := r31:r30
  116a: 1b02 0b13      r17:r16 -= r19:r18
  116e: 01cf           r25:r24 := r31:r30
  1170: 1988 0999      r25:r24 -= r9:r8
  1174: 1786 0797 f41c if(r25:r24 >=s r23:r22):jmp 0x1180 <_loc_1180>
  117a: 918d           r24 := *(r27:r26 ++)
  117c: 9381           *(r31:r30 ++) := r24
  117e: cff4           jmp 0x1168 <_loc_1168>
_loc_1180:
  1180: e049 e050      r21:r20 := 9
  1184: 01be           r23:r22 := r29:r28
  1186: 5f6f 4f7f      r23:r22 -= -1
  118a: 01c7           r25:r24 := r15:r14
  118c: 940e 031b      call 0x0636 <rc4_init(uint8 rc4State[256]=r25:r24, uint8* key=r23:r22, keylen=r21:r20)>
  1190: e048 e050      r21:r20 := 8
  1194: 01b4           r23:r22 := r9:r8
  1196: 01c7           r25:r24 := r15:r14
  1198: 940e 0371      call 0x06e2 <rc4_crypt(uint8 rc4State[256]=r25:r24, uint8* data=r23:r22, len=r21:r20)>
  119c: e028 e030      r19:r18 := 8
  11a0: 01a4           r21:r20 := r9:r8
  11a2: 2d65           r22 := r5
  11a4: e288 e098      r25:r24 := 0x828 (=Badge)
  11a8: 940e 1323      call 0x2646 <int Ndh15Badge::writePage(uint8_t paddr, byte *pdata, int length)>
  11ac: e088           r24 := 8
  11ae: 0e58           r5 += r24
  11b0: c002           jmp 0x11b6 <_loc_11b6>
_loc_11b2:
  11b2: e000 e010      r17:r16 := 0
_loc_11b6:
  11b6: 1ac0 0ad1      r13:r12 -= r17:r16
  11ba: 0136           r7:r6 := r13:r12
  11bc: fed7 c003      if_not(bit(r13, 7)):jmp 0x11c6 <_loc_11c6>
  11c0: e097           r25 := 7
  11c2: 0e69 1c71      r7:r6 += 0:r25
_loc_11c6:
  11c6: e033           r19 := 3
_loc_11c8:
  11c8: 9475           asr r7
  11ca: 9467           r6:C := C:r6 ; >> 1
  11cc: 953a           r19 --
  11ce: f7e1           brne 0x11c8 <_loc_11c8>
  11d0: 2c81 2c91      r9:r8 := 0
  11d4: 2c45           r4 := r5
  11d6: 1a40           r4 -= r16
_loc_11d8:
  11d8: 1486 0497 f5e4 if(r9:r8 >=s r7:r6):jmp 0x1256 <_loc_1256>
  11de: 01f5           r31:r30 := r11:r10
  11e0: 0fe0 1ff1      r31:r30 += r17:r16
  11e4: e080 e090      r25:r24 := 0
_loc_11e8:
  11e8: 9121           r18 := *(r31:r30 ++)
  11ea: 9601           r25:r24 += 1
  11ec: 3088 0591 f7d9 if(r25:r24 != 8):jmp 0x11e8 <_loc_11e8>
  11f2: e0ea e0f0      r31:r30 := 10
  11f6: 0fec 1ffd      r31:r30 += r29:r28
  11fa: 0fe0 1ff1      r31:r30 += r17:r16
  11fe: 8320           *(r31:r30) := r18
  1200: 2c34           r3 := r4
  1202: 0e30           r3 += r16
  1204: 01ae           r21:r20 := r29:r28
  1206: 5f4f 4f5f      r21:r20 -= -1
  120a: 2d63           r22 := r3
  120c: 01c7           r25:r24 := r15:r14
  120e: 940e 072c      call 0x0e58 <Chall::genkey(this=r25:r24, r22=pageaddr, r21:r20=keybuffer[9])>
  1212: fd97 c07a      if(bit(r25, 7)):jmp 0x130a <_loc_130a>
  1216: e049 e050      r21:r20 := 9
  121a: 01be           r23:r22 := r29:r28
  121c: 5f6f 4f7f      r23:r22 -= -1
  1220: 01c7           r25:r24 := r15:r14
  1222: 940e 031b      call 0x0636 <rc4_init(uint8 rc4State[256]=r25:r24, uint8* key=r23:r22, keylen=r21:r20)>
  1226: e048 e050      r21:r20 := 8
  122a: 01be           r23:r22 := r29:r28
  122c: 5f66 4f7f      r23:r22 -= -10
  1230: 01c7           r25:r24 := r15:r14
  1232: 940e 0371      call 0x06e2 <rc4_crypt(uint8 rc4State[256]=r25:r24, uint8* data=r23:r22, len=r21:r20)>
  1236: e028 e030      r19:r18 := 8
  123a: 01ae           r21:r20 := r29:r28
  123c: 5f46 4f5f      r21:r20 -= -10
  1240: 2d63           r22 := r3
  1242: e288 e098      r25:r24 := 0x828 (=Badge)
  1246: 940e 1323      call 0x2646 <int Ndh15Badge::writePage(uint8_t paddr, byte *pdata, int length)>
  124a: 5f08 4f1f      r17:r16 -= -8
  124e: ef8f           r24 := 0xff
  1250: 1a88           r8 -= r24
  1252: 0a98           r9 -= r24+C
  1254: cfc1           jmp 0x11d8 <_loc_11d8>
_loc_1256:
  1256: 01c3           r25:r24 := r7:r6
  1258: e023           r18 := 3
_loc_125a:
  125a: 0f88 1f99      r25:r24 *= 2
  125e: 952a           r18 --
  1260: f7e1           brne 0x125a <_loc_125a>
  1262: 1ac8 0ad9      r13:r12 -= r25:r24
  1266: 141c 041d f00c if(0 <s r13:r12):jmp 0x126e <_loc_126e>
  126c: c04d           jmp 0x1308 <_loc_1308>
_loc_126e:
  126e: e098           r25 := 8
  1270: 9e69           r1:r0 := r6 * r25
  1272: 0c50           r5 += r0
  1274: 2411           r1 := 0
  1276: e028 e030      r19:r18 := 8
  127a: 01ae           r21:r20 := r29:r28
  127c: 5f46 4f5f      r21:r20 -= -10
  1280: 2d65           r22 := r5
  1282: e288 e098      r25:r24 := 0x828 (=Badge)
  1286: 940e 135f      call 0x26be <int Ndh15Badge::readPage(uint8_t paddr=r22, byte *pdata=r21:r20, int length=r19:r18)>
  128a: 01ae           r21:r20 := r29:r28
  128c: 5f4f 4f5f      r21:r20 -= -1
  1290: 2d65           r22 := r5
  1292: 01c7           r25:r24 := r15:r14
  1294: 940e 072c      call 0x0e58 <Chall::genkey(this=r25:r24, r22=pageaddr, r21:r20=keybuffer[9])>
  1298: fd97 c037      if(bit(r25, 7)):jmp 0x130a <_loc_130a>
  129c: e049 e050      r21:r20 := 9
  12a0: 01be           r23:r22 := r29:r28
  12a2: 5f6f 4f7f      r23:r22 -= -1
  12a6: 01c7           r25:r24 := r15:r14
  12a8: 940e 031b      call 0x0636 <rc4_init(uint8 rc4State[256]=r25:r24, uint8* key=r23:r22, keylen=r21:r20)>
  12ac: e048 e050      r21:r20 := 8
  12b0: 01be           r23:r22 := r29:r28
  12b2: 5f66 4f7f      r23:r22 -= -10
  12b6: 01c7           r25:r24 := r15:r14
  12b8: 940e 0371      call 0x06e2 <rc4_crypt(uint8 rc4State[256]=r25:r24, uint8* data=r23:r22, len=r21:r20)>
  12bc: 01f5           r31:r30 := r11:r10
  12be: 0fe0 1ff1      r31:r30 += r17:r16
  12c2: 01de           r27:r26 := r29:r28
  12c4: 961a           r27:r26 += 10
  12c6: 0eca 1edb      r13:r12 += r27:r26
_loc_12ca:
  12ca: 9181           r24 := *(r31:r30 ++)
  12cc: 938d           *(r27:r26 ++) := r24
  12ce: 15ac 05bd f7d9 if(r27:r26 != r13:r12):jmp 0x12ca <_loc_12ca>
  12d4: e049 e050      r21:r20 := 9
  12d8: 01be           r23:r22 := r29:r28
  12da: 5f6f 4f7f      r23:r22 -= -1
  12de: 01c7           r25:r24 := r15:r14
  12e0: 940e 031b      call 0x0636 <rc4_init(uint8 rc4State[256]=r25:r24, uint8* key=r23:r22, keylen=r21:r20)>
  12e4: e048 e050      r21:r20 := 8
  12e8: 01be           r23:r22 := r29:r28
  12ea: 5f66 4f7f      r23:r22 -= -10
  12ee: 01c7           r25:r24 := r15:r14
  12f0: 940e 0371      call 0x06e2 <rc4_crypt(uint8 rc4State[256]=r25:r24, uint8* data=r23:r22, len=r21:r20)>
  12f4: e028 e030      r19:r18 := 8
  12f8: 01ae           r21:r20 := r29:r28
  12fa: 5f46 4f5f      r21:r20 -= -10
  12fe: 2d65           r22 := r5
  1300: e288 e098      r25:r24 := 0x828 (=Badge)
  1304: 940e 1323      call 0x2646 <int Ndh15Badge::writePage(uint8_t paddr, byte *pdata, int length)>
_loc_1308:
  1308: c002           jmp 0x130e <_loc_130e>
_loc_130a:
  130a: ef8f ef9f      r25:r24 := 0xffff
_loc_130e:
  130e: 9661           r29:r28 += 0x11
  1310: b60f           r0 := PORT.SREG
  1312: 94f8           Clear(I flag)
  1314: bfde           PORT.SPH := r29
  1316: be0f           PORT.SREG := r0
  1318: bfcd           PORT.SPL := r28
  131a: 91df           pop r29
  131c: 91cf           pop r28
  131e: 911f           pop r17
  1320: 910f           pop r16
  1322: 90ff           pop r15
  1324: 90ef           pop r14
  1326: 90df           pop r13
  1328: 90cf           pop r12
  132a: 90bf           pop r11
  132c: 90af           pop r10
  132e: 909f           pop r9
  1330: 908f           pop r8
  1332: 907f           pop r7
  1334: 906f           pop r6
  1336: 905f           pop r5
  1338: 904f           pop r4
  133a: 903f           pop r3
  133c: 9508           ret

Chall::write_int8_to_encextflash(r22=pageaddr, r20):
  133e: 93cf           push r28
  1340: 93df           push r29
  1342: 921f           push r1
  1344: b7cd           r28 := PORT.SPL
  1346: b7de           r29 := PORT.SPH
  1348: 8349           *(r29:r28 + 0x01) := r20
  134a: e021 e030      r19:r18 := 1
  134e: 01ae           r21:r20 := r29:r28
  1350: 5f4f 4f5f      r21:r20 -= -1
  1354: 940e 0855      call 0x10aa <Chall::write_to_encextflash(r25:r24=this, r22=pageaddr, r21:r20=data, r19:r18=size)>
  1358: e080 e090      r25:r24 := 0
  135c: 900f           pop r0
  135e: 91df           pop r29
  1360: 91cf           pop r28
  1362: 9508           ret

Chall::write_int16_to_encextflash(r22=pageaddr, r21:r20):
  1364: 93cf           push r28
  1366: 93df           push r29
  1368: d000           nop
  136a: b7cd           r28 := PORT.SPL
  136c: b7de           r29 := PORT.SPH
  136e: 8349           *(r29:r28 + 0x01) := r20
  1370: 835a           *(r29:r28 + 0x02) := r21
  1372: e022 e030      r19:r18 := 2
  1376: 01ae           r21:r20 := r29:r28
  1378: 5f4f 4f5f      r21:r20 -= -1
  137c: 940e 0855      call 0x10aa <Chall::write_to_encextflash(r25:r24=this, r22=pageaddr, r21:r20=data, r19:r18=size)>
  1380: 900f           pop r0
  1382: 900f           pop r0
  1384: 91df           pop r29
  1386: 91cf           pop r28
  1388: 9508           ret

Chall::write_all_extflashmem(data@stack, size is 0xf8):
  138a: 92ef           push r14
  138c: 92ff           push r15
  138e: 930f           push r16
  1390: 931f           push r17
  1392: 93cf           push r28
  1394: 93df           push r29
  1396: b7cd           r28 := PORT.SPL
  1398: b7de           r29 := PORT.SPH
  139a: 95da           r29 --
  139c: b60f           r0 := PORT.SREG
  139e: 94f8           Clear(I flag)
  13a0: bfde           PORT.SPH := r29
  13a2: be0f           PORT.SREG := r0
  13a4: bfcd           PORT.SPL := r28
  13a6: 017c           r15:r14 := r25:r24
  13a8: e000 e010      r17:r16 := 0
_loc_13ac:
  13ac: e041 e050      r21:r20 := 1
  13b0: 0f4c 1f5d      r21:r20 += r29:r28
  13b4: 0f40 1f51      r21:r20 += r17:r16
  13b8: e068           r22 := 8
  13ba: 0f60           r22 += r16
  13bc: e028 e030      r19:r18 := 8
  13c0: e288 e098      r25:r24 := 0x828 (=Badge)
  13c4: 940e 135f      call 0x26be <int Ndh15Badge::readPage(uint8_t paddr=r22, byte *pdata=r21:r20, int length=r19:r18)>
  13c8: 5f08 4f1f      r17:r16 -= -8
  13cc: 3f08 0511 f769 if(r17:r16 != 0xf8):jmp 0x13ac <_loc_13ac>
  13d2: ef48 e050      r21:r20 := 0xf8 (=UPINT)
  13d6: 01be           r23:r22 := r29:r28
  13d8: 5f6f 4f7f      r23:r22 -= -1
  13dc: 01c7           r25:r24 := r15:r14
  13de: 940e 0677      call 0x0cee <Chall::checksum(r25:r24=this, r23:r22=data, r21:r20=size)->r25:r24:r23:r22>
  13e2: e42e           r18 := 0x4e
  13e4: 50c7 4fdf      r29:r28 -= -0xf9 (=OTGTCON)
  13e8: 8328           *(r29:r28) := r18
  13ea: 5fc9 40d0      r29:r28 -= 0xf9
  13ee: e424           r18 := 0x44
  13f0: 50c6 4fdf      r29:r28 -= -0xfa
  13f4: 8328           *(r29:r28) := r18
  13f6: 5fca 40d0      r29:r28 -= 0xfa
  13fa: e428           r18 := 0x48
  13fc: 50c5 4fdf      r29:r28 -= -0xfb
  1400: 8328           *(r29:r28) := r18
  1402: 5fcb 40d0      r29:r28 -= 0xfb
  1406: e423           r18 := 0x43
  1408: 50c4 4fdf      r29:r28 -= -0xfc
  140c: 8328           *(r29:r28) := r18
  140e: 5fcc 40d0      r29:r28 -= 0xfc
  1412: 50c3 4fdf      r29:r28 -= -0xfd
  1416: 8368           *(r29:r28) := r22
  1418: 5fcd 40d0      r29:r28 -= 0xfd
  141c: 50c2 4fdf      r29:r28 -= -0xfe
  1420: 8378           *(r29:r28) := r23
  1422: 5fce 40d0      r29:r28 -= 0xfe
  1426: 50c1 4fdf      r29:r28 -= -0xff
  142a: 8388           *(r29:r28) := r24
  142c: 5fcf 40d0      r29:r28 -= 0xff
  1430: 50c0 4fdf      r29:r28 -= -0x100 (=gamemode_addresses)
  1434: 8398           *(r29:r28) := r25
  1436: 50c0 40d1      r29:r28 -= 0x100
  143a: e028 e030      r19:r18 := 8
  143e: 01ae           r21:r20 := r29:r28
  1440: 5047 4f5f      r21:r20 -= -0xf9 (=OTGTCON)
  1444: e060           r22 := 0
  1446: e288 e098      r25:r24 := 0x828 (=Badge)
  144a: 940e 1323      call 0x2646 <int Ndh15Badge::writePage(uint8_t paddr, byte *pdata, int length)>
  144e: 95d3           r29 ++
  1450: b60f           r0 := PORT.SREG
  1452: 94f8           Clear(I flag)
  1454: bfde           PORT.SPH := r29
  1456: be0f           PORT.SREG := r0
  1458: bfcd           PORT.SPL := r28
  145a: 91df           pop r29
  145c: 91cf           pop r28
  145e: 911f           pop r17
  1460: 910f           pop r16
  1462: 90ff           pop r15
  1464: 90ef           pop r14
  1466: 9508           ret

cons4_Chall:
  1468: e58a e096      r25:r24 := 0x65a (=Chall)
  146c: 940c 066e      jmp 0x0cdc <Chall::Chall(r25:r24=this)>

accelero_labygame():
  1470: 92ef           push r14
  1472: 92ff           push r15
  1474: 930f           push r16
  1476: 931f           push r17
  1478: 93cf           push r28
  147a: 93df           push r29
  147c: e1c0           r28 := 0x10
  147e: 2eec 2cf1      r15:r14 := 0:r28
  1482: e0c0 e0d0      r29:r28 := 0
  1486: e000 e010      r17:r16 := 0
_repeat_16_times:
  148a: e288 e098      r25:r24 := 0x828 (=Badge)
  148e: 940e 1410      call 0x2820 <void Ndh15Badge::updateAccel(void)>
  1492: e288 e098      r25:r24 := 0x828 (=Badge)
  1496: 940e 12a7      call 0x254e <int Ndh15Badge::readX(void)>
  149a: fd97           skip_if_not(bit(r25, 7))
  149c: 9603           r25:r24 += 3
  149e: 9595           asr r25
  14a0: 9587           r24:C := C:r24 ; >> 1
  14a2: 9595           asr r25
  14a4: 9587           r24:C := C:r24 ; >> 1
  14a6: 0f08 1f19      r17:r16 += r25:r24 # r17:r16 += (accel_x + (3 if accel_x<0)/4
  14aa: e288 e098      r25:r24 := 0x828 (=Badge)
  14ae: 940e 12ab      call 0x2556 <int Ndh15Badge::readY(void)>
  14b2: fd97           skip_if_not(bit(r25, 7))
  14b4: 9603           r25:r24 += 3
  14b6: 9595           asr r25
  14b8: 9587           r24:C := C:r24 ; >> 1
  14ba: 9595           asr r25
  14bc: 9587           r24:C := C:r24 ; >> 1
  14be: 0fc8 1fd9      r29:r28 += r25:r24 # r29:r28 += (accel_y + ...)/4
  14c2: e041           r20 := 1
  14c4: 1ae4 08f1      r15:r14 -= 0:r20
  14c8: f701           brne 0x148a <_repeat_16_times>
  14ca: 0198           r19:r18 := r17:r16
  14cc: ff17 c002      if_not(bit(r17, 7)):jmp 0x14d4 <_loc_14d4>
  14d0: 5f21 4f3f      r19:r18 -= -15
_loc_14d4:
  14d4: e0f4           r31 := 4
_loc_14d6:
  14d6: 9535           asr r19           # accX = r19:r18 = (acc_accel_x + (15 if < 0)) / 16 ; signed div
  14d8: 9527           r18:C := C:r18 ; >> 1
  14da: 95fa           r31 --
  14dc: f7e1           brne 0x14d6 <_loc_14d6>
  14de: 01ce           r25:r24 := r29:r28
  14e0: fdd7           skip_if_not(bit(r29, 7))
  14e2: 960f           r25:r24 += 15
  14e4: e0e4           r30 := 4
_loc_14e6:
  14e6: 9595           asr r25           # accY = r25:r24 = signeddiv(acc_accel_y / 16)
  14e8: 9587           r24:C := C:r24 ; >> 1
  14ea: 95ea           r30 --
  14ec: f7e1           brne 0x14e6 <_loc_14e6>
  14ee: 3c2e           cmp r18, 0xce
  14f0: ef4f           r20 := 0xff
  14f2: 0734           cmp_carry r19, r20
  14f4: f43c           brge 0x1504 <_(accX >= -50)>
_(accX < -50):
  14f6: 01ac           r21:r20 := r25:r24
  14f8: 5e4d 4f5f      r21:r20 -= -0x13
  14fc: 3247 0551 f160 if(r21:r20 < 0x27):jmp 0x155a <_move2> # accX < -50 && accY < 20 => move 2
  1502: c00a           jmp 0x1518 <_((accX < -50 && accY >= 20) || (-50 <= accX < 51) || (accX >= 51 && accY < -19)>
_(accX >= -50):
  1504: 3323 0531 f03c if(r19:r18 <s 0x33):jmp 0x1518 <_((accX < -50 && accY >= 20) || (-50 <= accX < 51) || (accX >= 51 && accY < -19)>
_(accX >= 51):
  150a: 3184 0591 f47c if(r25:r24 >=s 0x14):jmp 0x152e <_((accX >=51 && accY >= 20) || (... && accY >= -50)>
_(accX >= 51 && accY < 20):
  1510: 3e8d           cmp r24, 0xed
  1512: ef4f           r20 := 0xff
  1514: 0794           cmp_carry r25, r20
  1516: f524           brge 0x1560 <_move1> # accX >= 51 && -19 <= accY < 20 => move 1
_((accX < -50 && accY >= 20) || (-50 <= accX < 51) || (accX >= 51 && accY < -19):
  1518: 3c8e           cmp r24, 0xce
  151a: ef4f           r20 := 0xff
  151c: 0794           cmp_carry r25, r20
  151e: f43c           brge 0x152e <_((accX >=51 && accY >= 20) || (... && accY >= -50)>
  1520: 01a9           r21:r20 := r19:r18
  1522: 5e4d 4f5f      r21:r20 -= -0x13
  1526: 3247 0551 f0e8 if(r21:r20 < 0x27):jmp 0x1566 <_move4> # ... && accY < -50 && accX < 20 => move 4
  152c: c009           jmp 0x1540 <_???1540>
_((accX >=51 && accY >= 20) || (... && accY >= -50):
  152e: 3383 0591 f034 if(r25:r24 <s 0x33):jmp 0x1540 <_???1540>
  1534: 01a9           r21:r20 := r19:r18
  1536: 5e4d 4f5f      r21:r20 -= -0x13
  153a: 3247 0551 f0b0 if(r21:r20 < 0x27):jmp 0x156c <_move3> # ... && accX < 20 => move 3
_???1540:
  1540: 5e2d 4f3f      r19:r18 -= -0x13
  1544: 3227 0531 f008 if(r19:r18 < 0x27):jmp 0x154c <_((1540) && accX < 20)>
  154a: c04c           jmp 0x15e4 <_return 0>
_((1540) && accX < 20):
  154c: 9643           r25:r24 += 0x13
  154e: 9787           r25:r24 -= 0x27
  1550: f008           if(r25:r24 < 0):jmp 0x1554 <_move0> # (1540) && accX < 20 && accY < -20 => move 0
  1552: c048           jmp 0x15e4 <_return 0>
_move0:
  1554: e080 e090      r25:r24 := 0
  1558: c00b           jmp 0x1570 <_loc_1570>
_move2:
  155a: e082 e090      r25:r24 := 2
  155e: c008           jmp 0x1570 <_loc_1570>
_move1:
  1560: e081 e090      r25:r24 := 1
  1564: c005           jmp 0x1570 <_loc_1570>
_move4:
  1566: e084 e090      r25:r24 := 4
  156a: c002           jmp 0x1570 <_loc_1570>
_move3:
  156c: e083 e090      r25:r24 := 3
_loc_1570:
  1570: 9120 0764      r18 := SRAM.laby_lastmove_L
  1574: 9130 0765      r19 := SRAM.laby_lastmove_H
  1578: 1728 0739 f199 if(r19:r18 == r25:r24):jmp 0x15e4 <_return 0>
  157e: 9120 0762      r18 := SRAM.laby_curpos_L
  1582: 9130 0763      r19 := SRAM.laby_curpos_H
  1586: 01a9           r21:r20 := r19:r18
  1588: 5f4f 4f5f      r21:r20 -= -1
  158c: 01fa           r31:r30 := r21:r20
  158e: 0fee 1fff      r31:r30 *= 2
  1592: 5fe9 4ff9      r31:r30 -= -0x607 (=accelero_laby)
  1596: 8160           r22 := *(r31:r30)
  1598: 8171           r23 := *(r31:r30 + 0x01)
  159a: 3067 0571 f439 if(r23:r22 != 7):jmp 0x15ae <_loc_15ae>
  15a0: 9210 0763      SRAM.laby_curpos_H := 0
  15a4: 9210 0762      SRAM.laby_curpos_L := 0
  15a8: e081 e090      r25:r24 := 1      # on end, return 1
  15ac: c01d           jmp 0x15e8 <_ret>
_loc_15ae:
  15ae: 0f22 1f33      r19:r18 *= 2
  15b2: 01f9           r31:r30 := r19:r18
  15b4: 5fe9 4ff9      r31:r30 -= -0x607 (=accelero_laby)
  15b8: 8120           r18 := *(r31:r30)
  15ba: 8131           r19 := *(r31:r30 + 0x01)
  15bc: 1782 0793 f449 if(r25:r24 != r19:r18):jmp 0x15d4 <_fail_reset_labystate>
_go to next pos:
  15c2: 9390 0765      SRAM.laby_lastmove_H := r25
  15c6: 9380 0764      SRAM.laby_lastmove_L := r24
  15ca: 9350 0763      SRAM.laby_curpos_H := r21
  15ce: 9340 0762      SRAM.laby_curpos_L := r20
  15d2: c008           jmp 0x15e4 <_return 0>
_fail_reset_labystate:
  15d4: 9210 0763      SRAM.laby_curpos_H := 0
  15d8: 9210 0762      SRAM.laby_curpos_L := 0
  15dc: 9390 0765      SRAM.laby_lastmove_H := r25
  15e0: 9380 0764      SRAM.laby_lastmove_L := r24
_return 0:
  15e4: e080 e090      r25:r24 := 0
_ret:
  15e8: 91df           pop r29
  15ea: 91cf           pop r28
  15ec: 911f           pop r17
  15ee: 910f           pop r16
  15f0: 90ff           pop r15
  15f2: 90ef           pop r14
  15f4: 9508           ret

read_gamemode_from_flash()->r24:
  15f6: 93cf           push r28
  15f8: 93df           push r29
  15fa: 921f           push r1
  15fc: b7cd           r28 := PORT.SPL
  15fe: b7de           r29 := PORT.SPH
  1600: 01ae           r21:r20 := r29:r28
  1602: 5f4f 4f5f      r21:r20 -= -1
  1606: e160           r22 := 0x10
  1608: e58a e096      r25:r24 := 0x65a (=Chall)
  160c: 940e 0849      call 0x1092 <Chall::read_1b_from_encextflash(r22=pageaddr, r21:r20=buffer)>
  1610: 8189           r24 := *(r29:r28 + 0x01)
  1612: 900f           pop r0
  1614: 91df           pop r29
  1616: 91cf           pop r28
  1618: 9508           ret

write_gamemode_to_flash(r24):
  161a: 2f48           r20 := r24
  161c: e160           r22 := 0x10
  161e: e58a e096      r25:r24 := 0x65a (=Chall)
  1622: 940e 099f      call 0x133e <Chall::write_int8_to_encextflash(r22=pageaddr, r20)>
  1626: e58a e096      r25:r24 := 0x65a (=Chall)
  162a: 940e 09c5      call 0x138a <Chall::write_all_extflashmem(data@stack, size is 0xf8)>
  162e: 9508           ret

format_hexbyte(r24=byte, r23:r22=char[3] buffer):
  1630: 93cf           push r28
  1632: 93df           push r29
  1634: b7cd           r28 := PORT.SPL
  1636: b7de           r29 := PORT.SPH
  1638: 9761           r29:r28 -= 0x11
  163a: b60f           r0 := PORT.SREG
  163c: 94f8           Clear(I flag)
  163e: bfde           PORT.SPH := r29
  1640: be0f           PORT.SREG := r0
  1642: bfcd           PORT.SPL := r28
  1644: e191           r25 := 0x11       # Copy "0123456789ABCDEF" into [SP+1+...]
  1646: eee2 e0f4      r31:r30 := 0x4e2 (="0123456789ABCDEF")
  164a: 01de           r27:r26 := r29:r28
  164c: 9611           r27:r26 += 1
_loc_164e:
  164e: 9001           r0 := *(r31:r30 ++)
  1650: 920d           *(r27:r26 ++) := r0
  1652: 959a           r25 --
  1654: f7e1           brne 0x164e <_loc_164e>
  1656: 2f98           r25 := r24
  1658: 9592           swap_nibbles r25
  165a: 709f           r25 &= 15
  165c: e0e1 e0f0      r31:r30 := 1
  1660: 0fec 1ffd      r31:r30 += r29:r28
  1664: 0fe9 1df1      r31:r30 += 0:r25
  1668: 8190           r25 := *(r31:r30)
  166a: 01fb           r31:r30 := r23:r22 # (r23:r22)[0] = hexencode(high nibble of r24)
  166c: 8390           *(r31:r30) := r25
  166e: 708f           r24 &= 15
  1670: e0e1 e0f0      r31:r30 := 1
  1674: 0fec 1ffd      r31:r30 += r29:r28
  1678: 0fe8 1df1      r31:r30 += 0:r24
  167c: 8180           r24 := *(r31:r30) # (r23:r22)[1] = hexencode(low nibble of r24)
  167e: 01fb           r31:r30 := r23:r22
  1680: 8381           *(r31:r30 + 0x01) := r24
  1682: 8212           *(r31:r30 + 0x02) := 0
  1684: 9661           r29:r28 += 0x11
  1686: b60f           r0 := PORT.SREG
  1688: 94f8           Clear(I flag)
  168a: bfde           PORT.SPH := r29
  168c: be0f           PORT.SREG := r0
  168e: bfcd           PORT.SPL := r28
  1690: 91df           pop r29
  1692: 91cf           pop r28
  1694: 9508           ret

dump_memory()...:
  1696: 92ef           push r14
  1698: 92ff           push r15
  169a: 930f           push r16
  169c: 931f           push r17
  169e: 93cf           push r28
  16a0: 93df           push r29
  16a2: b7cd           r28 := PORT.SPL
  16a4: b7de           r29 := PORT.SPH
  16a6: 50c3 40d1      r29:r28 -= 0x103
  16aa: b60f           r0 := PORT.SREG
  16ac: 94f8           Clear(I flag)
  16ae: bfde           PORT.SPH := r29
  16b0: be0f           PORT.SREG := r0
  16b2: bfcd           PORT.SPL := r28
  16b4: e265 e075      r23:r22 := 0x525 (="")
  16b8: e387 e098      r25:r24 := 0x837 (=Serial)
  16bc: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  16c0: ef63 e074      r23:r22 := 0x4f3 (="Memory> Dumping ...")
  16c4: e387 e098      r25:r24 := 0x837 (=Serial)
  16c8: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  16cc: e028 e030      r19:r18 := 8
  16d0: 01ae           r21:r20 := r29:r28
  16d2: 5f4f 4f5f      r21:r20 -= -1
  16d6: e060           r22 := 0
  16d8: e288 e098      r25:r24 := 0x828 (=Badge)
  16dc: 940e 135f      call 0x26be <int Ndh15Badge::readPage(uint8_t paddr=r22, byte *pdata=r21:r20, int length=r19:r18)>
  16e0: e028 e030      r19:r18 := 8
  16e4: 01ae           r21:r20 := r29:r28
  16e6: 5f47 4f5f      r21:r20 -= -9
  16ea: e060           r22 := 0
  16ec: e288 e098      r25:r24 := 0x828 (=Badge)
  16f0: 940e 135f      call 0x26be <int Ndh15Badge::readPage(uint8_t paddr=r22, byte *pdata=r21:r20, int length=r19:r18)>
  16f4: ef20 e030      r19:r18 := 0xf0 (=UEIENX)
  16f8: 01ae           r21:r20 := r29:r28
  16fa: 5e4f 4f5f      r21:r20 -= -0x11
  16fe: e160           r22 := 0x10
  1700: e58a e096      r25:r24 := 0x65a (=Chall)
  1704: 940e 073b      call 0x0e76 <Chall::read_from_encextflash(r22=pageaddr, r21:r20=buffer, r19:r18=size)>
  1708: e000 e010      r17:r16 := 0
_loc_170c:
  170c: 01be           r23:r22 := r29:r28
  170e: 5f6f 4f7e      r23:r22 -= -0x101
  1712: 2f80           r24 := r16
  1714: 940e 0b18      call 0x1630 <format_hexbyte(r24=byte, r23:r22=char[3] buffer)>
  1718: 01be           r23:r22 := r29:r28
  171a: 5f6f 4f7e      r23:r22 -= -0x101
  171e: e387 e098      r25:r24 := 0x837 (=Serial)
  1722: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  1726: e36a e074      r23:r22 := 0x43a (=": ")
  172a: e387 e098      r25:r24 := 0x837 (=Serial)
  172e: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  1732: 2ce1 2cf1      r15:r14 := 0
_loc_1736:
  1736: 01f7           r31:r30 := r15:r14
  1738: 0fe0 1ff1      r31:r30 += r17:r16
  173c: e081 e090      r25:r24 := 1
  1740: 0f8c 1f9d      r25:r24 += r29:r28
  1744: 0fe8 1ff9      r31:r30 += r25:r24
  1748: 01be           r23:r22 := r29:r28
  174a: 5f6f 4f7e      r23:r22 -= -0x101
  174e: 8180           r24 := *(r31:r30)
  1750: 940e 0b18      call 0x1630 <format_hexbyte(r24=byte, r23:r22=char[3] buffer)>
  1754: 01be           r23:r22 := r29:r28
  1756: 5f6f 4f7e      r23:r22 -= -0x101
  175a: e387 e098      r25:r24 := 0x837 (=Serial)
  175e: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  1762: e36b e074      r23:r22 := 0x43b
  1766: e387 e098      r25:r24 := 0x837 (=Serial)
  176a: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  176e: ef9f           r25 := 0xff
  1770: 1ae9           r14 -= r25
  1772: 0af9           r15 -= r25+C
  1774: e180           r24 := 0x10
  1776: 16e8 04f1 f6e9 if(r15:r14 != 0:r24):jmp 0x1736 <_loc_1736>
  177c: e265 e075      r23:r22 := 0x525 (="")
  1780: e387 e098      r25:r24 := 0x837 (=Serial)
  1784: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  1788: 5f00 4f1f      r17:r16 -= -0x10
  178c: 1501           cmp r16, 0
  178e: e091           r25 := 1
  1790: 0719           cmp_carry r17, r25
  1792: f009           breq 0x1796 <_loc_1796>
  1794: cfbb           jmp 0x170c <_loc_170c>
_loc_1796:
  1796: e265 e075      r23:r22 := 0x525 (="")
  179a: e387 e098      r25:r24 := 0x837 (=Serial)
  179e: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  17a2: 5fcd 4fde      r29:r28 -= -0x103
  17a6: b60f           r0 := PORT.SREG
  17a8: 94f8           Clear(I flag)
  17aa: bfde           PORT.SPH := r29
  17ac: be0f           PORT.SREG := r0
  17ae: bfcd           PORT.SPL := r28
  17b0: 91df           pop r29
  17b2: 91cf           pop r28
  17b4: 911f           pop r17
  17b6: 910f           pop r16
  17b8: 90ff           pop r15
  17ba: 90ef           pop r14
  17bc: 9508           ret

dump_mem_if_mode2():
  17be: 9180 0766      r24 := SRAM.state_L
  17c2: 9190 0767      r25 := SRAM.state_H
  17c6: 9702           r25:r24 -= 2
  17c8: f014           brlt 0x17ce <_loc_17ce>
  17ca: 940c 0b4b      jmp 0x1696 <dump_memory()...>
_loc_17ce:
  17ce: 9508           ret

print_menu_choosegame():
  17d0: e067 e075      r23:r22 := 0x507 (="> Shall we play a game ?")
  17d4: e387 e098      r25:r24 := 0x837 (=Serial)
  17d8: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  17dc: e266 e075      r23:r22 := 0x526 (=" 1 - Quizz")
  17e0: e387 e098      r25:r24 := 0x837 (=Serial)
  17e4: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  17e8: e361 e075      r23:r22 := 0x531 (=" 2 - Fortune")
  17ec: e387 e098      r25:r24 := 0x837 (=Serial)
  17f0: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  17f4: e36e e075      r23:r22 := 0x53e (=" 3 - Wargame")
  17f8: e387 e098      r25:r24 := 0x837 (=Serial)
  17fc: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  1800: 9180 0766      r24 := SRAM.state_L
  1804: 9190 0767      r25 := SRAM.state_H
  1808: 1618 0619 f434 if(0 >=s r25:r24):jmp 0x181a <_loc_181a>
  180e: e46b e075      r23:r22 := 0x54b (=" h - Badge infos")
  1812: e387 e098      r25:r24 := 0x837 (=Serial)
  1816: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
_loc_181a:
  181a: 9180 0766      r24 := SRAM.state_L
  181e: 9190 0767      r25 := SRAM.state_H
  1822: 9702           r25:r24 -= 2
  1824: f034           brlt 0x1832 <_loc_1832>
  1826: e56e e075      r23:r22 := 0x55e (=" m - Dump memory")
  182a: e387 e098      r25:r24 := 0x837 (=Serial)
  182e: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
_loc_1832:
  1832: e761 e075      r23:r22 := 0x571 (="Choice: ")
  1836: e387 e098      r25:r24 := 0x837 (=Serial)
  183a: 940c 1678      jmp 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>

?copy_serial_to_flash?():
  183e: 92cf           push r12
  1840: 92df           push r13
  1842: 92ef           push r14
  1844: 92ff           push r15
  1846: 930f           push r16
  1848: 931f           push r17
  184a: 93cf           push r28
  184c: 93df           push r29
  184e: b7cd           r28 := PORT.SPL
  1850: b7de           r29 := PORT.SPH
  1852: 9729           r29:r28 -= 9
  1854: b60f           r0 := PORT.SREG
  1856: 94f8           Clear(I flag)
  1858: bfde           PORT.SPH := r29
  185a: be0f           PORT.SREG := r0
  185c: bfcd           PORT.SPL := r28
  185e: 01ce           r25:r24 := r29:r28
  1860: 9601           r25:r24 += 1
  1862: 017c           r15:r14 := r25:r24
  1864: 018c           r17:r16 := r25:r24
_loc_1866:
  1866: 0168           r13:r12 := r17:r16
  1868: 18ce 08df      r13:r12 -= r15:r14
_loc_186c:
  186c: e0f9           r31 := 9
  186e: 16cf 04d1 f079 if(r13:r12 == 0:r31):jmp 0x1892 <_loc_1892>
  1874: e387 e098      r25:r24 := 0x837 (=Serial)
  1878: 940e 176e      call 0x2edc <int Serial?::available()>
  187c: 1618 0619 f7ac if(0 >=s r25:r24):jmp 0x186c <_loc_186c>
  1882: e387 e098      r25:r24 := 0x837 (=Serial)
  1886: 940e 1792      call 0x2f24 <int Serial?::read()>
  188a: 01f8           r31:r30 := r17:r16
  188c: 9381           *(r31:r30 ++) := r24
  188e: 018f           r17:r16 := r31:r30
  1890: cfea           jmp 0x1866 <_loc_1866>
_loc_1892:
  1892: e028 e030      r19:r18 := 8
  1896: 01ae           r21:r20 := r29:r28
  1898: 5f4e 4f5f      r21:r20 -= -2
  189c: 8169           r22 := *(r29:r28 + 0x01)
  189e: e288 e098      r25:r24 := 0x828 (=Badge)
  18a2: 940e 1323      call 0x2646 <int Ndh15Badge::writePage(uint8_t paddr, byte *pdata, int length)>
  18a6: e06f           r22 := 15
  18a8: e387 e098      r25:r24 := 0x837 (=Serial)
  18ac: 940e 17de      call 0x2fbc <size_t Serial_::write(uint8_t c)>
  18b0: 9629           r29:r28 += 9
  18b2: b60f           r0 := PORT.SREG
  18b4: 94f8           Clear(I flag)
  18b6: bfde           PORT.SPH := r29
  18b8: be0f           PORT.SREG := r0
  18ba: bfcd           PORT.SPL := r28
  18bc: 91df           pop r29
  18be: 91cf           pop r28
  18c0: 911f           pop r17
  18c2: 910f           pop r16
  18c4: 90ff           pop r15
  18c6: 90ef           pop r14
  18c8: 90df           pop r13
  18ca: 90cf           pop r12
  18cc: 9508           ret

?copy_flash_to_serial?():
  18ce: 93cf           push r28
  18d0: 93df           push r29
  18d2: b7cd           r28 := PORT.SPL
  18d4: b7de           r29 := PORT.SPH
  18d6: 9729           r29:r28 -= 9
  18d8: b60f           r0 := PORT.SREG
  18da: 94f8           Clear(I flag)
  18dc: bfde           PORT.SPH := r29
  18de: be0f           PORT.SREG := r0
  18e0: bfcd           PORT.SPL := r28
_loc_18e2:
  18e2: e387 e098      r25:r24 := 0x837 (=Serial)
  18e6: 940e 176e      call 0x2edc <int Serial?::available()>
  18ea: 1618 0619 f7cc if(0 >=s r25:r24):jmp 0x18e2 <_loc_18e2>
  18f0: e387 e098      r25:r24 := 0x837 (=Serial)
  18f4: 940e 1792      call 0x2f24 <int Serial?::read()>
  18f8: 8389           *(r29:r28 + 0x01) := r24
  18fa: e028 e030      r19:r18 := 8
  18fe: 01ae           r21:r20 := r29:r28
  1900: 5f4e 4f5f      r21:r20 -= -2
  1904: 2f68           r22 := r24
  1906: e288 e098      r25:r24 := 0x828 (=Badge)
  190a: 940e 135f      call 0x26be <int Ndh15Badge::readPage(uint8_t paddr=r22, byte *pdata=r21:r20, int length=r19:r18)>
  190e: e06e           r22 := 14
  1910: e387 e098      r25:r24 := 0x837 (=Serial)
  1914: 940e 17de      call 0x2fbc <size_t Serial_::write(uint8_t c)>
  1918: e048 e050      r21:r20 := 8
  191c: 01be           r23:r22 := r29:r28
  191e: 5f6e 4f7f      r23:r22 -= -2
  1922: e387 e098      r25:r24 := 0x837 (=Serial)
  1926: 940e 163b      call 0x2c76 <size_t Print::write(const uint8_t *buffer=r23:r22, size_t size)>
  192a: 9629           r29:r28 += 9
  192c: b60f           r0 := PORT.SREG
  192e: 94f8           Clear(I flag)
  1930: bfde           PORT.SPH := r29
  1932: be0f           PORT.SREG := r0
  1934: bfcd           PORT.SPL := r28
  1936: 91df           pop r29
  1938: 91cf           pop r28
  193a: 9508           ret

setup():
  193c: 930f           push r16
  193e: 931f           push r17
  1940: e860 e275      r23:r22 := 0x2580
  1944: e387 e098      r25:r24 := 0x837 (=Serial)
  1948: 940e 1865      call 0x30ca <Serial.nullsub>
  194c: e288 e098      r25:r24 := 0x828 (=Badge)
  1950: 940e 12d0      call 0x25a0 <void Ndh15Badge::begin(void)>
  1954: e58a e096      r25:r24 := 0x65a (=Chall)
  1958: 940e 06a5      call 0x0d4a <Chall::check_extflashmem()>
  195c: 9701           r25:r24 -= 1
  195e: f0d9           breq 0x1996 <_mem_is_ok>
  1960: e76c e075      r23:r22 := 0x57c (="XXX MEMORY CORRUPTION DETECTED XXX")
  1964: e387 e098      r25:r24 := 0x837 (=Serial)
  1968: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
_loc_196c:
  196c: e387 e098      r25:r24 := 0x837 (=Serial)
  1970: 940e 176e      call 0x2edc <int Serial?::available()>
  1974: 1618 0619 f7cc if(0 >=s r25:r24):jmp 0x196c <_loc_196c>
  197a: e387 e098      r25:r24 := 0x837 (=Serial)
  197e: 940e 1792      call 0x2f24 <int Serial?::read()>
  1982: 308f f419      if(r24 != 15):jmp 0x198c <_loc_198c>
  1986: 940e 0c1f      call 0x183e <?copy_serial_to_flash?()>
  198a: cff0           jmp 0x196c <_loc_196c>
_loc_198c:
  198c: 308e f771      if(r24 != 14):jmp 0x196c <_loc_196c>
  1990: 940e 0c67      call 0x18ce <?copy_flash_to_serial?()>
  1994: cfeb           jmp 0x196c <_loc_196c>
_mem_is_ok:
  1996: 940e 0afb      call 0x15f6 <read_gamemode_from_flash()->r24>
  199a: e090           r25 := 0
  199c: 9390 0767      SRAM.state_H := r25
  19a0: 9380 0766      SRAM.state_L := r24
  19a4: ec08 e010      r17:r16 := 0xc8 (=UCSR1A)
  19a8: e020 e030      r19:r18 := 0
  19ac: eb48 e051      r21:r20 := 0x1b8
  19b0: e060 e070      r23:r22 := 0
  19b4: e288 e098      r25:r24 := 0x828 (=Badge)
  19b8: 940e 11a4      call 0x2348 <void Ndh15Badge::play(long freq, long duration)>
  19bc: ec08 e010      r17:r16 := 0xc8 (=UCSR1A)
  19c0: e020 e030      r19:r18 := 0
  19c4: e944 e052      r21:r20 := 0x294
  19c8: e060 e070      r23:r22 := 0
  19cc: e288 e098      r25:r24 := 0x828 (=Badge)
  19d0: 940e 11a4      call 0x2348 <void Ndh15Badge::play(long freq, long duration)>
  19d4: e20c e011      r17:r16 := 0x12c
  19d8: e020 e030      r19:r18 := 0
  19dc: ec4a e053      r21:r20 := 0x3ca
  19e0: e060 e070      r23:r22 := 0
  19e4: e288 e098      r25:r24 := 0x828 (=Badge)
  19e8: 940e 11a4      call 0x2348 <void Ndh15Badge::play(long freq, long duration)>
  19ec: e96f e075      r23:r22 := 0x59f (="<< Ndh2015 - National LOL Agency >>")
  19f0: e387 e098      r25:r24 := 0x837 (=Serial)
  19f4: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  19f8: 911f           pop r17
  19fa: 910f           pop r16
  19fc: 940c 0be8      jmp 0x17d0 <print_menu_choosegame()>

loop():
  1a00: 93cf           push r28
  1a02: 93df           push r29
  1a04: e387 e098      r25:r24 := 0x837 (=Serial)
  1a08: 940e 176e      call 0x2edc <int Serial?::available()>
  1a0c: 1618 0619 f00c if(0 <s r25:r24):jmp 0x1a14 <_input_available>
  1a12: c083           jmp 0x1b1a <_loc_1b1a>
_input_available:
  1a14: e387 e098      r25:r24 := 0x837 (=Serial)
  1a18: 940e 1792      call 0x2f24 <int Serial?::read()>
  1a1c: 01ec           r29:r28 := r25:r24
  1a1e: 308f f419      if(r24 != 15):jmp 0x1a28 <_loc_1a28>
  1a22: 940e 0c1f      call 0x183e <?copy_serial_to_flash?()>
  1a26: c079           jmp 0x1b1a <_loc_1b1a>
_loc_1a28:
  1a28: 308e f419      if(r24 != 14):jmp 0x1a32 <_process_inchar_r28>
  1a2c: 940e 0c67      call 0x18ce <?copy_flash_to_serial?()>
  1a30: c074           jmp 0x1b1a <_loc_1b1a>
_process_inchar_r28:
  1a32: 2f6c           r22 := r28
  1a34: e387 e098      r25:r24 := 0x837 (=Serial)
  1a38: 940e 167a      call 0x2cf4 <size_t Print::print(char c=r22)>
  1a3c: 01ce           r25:r24 := r29:r28
  1a3e: 2799           r25 := 0
  1a40: 3383 0591 f0a9 if(r25:r24 == 0x33):jmp 0x1a70 <_menu-3_wargame>
  1a46: f44c           brge 0x1a5a <_(r28 >= '3')>
  1a48: 3381 0591 f071 if(r25:r24 == 0x31):jmp 0x1a6a <_menu-1_quizzgame>
  1a4e: 97c2           r25:r24 -= 0x32
  1a50: f009           breq 0x1a54 <_menu-2_fortunegame>
  1a52: c05b           jmp 0x1b0a <_println_and_print_menu>
_menu-2_fortunegame:
  1a54: 940e 04df      call 0x09be <fortune_game()>
  1a58: c05e           jmp 0x1b16 <_print_menu>
_(r28 >= '3'):
  1a5a: 3688 0591 f059 if(r25:r24 == 0x68):jmp 0x1a76 <_menu-h_infos>
  1a60: 368d 0591 f409 if(r25:r24 != 0x6d):jmp 0x1a68 <_loc_1a68>
  1a66: c048           jmp 0x1af8 <_menu-m_dumpmem>
_loc_1a68:
  1a68: c050           jmp 0x1b0a <_println_and_print_menu>
_menu-1_quizzgame:
  1a6a: 940e 03b0      call 0x0760 <quizz_game()>
  1a6e: c053           jmp 0x1b16 <_print_menu>
_menu-3_wargame:
  1a70: 940e 01dd      call 0x03ba <world_war_simulation>
  1a74: c050           jmp 0x1b16 <_print_menu>
_menu-h_infos:
  1a76: ec63 e075      r23:r22 := 0x5c3
  1a7a: e387 e098      r25:r24 := 0x837 (=Serial)
  1a7e: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  1a82: ed64 e075      r23:r22 := 0x5d4 (="------------")
  1a86: e387 e098      r25:r24 := 0x837 (=Serial)
  1a8a: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  1a8e: e265 e075      r23:r22 := 0x525 (="")
  1a92: e387 e098      r25:r24 := 0x837 (=Serial)
  1a96: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  1a9a: ee61 e075      r23:r22 := 0x5e1 (="Current mode: ")
  1a9e: e387 e098      r25:r24 := 0x837 (=Serial)
  1aa2: 940e 1678      call 0x2cf0 <size_t Print::print(const char str[]=r23:r22)>
  1aa6: 940e 0afb      call 0x15f6 <read_gamemode_from_flash()->r24>
  1aaa: e090           r25 := 0
  1aac: 9390 0767      SRAM.state_H := r25
  1ab0: 9380 0766      SRAM.state_L := r24
  1ab4: 0f88 1f99      r25:r24 *= 2
  1ab8: 01fc           r31:r30 := r25:r24
  1aba: 50e0 4fff      r31:r30 -= -0x100 (=gamemode_addresses)
  1abe: 8160           r22 := *(r31:r30)
  1ac0: 8171           r23 := *(r31:r30 + 0x01)
  1ac2: e387 e098      r25:r24 := 0x837 (=Serial)
  1ac6: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
  1aca: 9180 0766      r24 := SRAM.state_L
  1ace: 9190 0767      r25 := SRAM.state_H
  1ad2: 2b89           r24 |= r25
  1ad4: f441           brne 0x1ae6 <_loc_1ae6>
  1ad6: e081 e090      r25:r24 := 1
  1ada: 9390 0767      SRAM.state_H := r25
  1ade: 9380 0766      SRAM.state_L := r24
  1ae2: 940e 0b0d      call 0x161a <write_gamemode_to_flash(r24)>
_loc_1ae6:
  1ae6: 9180 0766      r24 := SRAM.state_L
  1aea: 9190 0767      r25 := SRAM.state_H
  1aee: 9703           r25:r24 -= 3
  1af0: f491           brne 0x1b16 <_print_menu>
  1af2: 940e 02d2      call 0x05a4 <show_victory_if_complete_and_mode3()>
  1af6: c00f           jmp 0x1b16 <_print_menu>
_menu-m_dumpmem:
  1af8: 9180 0766      r24 := SRAM.state_L
  1afc: 9190 0767      r25 := SRAM.state_H
  1b00: 9702           r25:r24 -= 2
  1b02: f05c           brlt 0x1b1a <_loc_1b1a>
  1b04: 940e 0bdf      call 0x17be <dump_mem_if_mode2()>
  1b08: c006           jmp 0x1b16 <_print_menu>
_println_and_print_menu:
  1b0a: e265 e075      r23:r22 := 0x525 (="")
  1b0e: e387 e098      r25:r24 := 0x837 (=Serial)
  1b12: 940e 1695      call 0x2d2a <size_t Print::println(const char c[]=r23:r22)>
_print_menu:
  1b16: 940e 0be8      call 0x17d0 <print_menu_choosegame()>
_loc_1b1a:
  1b1a: 940e 0a38      call 0x1470 <accelero_labygame()>
  1b1e: 2b89           r24 |= r25
  1b20: f131           breq 0x1b6e <_read_tooth_button>
  1b22: e0c3 e0d0      r29:r28 := 3
_won_labygame_blink_3times_R100:
  1b26: e020           r18 := 0
  1b28: e040           r20 := 0
  1b2a: e860           r22 := 0x80
  1b2c: e288 e098      r25:r24 := 0x828 (=Badge)
  1b30: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1b34: e664 e070      r23:r22 := 0x64 (=PRR0)
  1b38: e080 e090      r25:r24 := 0
  1b3c: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1b40: e020           r18 := 0
  1b42: e040           r20 := 0
  1b44: e060           r22 := 0
  1b46: e288 e098      r25:r24 := 0x828 (=Badge)
  1b4a: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1b4e: e664 e070      r23:r22 := 0x64 (=PRR0)
  1b52: e080 e090      r25:r24 := 0
  1b56: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1b5a: 9721           r29:r28 -= 1
  1b5c: f721           brne 0x1b26 <_won_labygame_blink_3times_R100>
  1b5e: e082 e090      r25:r24 := 2
  1b62: 9390 0767      SRAM.state_H := r25
  1b66: 9380 0766      SRAM.state_L := r24
  1b6a: 940e 0b0d      call 0x161a <write_gamemode_to_flash(r24)>
_read_tooth_button:
  1b6e: e060 e070      r23:r22 := 0
  1b72: e288 e098      r25:r24 := 0x828 (=Badge)
  1b76: 940e 126a      call 0x24d4 <int Ndh15Badge::button(int pin)>
  1b7a: 2b89           r24 |= r25
  1b7c: f409           brne 0x1b80 <_loc_1b80>
  1b7e: c0fc           jmp 0x1d78 <_ret>
_loc_1b80:
  1b80: 940e 0afb      call 0x15f6 <read_gamemode_from_flash()->r24>
  1b84: 2f28 e030      r19:r18 := 0:r24
  1b88: 9330 0767      SRAM.state_H := r19
  1b8c: 9320 0766      SRAM.state_L := r18
  1b90: 3081 f409      if(r24 != 1):jmp 0x1b96 <_loc_1b96>
  1b94: c088           jmp 0x1ca6 <_blink_mode1_G500_R500_G500_-500>
_loc_1b96:
  1b96: f408           brcc 0x1b9a <_loc_1b9a>
  1b98: c053           jmp 0x1c40 <_blink_mode0_G500_-100_G500_-100_G500_-500>
_loc_1b9a:
  1b9a: 3082 f409      if(r24 != 2):jmp 0x1ba0 <_loc_1ba0>
  1b9e: c0b6           jmp 0x1d0c <_blink_mode2_R400_G400_B400_-400>
_loc_1ba0:
  1ba0: 3083 f009      if(r24 == 3):jmp 0x1ba6 <_blink_mode3_B500_-100_B500_-100_B500_-100>
  1ba4: c0e9           jmp 0x1d78 <_ret>
_blink_mode3_B500_-100_B500_-100_B500_-100:
  1ba6: e820           r18 := 0x80
  1ba8: e040           r20 := 0
  1baa: e060           r22 := 0
  1bac: e288 e098      r25:r24 := 0x828 (=Badge)
  1bb0: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1bb4: ef64 e071      r23:r22 := 0x1f4
  1bb8: e080 e090      r25:r24 := 0
  1bbc: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1bc0: e020           r18 := 0
  1bc2: e040           r20 := 0
  1bc4: e060           r22 := 0
  1bc6: e288 e098      r25:r24 := 0x828 (=Badge)
  1bca: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1bce: e664 e070      r23:r22 := 0x64 (=PRR0)
  1bd2: e080 e090      r25:r24 := 0
  1bd6: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1bda: e820           r18 := 0x80
  1bdc: e040           r20 := 0
  1bde: e060           r22 := 0
  1be0: e288 e098      r25:r24 := 0x828 (=Badge)
  1be4: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1be8: ef64 e071      r23:r22 := 0x1f4
  1bec: e080 e090      r25:r24 := 0
  1bf0: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1bf4: e020           r18 := 0
  1bf6: e040           r20 := 0
  1bf8: e060           r22 := 0
  1bfa: e288 e098      r25:r24 := 0x828 (=Badge)
  1bfe: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1c02: e664 e070      r23:r22 := 0x64 (=PRR0)
  1c06: e080 e090      r25:r24 := 0
  1c0a: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1c0e: e820           r18 := 0x80
  1c10: e040           r20 := 0
  1c12: e060           r22 := 0
  1c14: e288 e098      r25:r24 := 0x828 (=Badge)
  1c18: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1c1c: ef64 e071      r23:r22 := 0x1f4
  1c20: e080 e090      r25:r24 := 0
  1c24: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1c28: e020           r18 := 0
  1c2a: e040           r20 := 0
  1c2c: e060           r22 := 0
  1c2e: e288 e098      r25:r24 := 0x828 (=Badge)
  1c32: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1c36: e664 e070      r23:r22 := 0x64 (=PRR0)
  1c3a: e080 e090      r25:r24 := 0
  1c3e: c098           jmp 0x1d70 <_ret_delay(r25:r24:r23:r22)>
_blink_mode0_G500_-100_G500_-100_G500_-500:
  1c40: e020           r18 := 0
  1c42: e840           r20 := 0x80
  1c44: e060           r22 := 0
  1c46: e288 e098      r25:r24 := 0x828 (=Badge)
  1c4a: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1c4e: ef64 e071      r23:r22 := 0x1f4
  1c52: e080 e090      r25:r24 := 0
  1c56: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1c5a: e020           r18 := 0
  1c5c: e040           r20 := 0
  1c5e: e060           r22 := 0
  1c60: e288 e098      r25:r24 := 0x828 (=Badge)
  1c64: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1c68: e664 e070      r23:r22 := 0x64 (=PRR0)
  1c6c: e080 e090      r25:r24 := 0
  1c70: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1c74: e020           r18 := 0
  1c76: e840           r20 := 0x80
  1c78: e060           r22 := 0
  1c7a: e288 e098      r25:r24 := 0x828 (=Badge)
  1c7e: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1c82: ef64 e071      r23:r22 := 0x1f4
  1c86: e080 e090      r25:r24 := 0
  1c8a: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1c8e: e020           r18 := 0
  1c90: e040           r20 := 0
  1c92: e060           r22 := 0
  1c94: e288 e098      r25:r24 := 0x828 (=Badge)
  1c98: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1c9c: e664 e070      r23:r22 := 0x64 (=PRR0)
  1ca0: e080 e090      r25:r24 := 0
  1ca4: c018           jmp 0x1cd6 <_delay(...)_blink_G500_-500>
_blink_mode1_G500_R500_G500_-500:
  1ca6: e020           r18 := 0
  1ca8: e840           r20 := 0x80
  1caa: e060           r22 := 0
  1cac: e288 e098      r25:r24 := 0x828 (=Badge)
  1cb0: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1cb4: ef64 e071      r23:r22 := 0x1f4
  1cb8: e080 e090      r25:r24 := 0
  1cbc: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1cc0: e020           r18 := 0
  1cc2: e040           r20 := 0
  1cc4: e860           r22 := 0x80
  1cc6: e288 e098      r25:r24 := 0x828 (=Badge)
  1cca: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1cce: ef64 e071      r23:r22 := 0x1f4
  1cd2: e080 e090      r25:r24 := 0
_delay(...)_blink_G500_-500:
  1cd6: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1cda: e020           r18 := 0
  1cdc: e840           r20 := 0x80
  1cde: e060           r22 := 0
  1ce0: e288 e098      r25:r24 := 0x828 (=Badge)
  1ce4: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1ce8: ef64 e071      r23:r22 := 0x1f4
  1cec: e080 e090      r25:r24 := 0
  1cf0: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1cf4: e020           r18 := 0
  1cf6: e040           r20 := 0
  1cf8: e060           r22 := 0
  1cfa: e288 e098      r25:r24 := 0x828 (=Badge)
  1cfe: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1d02: ef64 e071      r23:r22 := 0x1f4
  1d06: e080 e090      r25:r24 := 0
  1d0a: c032           jmp 0x1d70 <_ret_delay(r25:r24:r23:r22)>
_blink_mode2_R400_G400_B400_-400:
  1d0c: e020           r18 := 0
  1d0e: e040           r20 := 0
  1d10: e860           r22 := 0x80
  1d12: e288 e098      r25:r24 := 0x828 (=Badge)
  1d16: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1d1a: e960 e071      r23:r22 := 0x190
  1d1e: e080 e090      r25:r24 := 0
  1d22: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1d26: e020           r18 := 0
  1d28: e840           r20 := 0x80
  1d2a: e060           r22 := 0
  1d2c: e288 e098      r25:r24 := 0x828 (=Badge)
  1d30: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1d34: e960 e071      r23:r22 := 0x190
  1d38: e080 e090      r25:r24 := 0
  1d3c: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1d40: e820           r18 := 0x80
  1d42: e040           r20 := 0
  1d44: e060           r22 := 0
  1d46: e288 e098      r25:r24 := 0x828 (=Badge)
  1d4a: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1d4e: e960 e071      r23:r22 := 0x190
  1d52: e080 e090      r25:r24 := 0
  1d56: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  1d5a: e020           r18 := 0
  1d5c: e040           r20 := 0
  1d5e: e060           r22 := 0
  1d60: e288 e098      r25:r24 := 0x828 (=Badge)
  1d64: 940e 1281      call 0x2502 <void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18)>
  1d68: e960 e071      r23:r22 := 0x190
  1d6c: e080 e090      r25:r24 := 0
_ret_delay(r25:r24:r23:r22):
  1d70: 91df           pop r29
  1d72: 91cf           pop r28
  1d74: 940c 1510      jmp 0x2a20 <void delay(unsigned long ms)>
_ret:
  1d78: 91df           pop r29
  1d7a: 91cf           pop r28
  1d7c: 9508           ret

int TwoWire::available(void):
  1d7e: 9180 0798      r24 := SRAM.TwoWire::rxBufferLength
  1d82: e090           r25 := 0
  1d84: 9120 0799      r18 := SRAM.TwoWire::rxBufferIndex
  1d88: 1b82 0991      r25:r24 -= 0:r18
  1d8c: 9508           ret

int TwoWire::read(void):
  1d8e: 9190 0799      r25 := SRAM.TwoWire::rxBufferIndex
  1d92: 9180 0798      r24 := SRAM.TwoWire::rxBufferLength
  1d96: 1798 f450      if(r25 >= r24):jmp 0x1dae <_loc_1dae>
  1d9a: 2fe9 e0f0      r31:r30 := 0:r25
  1d9e: 56e6 4ff8      r31:r30 -= -0x79a (=TwoWire::rxBuffer[0])
  1da2: 8120           r18 := *(r31:r30)
  1da4: e030           r19 := 0
  1da6: 5f9f           r25 -= -1
  1da8: 9390 0799      SRAM.TwoWire::rxBufferIndex := r25
  1dac: c002           jmp 0x1db2 <_loc_1db2>
_loc_1dae:
  1dae: ef2f ef3f      r19:r18 := 0xffff
_loc_1db2:
  1db2: 01c9           r25:r24 := r19:r18
  1db4: 9508           ret

int TwoWire::peek(void):
  1db6: 91e0 0799      r30 := SRAM.TwoWire::rxBufferIndex
  1dba: 9180 0798      r24 := SRAM.TwoWire::rxBufferLength
  1dbe: 17e8 f430      if(r30 >= r24):jmp 0x1dce <_loc_1dce>
  1dc2: e0f0           r31 := 0
  1dc4: 56e6 4ff8      r31:r30 -= -0x79a (=TwoWire::rxBuffer[0])
  1dc8: 8180           r24 := *(r31:r30)
  1dca: e090           r25 := 0
  1dcc: 9508           ret
_loc_1dce:
  1dce: ef8f ef9f      r25:r24 := 0xffff
  1dd2: 9508           ret

void TwoWire::flush(void):
  1dd4: 9508           ret

size_t TwoWire::write(const uint8_t *data, size_t quantity):
  1dd6: 92cf           push r12
  1dd8: 92df           push r13
  1dda: 92ef           push r14
  1ddc: 92ff           push r15
  1dde: 930f           push r16
  1de0: 931f           push r17
  1de2: 93cf           push r28
  1de4: 93df           push r29
  1de6: 017c           r15:r14 := r25:r24
  1de8: 2f26           r18 := r22
  1dea: 2f97           r25 := r23
  1dec: 018a           r17:r16 := r21:r20
  1dee: 9180 0774      r24 := SRAM.TwoWire::transmitting
  1df2: 2388 f091      if_not(r24):jmp 0x1e1a <_loc_1e1a>
  1df6: 2fc6 2fd7      r29:r28 := r23:r22
  1dfa: 016e           r13:r12 := r29:r28
  1dfc: 0ec4 1ed5      r13:r12 += r21:r20
_loc_1e00:
  1e00: 15cc 05dd f071 if(r29:r28 == r13:r12):jmp 0x1e22 <_loc_1e22>
  1e06: 9169           r22 := *(r29:r28 ++)
  1e08: 01d7           r27:r26 := r15:r14
  1e0a: 91ed           r30 := *(r27:r26 ++)
  1e0c: 91fc           r31 := *(r27:r26)
  1e0e: 9001           r0 := *(r31:r30 ++)
  1e10: 81f0           r31 := *(r31:r30)
  1e12: 2de0           r30 := r0
  1e14: 01c7           r25:r24 := r15:r14
  1e16: 9509           icall r31:r30
  1e18: cff3           jmp 0x1e00 <_loc_1e00>
_loc_1e1a:
  1e1a: 2f64           r22 := r20
  1e1c: 2f82           r24 := r18
  1e1e: 940e 104e      call 0x209c <uint8_t twi_transmit(const uint8_t* data, uint8_t length)>
_loc_1e22:
  1e22: 01c8           r25:r24 := r17:r16
  1e24: 91df           pop r29
  1e26: 91cf           pop r28
  1e28: 911f           pop r17
  1e2a: 910f           pop r16
  1e2c: 90ff           pop r15
  1e2e: 90ef           pop r14
  1e30: 90df           pop r13
  1e32: 90cf           pop r12
  1e34: 9508           ret

size_t TwoWire::write(uint8_t data):
  1e36: 93cf           push r28
  1e38: 93df           push r29
  1e3a: 921f           push r1
  1e3c: b7cd           r28 := PORT.SPL
  1e3e: b7de           r29 := PORT.SPH
  1e40: 8369           *(r29:r28 + 0x01) := r22
  1e42: 9120 0774      r18 := SRAM.TwoWire::transmitting
  1e46: 2322 f0d1      if_not(r18):jmp 0x1e7e <_loc_1e7e>
  1e4a: 9120 0775      r18 := SRAM.TwoWire::txBufferLength
  1e4e: 3220 f040      if(r18 < 0x20):jmp 0x1e62 <_loc_1e62>
  1e52: e021 e030      r19:r18 := 1
  1e56: 01fc           r31:r30 := r25:r24
  1e58: 8333           *(r31:r30 + 0x03) := r19
  1e5a: 8322           *(r31:r30 + 0x02) := r18
  1e5c: e080 e090      r25:r24 := 0
  1e60: c015           jmp 0x1e8c <_loc_1e8c>
_loc_1e62:
  1e62: 9180 0776      r24 := SRAM.TwoWire::txBufferIndex
  1e66: 2fe8 e0f0      r31:r30 := 0:r24
  1e6a: 58e9 4ff8      r31:r30 -= -0x777
  1e6e: 8199           r25 := *(r29:r28 + 0x01)
  1e70: 8390           *(r31:r30) := r25
  1e72: 5f8f           r24 -= -1
  1e74: 9380 0776      SRAM.TwoWire::txBufferIndex := r24
  1e78: 9380 0775      SRAM.TwoWire::txBufferLength := r24
  1e7c: c005           jmp 0x1e88 <_loc_1e88>
_loc_1e7e:
  1e7e: e061           r22 := 1
  1e80: 01ce           r25:r24 := r29:r28
  1e82: 9601           r25:r24 += 1
  1e84: 940e 104e      call 0x209c <uint8_t twi_transmit(const uint8_t* data, uint8_t length)>
_loc_1e88:
  1e88: e081 e090      r25:r24 := 1
_loc_1e8c:
  1e8c: 900f           pop r0
  1e8e: 91df           pop r29
  1e90: 91cf           pop r28
  1e92: 9508           ret

TwoWire::TwoWire():
  1e94: 01fc           r31:r30 := r25:r24
  1e96: 8213           *(r31:r30 + 0x03) := 0
  1e98: 8212           *(r31:r30 + 0x02) := 0
  1e9a: ee88 e093      r25:r24 := 0x3e8
  1e9e: e0a0 e0b0      r27:r26 := 0
  1ea2: 8384           *(r31:r30 + 0x04) := r24
  1ea4: 8395           *(r31:r30 + 0x05) := r25
  1ea6: 83a6           *(r31:r30 + 0x06) := r26
  1ea8: 83b7           *(r31:r30 + 0x07) := r27
  1eaa: e28d e096      r25:r24 := 0x62d (=TwoWire_vtable)
  1eae: 8391           *(r31:r30 + 0x01) := r25
  1eb0: 8380           *(r31:r30) := r24
  1eb2: 9508           ret

void TwoWire::begin(void):
  1eb4: 9210 0799      SRAM.TwoWire::rxBufferIndex := 0
  1eb8: 9210 0798      SRAM.TwoWire::rxBufferLength := 0
  1ebc: 9210 0776      SRAM.TwoWire::txBufferIndex := 0
  1ec0: 9210 0775      SRAM.TwoWire::txBufferLength := 0
  1ec4: 940c 0f9a      jmp 0x1f34 <twi_init()>

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop):
  1ec8: 2f86           r24 := r22
  1eca: 3241 f008      if(r20 < 0x21):jmp 0x1ed0 <_loc_1ed0>
  1ece: e240           r20 := 0x20
_loc_1ed0:
  1ed0: e96a e077      r23:r22 := 0x79a (=TwoWire::rxBuffer[0])
  1ed4: 940e 0fb8      call 0x1f70 <uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)>
  1ed8: 9210 0799      SRAM.TwoWire::rxBufferIndex := 0
  1edc: 9380 0798      SRAM.TwoWire::rxBufferLength := r24
  1ee0: 9508           ret

uint8_t TwoWire::requestFrom(int address, int quantity):
  1ee2: e021           r18 := 1
  1ee4: 940c 0f64      jmp 0x1ec8 <uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)>

void TwoWire::beginTransmission(uint8_t address):
  1ee8: e081           r24 := 1
  1eea: 9380 0774      SRAM.TwoWire::transmitting := r24
  1eee: 9360 0797      SRAM.TwoWire::txAddress := r22
  1ef2: 9210 0776      SRAM.TwoWire::txBufferIndex := 0
  1ef6: 9210 0775      SRAM.TwoWire::txBufferLength := 0
  1efa: 9508           ret

void TwoWire::beginTransmission(int address):
  1efc: 940c 0f74      jmp 0x1ee8 <void TwoWire::beginTransmission(uint8_t address)>

uint8_t TwoWire::endTransmission(uint8_t sendStop):
  1f00: 930f           push r16
  1f02: 2f06           r16 := r22
  1f04: e021           r18 := 1
  1f06: 9140 0775      r20 := SRAM.TwoWire::txBufferLength
  1f0a: e767 e077      r23:r22 := 0x777
  1f0e: 9180 0797      r24 := SRAM.TwoWire::txAddress
  1f12: 940e 0ffc      call 0x1ff8 <uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)>
  1f16: 9210 0776      SRAM.TwoWire::txBufferIndex := 0
  1f1a: 9210 0775      SRAM.TwoWire::txBufferLength := 0
  1f1e: 9210 0774      SRAM.TwoWire::transmitting := 0
  1f22: 910f           pop r16
  1f24: 9508           ret

uint8_t TwoWire::endTransmission(void):
  1f26: e061           r22 := 1
  1f28: 940c 0f80      jmp 0x1f00 <uint8_t TwoWire::endTransmission(uint8_t sendStop)>

cons3_Wire:
  1f2c: e688 e097      r25:r24 := 0x768 (=Wire)
  1f30: 940c 0f4a      jmp 0x1e94 <TwoWire::TwoWire()>

twi_init():
  1f34: 9210 0827      SRAM.twi_state := 0
  1f38: e081           r24 := 1
  1f3a: 9380 0825      SRAM.twi_sendStop := r24
  1f3e: 9210 0824      SRAM.twi_inRepStart := 0
  1f42: e061           r22 := 1
  1f44: e082           r24 := 2
  1f46: 940e 160b      call 0x2c16 <digitalWrite(r24=pin, r22=value)>
  1f4a: e061           r22 := 1
  1f4c: e083           r24 := 3
  1f4e: 940e 160b      call 0x2c16 <digitalWrite(r24=pin, r22=value)>
  1f52: ebe9 e0f0      r31:r30 := 0xb9 (=TWSR)
  1f56: 8180           r24 := *(r31:r30)
  1f58: 7f8e           r24 &= 0xfe
  1f5a: 8380           *(r31:r30) := r24
  1f5c: 8180           r24 := *(r31:r30)
  1f5e: 7f8d           r24 &= 0xfd
  1f60: 8380           *(r31:r30) := r24
  1f62: e488           r24 := 0x48
  1f64: 9380 00b8      SRAM.TWBR := r24
  1f68: e485           r24 := 0x45
  1f6a: 9380 00bc      SRAM.TWCR := r24
  1f6e: 9508           ret

uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop):
  1f70: 3241 f008      if(r20 < 0x21):jmp 0x1f76 <_loc_1f76>
  1f74: c03f           jmp 0x1ff4 <_loc_1ff4>
_loc_1f76:
  1f76: 9190 0827      r25 := SRAM.twi_state
  1f7a: 1191 cffc      if_not(r25 == 0):jmp 0x1f76 <_loc_1f76>
  1f7e: e091           r25 := 1
  1f80: 9390 0827      SRAM.twi_state := r25
  1f84: 9320 0825      SRAM.twi_sendStop := r18
  1f88: ef2f           r18 := 0xff
  1f8a: 9320 07ba      SRAM.0x07ba := r18
  1f8e: 9210 07ff      SRAM.0x07ff := 0
  1f92: 0f24           r18 += r20
  1f94: 9320 07fe      SRAM.0x07fe := r18
  1f98: 9390 0826      SRAM.0x0826 := r25
  1f9c: 9190 0826      r25 := SRAM.0x0826
  1fa0: 0f88           r24 *= 2
  1fa2: 2b89           r24 |= r25
  1fa4: 9380 0826      SRAM.0x0826 := r24
  1fa8: 9180 0824      r24 := SRAM.twi_inRepStart
  1fac: 3081 f441      if(r24 != 1):jmp 0x1fc0 <_loc_1fc0>
  1fb0: 9210 0824      SRAM.twi_inRepStart := 0
  1fb4: 9180 0826      r24 := SRAM.0x0826
  1fb8: 9380 00bb      SRAM.TWDR := r24
  1fbc: ec85           r24 := 0xc5
  1fbe: c001           jmp 0x1fc2 <_loc_1fc2>
_loc_1fc0:
  1fc0: ee85           r24 := 0xe5
_loc_1fc2:
  1fc2: 9380 00bc      SRAM.TWCR := r24
_loc_1fc6:
  1fc6: 9180 0827      r24 := SRAM.twi_state
  1fca: 3081 f3e1      if(r24 == 1):jmp 0x1fc6 <_loc_1fc6>
  1fce: 9180 07ff      r24 := SRAM.0x07ff
  1fd2: 1784 f410      if(r24 >= r20):jmp 0x1fda <_loc_1fda>
  1fd6: 9140 07ff      r20 := SRAM.0x07ff
_loc_1fda:
  1fda: e020 e038      r19:r18 := 0x800
  1fde: 01fb           r31:r30 := r23:r22
  1fe0: 01d9           r27:r26 := r19:r18
_loc_1fe2:
  1fe2: 2f8a           r24 := r26
  1fe4: 1b82           r24 -= r18
  1fe6: 1784 f418      if(r24 >= r20):jmp 0x1ff0 <_loc_1ff0>
  1fea: 918d           r24 := *(r27:r26 ++)
  1fec: 9381           *(r31:r30 ++) := r24
  1fee: cff9           jmp 0x1fe2 <_loc_1fe2>
_loc_1ff0:
  1ff0: 2f84           r24 := r20
  1ff2: 9508           ret
_loc_1ff4:
  1ff4: e080           r24 := 0
  1ff6: 9508           ret

uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop):
  1ff8: 930f           push r16
  1ffa: 3241 f008      if(r20 < 0x21):jmp 0x2000 <_loc_2000>
  1ffe: c046           jmp 0x208c <_loc_208c>
_loc_2000:
  2000: 9190 0827      r25 := SRAM.twi_state
  2004: 1191 cffc      if_not(r25 == 0):jmp 0x2000 <_loc_2000>
  2008: e032           r19 := 2
  200a: 9330 0827      SRAM.twi_state := r19
  200e: 9300 0825      SRAM.twi_sendStop := r16
  2012: ef3f           r19 := 0xff
  2014: 9330 07ba      SRAM.0x07ba := r19
  2018: 9210 07ff      SRAM.0x07ff := 0
  201c: 9340 07fe      SRAM.0x07fe := r20
  2020: 01fb           r31:r30 := r23:r22
  2022: e060 e078      r23:r22 := 0x800
  2026: 01db           r27:r26 := r23:r22
_loc_2028:
  2028: 2f3a           r19 := r26
  202a: 1b36           r19 -= r22
  202c: 1734 f418      if(r19 >= r20):jmp 0x2036 <_loc_2036>
  2030: 9131           r19 := *(r31:r30 ++)
  2032: 933d           *(r27:r26 ++) := r19
  2034: cff9           jmp 0x2028 <_loc_2028>
_loc_2036:
  2036: 9210 0826      SRAM.0x0826 := 0
  203a: 9130 0826      r19 := SRAM.0x0826
  203e: 0f88           r24 *= 2
  2040: 2b83           r24 |= r19
  2042: 9380 0826      SRAM.0x0826 := r24
  2046: 9180 0824      r24 := SRAM.twi_inRepStart
  204a: 3081 f441      if(r24 != 1):jmp 0x205e <_loc_205e>
  204e: 9210 0824      SRAM.twi_inRepStart := 0
  2052: 9180 0826      r24 := SRAM.0x0826
  2056: 9380 00bb      SRAM.TWDR := r24
  205a: ec85           r24 := 0xc5
  205c: c001           jmp 0x2060 <_loc_2060>
_loc_205e:
  205e: ee85           r24 := 0xe5
_loc_2060:
  2060: 9380 00bc      SRAM.TWCR := r24
_loc_2064:
  2064: 2322 f021      if_not(r18):jmp 0x2070 <_loc_2070>
  2068: 9180 0827      r24 := SRAM.twi_state
  206c: 3082 f3d1      if(r24 == 2):jmp 0x2064 <_loc_2064>
_loc_2070:
  2070: 9180 07ba      r24 := SRAM.0x07ba
  2074: 3f8f f079      if(r24 == 0xff):jmp 0x2096 <_loc_2096>
  2078: 9180 07ba      r24 := SRAM.0x07ba
  207c: 3280 f041      if(r24 == 0x20):jmp 0x2090 <_loc_2090>
  2080: 9180 07ba      r24 := SRAM.0x07ba
  2084: 3380 f031      if(r24 == 0x30):jmp 0x2094 <_loc_2094>
  2088: e094           r25 := 4
  208a: c005           jmp 0x2096 <_loc_2096>
_loc_208c:
  208c: e091           r25 := 1
  208e: c003           jmp 0x2096 <_loc_2096>
_loc_2090:
  2090: e092           r25 := 2
  2092: c001           jmp 0x2096 <_loc_2096>
_loc_2094:
  2094: e093           r25 := 3
_loc_2096:
  2096: 2f89           r24 := r25
  2098: 910f           pop r16
  209a: 9508           ret

uint8_t twi_transmit(const uint8_t* data, uint8_t length):
  209c: 3261 f498      if(r22 >= 0x21):jmp 0x20c6 <_loc_20c6>
  20a0: 9120 0827      r18 := SRAM.twi_state
  20a4: 3024 f489      if(r18 != 4):jmp 0x20ca <_loc_20ca>
  20a8: 9360 07dc      SRAM.0x07dc := r22
  20ac: 01fc           r31:r30 := r25:r24
  20ae: ed2e e037      r19:r18 := 0x7de
  20b2: 01d9           r27:r26 := r19:r18
_loc_20b4:
  20b4: 2f8a           r24 := r26
  20b6: 1b82           r24 -= r18
  20b8: 1786 f418      if(r24 >= r22):jmp 0x20c2 <_loc_20c2>
  20bc: 9181           r24 := *(r31:r30 ++)
  20be: 938d           *(r27:r26 ++) := r24
  20c0: cff9           jmp 0x20b4 <_loc_20b4>
_loc_20c2:
  20c2: e080           r24 := 0
  20c4: 9508           ret
_loc_20c6:
  20c6: e081           r24 := 1
  20c8: 9508           ret
_loc_20ca:
  20ca: e082           r24 := 2
  20cc: 9508           ret

sub_20ce:
  20ce: ed85           r24 := 0xd5
  20d0: 9380 00bc      SRAM.TWCR := r24
_loc_20d4:
  20d4: 9180 00bc      r24 := SRAM.TWCR
  20d8: fd84 cffc      if(bit(r24, 4)):jmp 0x20d4 <_loc_20d4>
  20dc: 9210 0827      SRAM.twi_state := 0
  20e0: 9508           ret

sub_20e2:
  20e2: ec85           r24 := 0xc5
  20e4: 9380 00bc      SRAM.TWCR := r24
  20e8: 9210 0827      SRAM.twi_state := 0
  20ec: 9508           ret

int24:
  20ee: 921f           push r1
  20f0: 920f           push r0
  20f2: b60f           r0 := PORT.SREG
  20f4: 920f           push r0
  20f6: 2411           r1 := 0
  20f8: 932f           push r18
  20fa: 933f           push r19
  20fc: 934f           push r20
  20fe: 935f           push r21
  2100: 936f           push r22
  2102: 937f           push r23
  2104: 938f           push r24
  2106: 939f           push r25
  2108: 93af           push r26
  210a: 93bf           push r27
  210c: 93ef           push r30
  210e: 93ff           push r31
  2110: 9180 00b9      r24 := SRAM.TWSR
  2114: 7f88           r24 &= 0xf8
  2116: 3680 f409      if(r24 != 0x60):jmp 0x211c <_loc_211c>
  211a: c09c           jmp 0x2254 <_loc_2254>
_loc_211c:
  211c: f568           brcc 0x2178 <_loc_2178>
  211e: 3288 f409      if(r24 != 0x28):jmp 0x2124 <_loc_2124>
  2122: c05b           jmp 0x21da <_loc_21da>
_loc_2124:
  2124: f490           brcc 0x214a <_loc_214a>
  2126: 3180 f409      if(r24 != 0x10):jmp 0x212c <_loc_212c>
  212a: c054           jmp 0x21d4 <_loc_21d4>
_loc_212c:
  212c: f438           brcc 0x213c <_loc_213c>
  212e: 2388 f409      if(r24):jmp 0x2134 <_loc_2134>
  2132: c0f5           jmp 0x231e <_loc_231e>
_loc_2134:
  2134: 3088 f409      if(r24 != 8):jmp 0x213a <_loc_213a>
  2138: c04d           jmp 0x21d4 <_loc_21d4>
_loc_213a:
  213a: c0f5           jmp 0x2326 <_loc_2326>
_loc_213c:
  213c: 3188 f409      if(r24 != 0x18):jmp 0x2142 <_loc_2142>
  2140: c04c           jmp 0x21da <_loc_21da>
_loc_2142:
  2142: 3280 f409      if(r24 != 0x20):jmp 0x2148 <_loc_2148>
  2146: c05d           jmp 0x2202 <_loc_2202>
_loc_2148:
  2148: c0ee           jmp 0x2326 <_loc_2326>
_loc_214a:
  214a: 3480 f409      if(r24 != 0x40):jmp 0x2150 <_loc_2150>
  214e: c068           jmp 0x2220 <_loc_2220>
_loc_2150:
  2150: f448           brcc 0x2164 <_loc_2164>
  2152: 3380 f409      if(r24 != 0x30):jmp 0x2158 <_loc_2158>
  2156: c055           jmp 0x2202 <_loc_2202>
_loc_2158:
  2158: 3388 f009      if(r24 == 0x38):jmp 0x215e <_loc_215e>
  215c: c0e4           jmp 0x2326 <_loc_2326>
_loc_215e:
  215e: 9380 07ba      SRAM.0x07ba := r24
  2162: c0a8           jmp 0x22b4 <_loc_22b4>
_loc_2164:
  2164: 3580 f409      if(r24 != 0x50):jmp 0x216a <_loc_216a>
  2168: c04f           jmp 0x2208 <_loc_2208>
_loc_216a:
  216a: 3588 f409      if(r24 != 0x58):jmp 0x2170 <_loc_2170>
  216e: c05d           jmp 0x222a <_loc_222a>
_loc_2170:
  2170: 3488 f009      if(r24 == 0x48):jmp 0x2176 <_loc_2176>
  2174: c0d8           jmp 0x2326 <_loc_2326>
_loc_2176:
  2176: c0d5           jmp 0x2322 <_loc_2322>
_loc_2178:
  2178: 3988 f409      if(r24 != 0x98):jmp 0x217e <_loc_217e>
  217c: c0c6           jmp 0x230a <_loc_230a>
_loc_217e:
  217e: f4a8           brcc 0x21aa <_loc_21aa>
  2180: 3788 f409      if(r24 != 0x78):jmp 0x2186 <_loc_2186>
  2184: c067           jmp 0x2254 <_loc_2254>
_loc_2186:
  2186: f438           brcc 0x2196 <_loc_2196>
  2188: 3688 f409      if(r24 != 0x68):jmp 0x218e <_loc_218e>
  218c: c063           jmp 0x2254 <_loc_2254>
_loc_218e:
  218e: 3780 f409      if(r24 != 0x70):jmp 0x2194 <_loc_2194>
  2192: c060           jmp 0x2254 <_loc_2254>
_loc_2194:
  2194: c0c8           jmp 0x2326 <_loc_2326>
_loc_2196:
  2196: 3888 f409      if(r24 != 0x88):jmp 0x219c <_loc_219c>
  219a: c0b7           jmp 0x230a <_loc_230a>
_loc_219c:
  219c: 3980 f409      if(r24 != 0x90):jmp 0x21a2 <_loc_21a2>
  21a0: c05f           jmp 0x2260 <_loc_2260>
_loc_21a2:
  21a2: 3880 f009      if(r24 == 0x80):jmp 0x21a8 <_loc_21a8>
  21a6: c0bf           jmp 0x2326 <_loc_2326>
_loc_21a8:
  21a8: c05b           jmp 0x2260 <_loc_2260>
_loc_21aa:
  21aa: 3b80 f409      if(r24 != 0xb0):jmp 0x21b0 <_loc_21b0>
  21ae: c085           jmp 0x22ba <_loc_22ba>
_loc_21b0:
  21b0: f438           brcc 0x21c0 <_loc_21c0>
  21b2: 3a80 f409      if(r24 != 0xa0):jmp 0x21b8 <_loc_21b8>
  21b6: c066           jmp 0x2284 <_loc_2284>
_loc_21b8:
  21b8: 3a88 f409      if(r24 != 0xa8):jmp 0x21be <_loc_21be>
  21bc: c07e           jmp 0x22ba <_loc_22ba>
_loc_21be:
  21be: c0b3           jmp 0x2326 <_loc_2326>
_loc_21c0:
  21c0: 3c80 f409      if(r24 != 0xc0):jmp 0x21c6 <_loc_21c6>
  21c4: c0a6           jmp 0x2312 <_loc_2312>
_loc_21c6:
  21c6: 3c88 f409      if(r24 != 0xc8):jmp 0x21cc <_loc_21cc>
  21ca: c0a3           jmp 0x2312 <_loc_2312>
_loc_21cc:
  21cc: 3b88 f409      if(r24 != 0xb8):jmp 0x21d2 <_loc_21d2>
  21d0: c089           jmp 0x22e4 <_loc_22e4>
_loc_21d2:
  21d2: c0a9           jmp 0x2326 <_loc_2326>
_loc_21d4:
  21d4: 9180 0826      r24 := SRAM.0x0826
  21d8: c010           jmp 0x21fa <_loc_21fa>
_loc_21da:
  21da: 9190 07ff      r25 := SRAM.0x07ff
  21de: 9180 07fe      r24 := SRAM.0x07fe
  21e2: 1798 f570      if(r25 >= r24):jmp 0x2242 <_loc_2242>
  21e6: 91e0 07ff      r30 := SRAM.0x07ff
  21ea: e081           r24 := 1
  21ec: 0f8e           r24 += r30
  21ee: 9380 07ff      SRAM.0x07ff := r24
  21f2: e0f0           r31 := 0
  21f4: 50e0 4ff8      r31:r30 -= -0x800
  21f8: 8180           r24 := *(r31:r30)
_loc_21fa:
  21fa: 9380 00bb      SRAM.TWDR := r24
_loc_21fe:
  21fe: ec85           r24 := 0xc5
  2200: c085           jmp 0x230c <_loc_230c>
_loc_2202:
  2202: 9380 07ba      SRAM.0x07ba := r24
  2206: c08d           jmp 0x2322 <_loc_2322>
_loc_2208:
  2208: 91e0 07ff      r30 := SRAM.0x07ff
  220c: e081           r24 := 1
  220e: 0f8e           r24 += r30
  2210: 9380 07ff      SRAM.0x07ff := r24
  2214: 9180 00bb      r24 := SRAM.TWDR
  2218: e0f0           r31 := 0
  221a: 50e0 4ff8      r31:r30 -= -0x800
  221e: 8380           *(r31:r30) := r24
_loc_2220:
  2220: 9190 07ff      r25 := SRAM.0x07ff
  2224: 9180 07fe      r24 := SRAM.0x07fe
  2228: c06d           jmp 0x2304 <_loc_2304>
_loc_222a:
  222a: 91e0 07ff      r30 := SRAM.0x07ff
  222e: e081           r24 := 1
  2230: 0f8e           r24 += r30
  2232: 9380 07ff      SRAM.0x07ff := r24
  2236: 9180 00bb      r24 := SRAM.TWDR
  223a: e0f0           r31 := 0
  223c: 50e0 4ff8      r31:r30 -= -0x800
  2240: 8380           *(r31:r30) := r24
_loc_2242:
  2242: 9180 0825      r24 := SRAM.twi_sendStop
  2246: 1181 c06c      if_not(r24 == 0):jmp 0x2322 <_loc_2322>
  224a: e081           r24 := 1
  224c: 9380 0824      SRAM.twi_inRepStart := r24
  2250: ea84           r24 := 0xa4
  2252: c060           jmp 0x2314 <_loc_2314>
_loc_2254:
  2254: e083           r24 := 3
  2256: 9380 0827      SRAM.twi_state := r24
  225a: 9210 07bb      SRAM.0x07bb := 0
  225e: cfcf           jmp 0x21fe <_loc_21fe>
_loc_2260:
  2260: 9180 07bb      r24 := SRAM.0x07bb
  2264: 3280 f008      if(r24 < 0x20):jmp 0x226a <_loc_226a>
  2268: c050           jmp 0x230a <_loc_230a>
_loc_226a:
  226a: 91e0 07bb      r30 := SRAM.0x07bb
  226e: e081           r24 := 1
  2270: 0f8e           r24 += r30
  2272: 9380 07bb      SRAM.0x07bb := r24
  2276: 9180 00bb      r24 := SRAM.TWDR
  227a: e0f0           r31 := 0
  227c: 54e4 4ff8      r31:r30 -= -0x7bc
  2280: 8380           *(r31:r30) := r24
  2282: cfbd           jmp 0x21fe <_loc_21fe>
_loc_2284:
  2284: 9180 07bb      r24 := SRAM.0x07bb
  2288: 3280 f430      if(r24 >= 0x20):jmp 0x2298 <_loc_2298>
  228c: 91e0 07bb      r30 := SRAM.0x07bb
  2290: e0f0           r31 := 0
  2292: 54e4 4ff8      r31:r30 -= -0x7bc
  2296: 8210           *(r31:r30) := 0
_loc_2298:
  2298: 940e 1067      call 0x20ce <sub_20ce>
  229c: 9160 07bb      r22 := SRAM.0x07bb
  22a0: e070           r23 := 0
  22a2: 91e0 0820      r30 := SRAM.0x0820
  22a6: 91f0 0821      r31 := SRAM.0x0821
  22aa: eb8c e097      r25:r24 := 0x7bc
  22ae: 9509           icall r31:r30
  22b0: 9210 07bb      SRAM.0x07bb := 0
_loc_22b4:
  22b4: 940e 1071      call 0x20e2 <sub_20e2>
  22b8: c036           jmp 0x2326 <_loc_2326>
_loc_22ba:
  22ba: e084           r24 := 4
  22bc: 9380 0827      SRAM.twi_state := r24
  22c0: 9210 07dd      SRAM.0x07dd := 0
  22c4: 9210 07dc      SRAM.0x07dc := 0
  22c8: 91e0 0822      r30 := SRAM.0x0822
  22cc: 91f0 0823      r31 := SRAM.0x0823
  22d0: 9509           icall r31:r30
  22d2: 9180 07dc      r24 := SRAM.0x07dc
  22d6: 1181 c005      if_not(r24 == 0):jmp 0x22e4 <_loc_22e4>
  22da: e081           r24 := 1
  22dc: 9380 07dc      SRAM.0x07dc := r24
  22e0: 9210 07de      SRAM.0x07de := 0
_loc_22e4:
  22e4: 91e0 07dd      r30 := SRAM.0x07dd
  22e8: e081           r24 := 1
  22ea: 0f8e           r24 += r30
  22ec: 9380 07dd      SRAM.0x07dd := r24
  22f0: e0f0           r31 := 0
  22f2: 52e2 4ff8      r31:r30 -= -0x7de
  22f6: 8180           r24 := *(r31:r30)
  22f8: 9380 00bb      SRAM.TWDR := r24
  22fc: 9190 07dd      r25 := SRAM.0x07dd
  2300: 9180 07dc      r24 := SRAM.0x07dc
_loc_2304:
  2304: 1798 f408      if(r25 >= r24):jmp 0x230a <_loc_230a>
  2308: cf7a           jmp 0x21fe <_loc_21fe>
_loc_230a:
  230a: e885           r24 := 0x85
_loc_230c:
  230c: 9380 00bc      SRAM.TWCR := r24
  2310: c00a           jmp 0x2326 <_loc_2326>
_loc_2312:
  2312: ec85           r24 := 0xc5
_loc_2314:
  2314: 9380 00bc      SRAM.TWCR := r24
  2318: 9210 0827      SRAM.twi_state := 0
  231c: c004           jmp 0x2326 <_loc_2326>
_loc_231e:
  231e: 9210 07ba      SRAM.0x07ba := 0
_loc_2322:
  2322: 940e 1067      call 0x20ce <sub_20ce>
_loc_2326:
  2326: 91ff           pop r31
  2328: 91ef           pop r30
  232a: 91bf           pop r27
  232c: 91af           pop r26
  232e: 919f           pop r25
  2330: 918f           pop r24
  2332: 917f           pop r23
  2334: 916f           pop r22
  2336: 915f           pop r21
  2338: 914f           pop r20
  233a: 913f           pop r19
  233c: 912f           pop r18
  233e: 900f           pop r0
  2340: be0f           PORT.SREG := r0
  2342: 900f           pop r0
  2344: 901f           pop r1
  2346: 9518           ret_int

void Ndh15Badge::play(long freq, long duration):
  2348: 924f           push r4
  234a: 925f           push r5
  234c: 926f           push r6
  234e: 927f           push r7
  2350: 928f           push r8
  2352: 929f           push r9
  2354: 92af           push r10
  2356: 92bf           push r11
  2358: 92cf           push r12
  235a: 92df           push r13
  235c: 92ef           push r14
  235e: 92ff           push r15
  2360: 930f           push r16
  2362: 931f           push r17
  2364: 93cf           push r28
  2366: 93df           push r29
  2368: d000           nop
  236a: d000           nop
  236c: b7cd           r28 := PORT.SPL
  236e: b7de           r29 := PORT.SPH
  2370: 016a           r13:r12 := r21:r20
  2372: 017b           r15:r14 := r23:r22
  2374: 0128           r5:r4 := r17:r16
  2376: 0139           r7:r6 := r19:r18
  2378: e260 ea71      r23:r22 := 0xa120
  237c: e087 e090      r25:r24 := 7
  2380: 01a7           r21:r20 := r15:r14
  2382: 0196           r19:r18 := r13:r12
  2384: 940e 1d77      call 0x3aee <libgcc.divmodsi4(dividend=r25:r24:r23:r22, divisor=r21:r20:r19:r18)->r25:r24:r23:r22=r,r21:r20:r19:r18=q>
  2388: 0149           r9:r8 := r19:r18
  238a: 015a           r11:r10 := r21:r20
  238c: 01a7           r21:r20 := r15:r14
  238e: 0196           r19:r18 := r13:r12
  2390: 01c3           r25:r24 := r7:r6
  2392: 01b2           r23:r22 := r5:r4
  2394: 940e 1d1d      call 0x3a3a <libgcc.mulsi3(A=r25:r24:r23:r22, B=r21:r20:r19:r18)->r25:r24:r23:r22=A*B>
  2398: ee28 e033      r19:r18 := 0x3e8
  239c: e040 e050      r21:r20 := 0
  23a0: 940e 1d77      call 0x3aee <libgcc.divmodsi4(dividend=r25:r24:r23:r22, divisor=r21:r20:r19:r18)->r25:r24:r23:r22=r,r21:r20:r19:r18=q>
  23a4: 2cc1 2cd1      r13:r12 := 0
  23a8: 0176           r15:r14 := r13:r12
_loc_23aa:
  23aa: 16c2 06d3 06e4 06f5 f4e4 if(r15:r14:r13:r12 >=s r21:r20:r19:r18):jmp 0x23ec <_loc_23ec>
  23b4: e061           r22 := 1
  23b6: e085           r24 := 5
  23b8: 8329           *(r29:r28 + 0x01) := r18
  23ba: 833a           *(r29:r28 + 0x02) := r19
  23bc: 834b           *(r29:r28 + 0x03) := r20
  23be: 835c           *(r29:r28 + 0x04) := r21
  23c0: 940e 160b      call 0x2c16 <digitalWrite(r24=pin, r22=value)>
  23c4: 01c4           r25:r24 := r9:r8
  23c6: 940e 1536      call 0x2a6c <void delayMicroseconds(unsigned int us)>
  23ca: e060           r22 := 0
  23cc: e085           r24 := 5
  23ce: 940e 160b      call 0x2c16 <digitalWrite(r24=pin, r22=value)>
  23d2: 01c4           r25:r24 := r9:r8
  23d4: 940e 1536      call 0x2a6c <void delayMicroseconds(unsigned int us)>
  23d8: ef8f           r24 := 0xff
  23da: 1ac8           r12 -= r24
  23dc: 0ad8           r13 -= r24+C
  23de: 0ae8           r14 -= r24+C
  23e0: 0af8           r15 -= r24+C
  23e2: 815c           r21 := *(r29:r28 + 0x04)
  23e4: 814b           r20 := *(r29:r28 + 0x03)
  23e6: 813a           r19 := *(r29:r28 + 0x02)
  23e8: 8129           r18 := *(r29:r28 + 0x01)
  23ea: cfdf           jmp 0x23aa <_loc_23aa>
_loc_23ec:
  23ec: 900f           pop r0
  23ee: 900f           pop r0
  23f0: 900f           pop r0
  23f2: 900f           pop r0
  23f4: 91df           pop r29
  23f6: 91cf           pop r28
  23f8: 911f           pop r17
  23fa: 910f           pop r16
  23fc: 90ff           pop r15
  23fe: 90ef           pop r14
  2400: 90df           pop r13
  2402: 90cf           pop r12
  2404: 90bf           pop r11
  2406: 90af           pop r10
  2408: 909f           pop r9
  240a: 908f           pop r8
  240c: 907f           pop r7
  240e: 906f           pop r6
  2410: 905f           pop r5
  2412: 904f           pop r4
  2414: 9508           ret

void Ndh15Badge::adc_channel(uint8_t channel):
  2416: e7ec e0f0      r31:r30 := 0x7c (=ADMUX)
  241a: 8180           r24 := *(r31:r30)
  241c: 7e80           r24 &= 0xe0
  241e: 8380           *(r31:r30) := r24
  2420: 8180           r24 := *(r31:r30)
  2422: 716f           r22 &= 0x1f
  2424: 2b68           r22 |= r24
  2426: 8360           *(r31:r30) := r22
  2428: 9508           ret

uint16_t Ndh15Badge::adc_get(void):
  242a: 9180 007a      r24 := SRAM.ADCSRA
  242e: 6480           r24 |= 0x40
  2430: 9380 007a      SRAM.ADCSRA := r24
_loc_2434:
  2434: 9180 007a      r24 := SRAM.ADCSRA
  2438: ff84 cffc      if_not(bit(r24, 4)):jmp 0x2434 <_loc_2434>
  243c: 9180 007a      r24 := SRAM.ADCSRA
  2440: 6180           r24 |= 0x10
  2442: 9380 007a      SRAM.ADCSRA := r24
  2446: 9180 0078      r24 := SRAM.ADCL
  244a: 9190 0079      r25 := SRAM.ADCH
  244e: 9508           ret

uint16_t Ndh15Badge::touch_measure(uint8_t pin):
  2450: 92cf           push r12
  2452: 92df           push r13
  2454: 92ef           push r14
  2456: 92ff           push r15
  2458: 930f           push r16
  245a: 931f           push r17
  245c: 93cf           push r28
  245e: 93df           push r29
  2460: 018c           r17:r16 := r25:r24
  2462: 2ed6           r13 := r22
  2464: e021 e030      r19:r18 := 1
  2468: c001           jmp 0x246c <_loc_246c>
_loc_246a:
  246a: 0f22           r18 *= 2
_loc_246c:
  246c: 956a           r22 --
  246e: f7ea           brpl 0x246a <_loc_246a>
  2470: 2ec2           r12 := r18
  2472: 2fc2           r28 := r18
  2474: 95c0           r28 := 0xff - r28
  2476: e0d4           r29 := 4
  2478: 2ce1 2cf1      r15:r14 := 0
_loc_247c:
  247c: b381           r24 := PORT.PORTF
  247e: 298c           r24 |= r12
  2480: bb81           PORT.PORTF := r24
  2482: e061 e070      r23:r22 := 1
  2486: e080 e090      r25:r24 := 0
  248a: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  248e: b381           r24 := PORT.PORTF
  2490: 238c           r24 &= r28
  2492: bb81           PORT.PORTF := r24
  2494: e16f           r22 := 0x1f
  2496: 01c8           r25:r24 := r17:r16
  2498: 940e 120b      call 0x2416 <void Ndh15Badge::adc_channel(uint8_t channel)>
  249c: 01c8           r25:r24 := r17:r16
  249e: 940e 1215      call 0x242a <uint16_t Ndh15Badge::adc_get(void)>
  24a2: 2d6d           r22 := r13
  24a4: 01c8           r25:r24 := r17:r16
  24a6: 940e 120b      call 0x2416 <void Ndh15Badge::adc_channel(uint8_t channel)>
  24aa: 01c8           r25:r24 := r17:r16
  24ac: 940e 1215      call 0x242a <uint16_t Ndh15Badge::adc_get(void)>
  24b0: 0ee8 1ef9      r15:r14 += r25:r24
  24b4: 50d1           r29 -= 1
  24b6: f711           brne 0x247c <_loc_247c>
  24b8: 01c7           r25:r24 := r15:r14
  24ba: 9596 9587      r25:r24 /= 2
  24be: 9596 9587      r25:r24 /= 2
  24c2: 91df           pop r29
  24c4: 91cf           pop r28
  24c6: 911f           pop r17
  24c8: 910f           pop r16
  24ca: 90ff           pop r15
  24cc: 90ef           pop r14
  24ce: 90df           pop r13
  24d0: 90cf           pop r12
  24d2: 9508           ret

int Ndh15Badge::button(int pin):
  24d4: 3064 0571 f449 if(r23:r22 != 4):jmp 0x24ec <_loc_24ec>
  24da: e064           r22 := 4
  24dc: 940e 1228      call 0x2450 <uint16_t Ndh15Badge::touch_measure(uint8_t pin)>
  24e0: e031           r19 := 1
  24e2: e020           r18 := 0
  24e4: 3f87           cmp r24, 0xf7
  24e6: 4093           r25 -= 3+C
  24e8: f048           if(r25 < 0):jmp 0x24fc <_loc_24fc>
  24ea: c007           jmp 0x24fa <_loc_24fa>
_loc_24ec:
  24ec: 940e 1228      call 0x2450 <uint16_t Ndh15Badge::touch_measure(uint8_t pin)>
  24f0: e031           r19 := 1
  24f2: e020           r18 := 0
  24f4: 3884           cmp r24, 0x84
  24f6: 4093           r25 -= 3+C
  24f8: f408           if(r25 >= 0):jmp 0x24fc <_loc_24fc>
_loc_24fa:
  24fa: e030           r19 := 0
_loc_24fc:
  24fc: 2f83 2f92      r25:r24 := swap_bytes(r19:r18)
  2500: 9508           ret

void Ndh15Badge::led(byte red=r22, byte green=r20, byte blue=r18):
  2502: 930f           push r16
  2504: 931f           push r17
  2506: 93cf           push r28
  2508: 93df           push r29
  250a: d000           nop
  250c: b7cd           r28 := PORT.SPL
  250e: b7de           r29 := PORT.SPH
  2510: ef0f e010      r17:r16 := 0xff
  2514: 01c8           r25:r24 := r17:r16
  2516: 1b86 0991      r25:r24 -= 0:r22
  251a: 01bc           r23:r22 := r25:r24
  251c: e089           r24 := 9
  251e: 832a           *(r29:r28 + 0x02) := r18
  2520: 8349           *(r29:r28 + 0x01) := r20
  2522: 940e 1413      call 0x2826 <void Ndh15Badge::??led(led, value)>
  2526: 8149           r20 := *(r29:r28 + 0x01)
  2528: 01b8           r23:r22 := r17:r16
  252a: 1b64 0971      r23:r22 -= 0:r20
  252e: e08a           r24 := 10
  2530: 940e 1413      call 0x2826 <void Ndh15Badge::??led(led, value)>
  2534: 812a           r18 := *(r29:r28 + 0x02)
  2536: 01b8           r23:r22 := r17:r16
  2538: 1b62 0971      r23:r22 -= 0:r18
  253c: e08b           r24 := 11
  253e: 900f           pop r0
  2540: 900f           pop r0
  2542: 91df           pop r29
  2544: 91cf           pop r28
  2546: 911f           pop r17
  2548: 910f           pop r16
  254a: 940c 1413      jmp 0x2826 <void Ndh15Badge::??led(led, value)>

int Ndh15Badge::readX(void):
  254e: 01fc           r31:r30 := r25:r24
  2550: 8180           r24 := *(r31:r30)
  2552: 8191           r25 := *(r31:r30 + 0x01)
  2554: 9508           ret

int Ndh15Badge::readY(void):
  2556: 01fc           r31:r30 := r25:r24
  2558: 8182           r24 := *(r31:r30 + 0x02)
  255a: 8193           r25 := *(r31:r30 + 0x03)
  255c: 9508           ret

void Ndh15Badge::accelero_send(unsigned char reg_addr, unsigned char data):
  255e: 931f           push r17
  2560: 93cf           push r28
  2562: 93df           push r29
  2564: 921f           push r1
  2566: b7cd           r28 := PORT.SPL
  2568: b7de           r29 := PORT.SPH
  256a: 2f16           r17 := r22
  256c: e16d e070      r23:r22 := 0x1d
  2570: e688 e097      r25:r24 := 0x768 (=Wire)
  2574: 8349           *(r29:r28 + 0x01) := r20
  2576: 940e 0f7e      call 0x1efc <void TwoWire::beginTransmission(int address)>
  257a: 2f61           r22 := r17
  257c: e688 e097      r25:r24 := 0x768 (=Wire)
  2580: 940e 0f1b      call 0x1e36 <size_t TwoWire::write(uint8_t data)>
  2584: 8149           r20 := *(r29:r28 + 0x01)
  2586: 2f64           r22 := r20
  2588: e688 e097      r25:r24 := 0x768 (=Wire)
  258c: 940e 0f1b      call 0x1e36 <size_t TwoWire::write(uint8_t data)>
  2590: e688 e097      r25:r24 := 0x768 (=Wire)
  2594: 900f           pop r0
  2596: 91df           pop r29
  2598: 91cf           pop r28
  259a: 911f           pop r17
  259c: 940c 0f93      jmp 0x1f26 <uint8_t TwoWire::endTransmission(void)>

void Ndh15Badge::begin(void):
  25a0: 93cf           push r28
  25a2: 93df           push r29
  25a4: 01ec           r29:r28 := r25:r24
  25a6: e688 e097      r25:r24 := 0x768 (=Wire)
  25aa: 940e 0f5a      call 0x1eb4 <void TwoWire::begin(void)>
  25ae: e7ec e0f0      r31:r30 := 0x7c (=ADMUX)
  25b2: 8180           r24 := *(r31:r30)
  25b4: 6480           r24 |= 0x40
  25b6: 8380           *(r31:r30) := r24
  25b8: e7ea e0f0      r31:r30 := 0x7a (=ADCSRA)
  25bc: 8180           r24 := *(r31:r30)
  25be: 6086           r24 |= 6
  25c0: 8380           *(r31:r30) := r24
  25c2: 8180           r24 := *(r31:r30)
  25c4: 6880           r24 |= 0x80
  25c6: 8380           *(r31:r30) := r24
  25c8: e061           r22 := 1
  25ca: e089           r24 := 9
  25cc: 940e 15cf      call 0x2b9e <pinMode(r24=pin, r22=value)>
  25d0: e061           r22 := 1
  25d2: e08b           r24 := 11
  25d4: 940e 15cf      call 0x2b9e <pinMode(r24=pin, r22=value)>
  25d8: e061           r22 := 1
  25da: e08a           r24 := 10
  25dc: 940e 15cf      call 0x2b9e <pinMode(r24=pin, r22=value)>
  25e0: e061           r22 := 1
  25e2: e089           r24 := 9
  25e4: 940e 160b      call 0x2c16 <digitalWrite(r24=pin, r22=value)>
  25e8: e061           r22 := 1
  25ea: e08b           r24 := 11
  25ec: 940e 160b      call 0x2c16 <digitalWrite(r24=pin, r22=value)>
  25f0: e061           r22 := 1
  25f2: e08a           r24 := 10
  25f4: 940e 160b      call 0x2c16 <digitalWrite(r24=pin, r22=value)>
  25f8: e061           r22 := 1
  25fa: e085           r24 := 5
  25fc: 940e 15cf      call 0x2b9e <pinMode(r24=pin, r22=value)>
  2600: e040           r20 := 0
  2602: e26a           r22 := 0x2a
  2604: 01ce           r25:r24 := r29:r28
  2606: 940e 12af      call 0x255e <void Ndh15Badge::accelero_send(unsigned char reg_addr, unsigned char data)>
  260a: e06a e070      r23:r22 := 10
  260e: e080 e090      r25:r24 := 0
  2612: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  2616: e040           r20 := 0
  2618: e06e           r22 := 14
  261a: 01ce           r25:r24 := r29:r28
  261c: 940e 12af      call 0x255e <void Ndh15Badge::accelero_send(unsigned char reg_addr, unsigned char data)>
  2620: e061 e070      r23:r22 := 1
  2624: e080 e090      r25:r24 := 0
  2628: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  262c: e041           r20 := 1
  262e: e26a           r22 := 0x2a
  2630: 01ce           r25:r24 := r29:r28
  2632: 940e 12af      call 0x255e <void Ndh15Badge::accelero_send(unsigned char reg_addr, unsigned char data)>
  2636: e061 e070      r23:r22 := 1
  263a: e080 e090      r25:r24 := 0
  263e: 91df           pop r29
  2640: 91cf           pop r28
  2642: 940c 1510      jmp 0x2a20 <void delay(unsigned long ms)>

int Ndh15Badge::writePage(uint8_t paddr, byte *pdata, int length):
  2646: 92ef           push r14
  2648: 92ff           push r15
  264a: 931f           push r17
  264c: 93cf           push r28
  264e: 93df           push r29
  2650: 01c9           r25:r24 := r19:r18
  2652: 9701           r25:r24 -= 1
  2654: 9708           r25:r24 -= 8
  2656: f558           if(r25:r24 >= 0):jmp 0x26ae <_loc_26ae>
  2658: 01e9           r29:r28 := r19:r18
  265a: 017a           r15:r14 := r21:r20
  265c: 2f16           r17 := r22
  265e: e560 e070      r23:r22 := 0x50
  2662: e688 e097      r25:r24 := 0x768 (=Wire)
  2666: 940e 0f7e      call 0x1efc <void TwoWire::beginTransmission(int address)>
  266a: 2f61           r22 := r17
  266c: e688 e097      r25:r24 := 0x768 (=Wire)
  2670: 940e 0f1b      call 0x1e36 <size_t TwoWire::write(uint8_t data)>
  2674: e010           r17 := 0
_loc_2676:
  2676: 2f81 e090      r25:r24 := 0:r17
  267a: 178c 079d f454 if(r25:r24 >=s r29:r28):jmp 0x2694 <_loc_2694>
  2680: 01f7           r31:r30 := r15:r14
  2682: 0fe8 1ff9      r31:r30 += r25:r24
  2686: 8160           r22 := *(r31:r30)
  2688: e688 e097      r25:r24 := 0x768 (=Wire)
  268c: 940e 0f1b      call 0x1e36 <size_t TwoWire::write(uint8_t data)>
  2690: 5f1f           r17 -= -1
  2692: cff1           jmp 0x2676 <_loc_2676>
_loc_2694:
  2694: e688 e097      r25:r24 := 0x768 (=Wire)
  2698: 940e 0f93      call 0x1f26 <uint8_t TwoWire::endTransmission(void)>
  269c: e06a e070      r23:r22 := 10
  26a0: e080 e090      r25:r24 := 0
  26a4: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  26a8: e080 e090      r25:r24 := 0
  26ac: c002           jmp 0x26b2 <_loc_26b2>
_loc_26ae:
  26ae: ef8f ef9f      r25:r24 := 0xffff
_loc_26b2:
  26b2: 91df           pop r29
  26b4: 91cf           pop r28
  26b6: 911f           pop r17
  26b8: 90ff           pop r15
  26ba: 90ef           pop r14
  26bc: 9508           ret

int Ndh15Badge::readPage(uint8_t paddr=r22, byte *pdata=r21:r20, int length=r19:r18):
  26be: 92ef           push r14
  26c0: 92ff           push r15
  26c2: 930f           push r16
  26c4: 931f           push r17
  26c6: 93cf           push r28
  26c8: 93df           push r29
  26ca: 2fc6           r28 := r22
  26cc: 017a           r15:r14 := r21:r20
  26ce: 0189           r17:r16 := r19:r18
  26d0: 01c9           r25:r24 := r19:r18
  26d2: 9701           r25:r24 -= 1
  26d4: 9708           r25:r24 -= 8
  26d6: f550           if(r25:r24 >= 0):jmp 0x272c <_loc_272c>
  26d8: e560 e070      r23:r22 := 0x50
  26dc: e688 e097      r25:r24 := 0x768 (=Wire)
  26e0: 940e 0f7e      call 0x1efc <void TwoWire::beginTransmission(int address)>
  26e4: 2f6c           r22 := r28
  26e6: e688 e097      r25:r24 := 0x768 (=Wire)
  26ea: 940e 0f1b      call 0x1e36 <size_t TwoWire::write(uint8_t data)>
  26ee: e688 e097      r25:r24 := 0x768 (=Wire)
  26f2: 940e 0f93      call 0x1f26 <uint8_t TwoWire::endTransmission(void)>
  26f6: 01a8           r21:r20 := r17:r16
  26f8: e560 e070      r23:r22 := 0x50
  26fc: e688 e097      r25:r24 := 0x768 (=Wire)
  2700: 940e 0f71      call 0x1ee2 <uint8_t TwoWire::requestFrom(int address, int quantity)>
  2704: 01e7           r29:r28 := r15:r14
  2706: 0ee0 1ef1      r15:r14 += r17:r16
_loc_270a:
  270a: 15ce 05df f061 if(r29:r28 == r15:r14):jmp 0x2728 <_loc_2728>
  2710: e688 e097      r25:r24 := 0x768 (=Wire)
  2714: 940e 0ebf      call 0x1d7e <int TwoWire::available(void)>
  2718: 2b89           r24 |= r25
  271a: f3b9           breq 0x270a <_loc_270a>
  271c: e688 e097      r25:r24 := 0x768 (=Wire)
  2720: 940e 0ec7      call 0x1d8e <int TwoWire::read(void)>
  2724: 9389           *(r29:r28 ++) := r24
  2726: cff1           jmp 0x270a <_loc_270a>
_loc_2728:
  2728: 01c8           r25:r24 := r17:r16
  272a: c002           jmp 0x2730 <_loc_2730>
_loc_272c:
  272c: ef8f ef9f      r25:r24 := 0xffff
_loc_2730:
  2730: 91df           pop r29
  2732: 91cf           pop r28
  2734: 911f           pop r17
  2736: 910f           pop r16
  2738: 90ff           pop r15
  273a: 90ef           pop r14
  273c: 9508           ret

void Ndh15Badge::accelero_read(uint8_t reg_addr):
  273e: 92cf           push r12
  2740: 92df           push r13
  2742: 92ef           push r14
  2744: 92ff           push r15
  2746: 930f           push r16
  2748: 931f           push r17
  274a: 93cf           push r28
  274c: 93df           push r29
  274e: b7cd           r28 := PORT.SPL
  2750: b7de           r29 := PORT.SPH
  2752: 9727           r29:r28 -= 7
  2754: b60f           r0 := PORT.SREG
  2756: 94f8           Clear(I flag)
  2758: bfde           PORT.SPH := r29
  275a: be0f           PORT.SREG := r0
  275c: bfcd           PORT.SPL := r28
  275e: 018c           r17:r16 := r25:r24
  2760: 2ef6           r15 := r22
  2762: e16d e070      r23:r22 := 0x1d
  2766: e688 e097      r25:r24 := 0x768 (=Wire)
  276a: 940e 0f7e      call 0x1efc <void TwoWire::beginTransmission(int address)>
  276e: 2d6f           r22 := r15
  2770: e688 e097      r25:r24 := 0x768 (=Wire)
  2774: 940e 0f1b      call 0x1e36 <size_t TwoWire::write(uint8_t data)>
  2778: e688 e097      r25:r24 := 0x768 (=Wire)
  277c: 940e 0f93      call 0x1f26 <uint8_t TwoWire::endTransmission(void)>
  2780: e047 e050      r21:r20 := 7
  2784: e16d e070      r23:r22 := 0x1d
  2788: e688 e097      r25:r24 := 0x768 (=Wire)
  278c: 940e 0f71      call 0x1ee2 <uint8_t TwoWire::requestFrom(int address, int quantity)>
  2790: 01ce           r25:r24 := r29:r28
  2792: 9601           r25:r24 += 1
  2794: 017c           r15:r14 := r25:r24
  2796: 016e           r13:r12 := r29:r28
  2798: e098           r25 := 8
  279a: 0ec9 1cd1      r13:r12 += 0:r25
_loc_279e:
  279e: e688 e097      r25:r24 := 0x768 (=Wire)
  27a2: 940e 0ec7      call 0x1d8e <int TwoWire::read(void)>
  27a6: 01f7           r31:r30 := r15:r14
  27a8: 9381           *(r31:r30 ++) := r24
  27aa: 017f           r15:r14 := r31:r30
  27ac: 15ec 05fd f7b1 if(r31:r30 != r13:r12):jmp 0x279e <_loc_279e>
  27b2: 818a           r24 := *(r29:r28 + 0x02)
  27b4: e090           r25 := 0
  27b6: 2f98           r25 := r24
  27b8: 2788           r24 := 0
  27ba: 812b           r18 := *(r29:r28 + 0x03)
  27bc: 2b82           r24 |= r18
  27be: e036           r19 := 6
_loc_27c0:
  27c0: 9595           asr r25
  27c2: 9587           r24:C := C:r24 ; >> 1
  27c4: 953a           r19 --
  27c6: f7e1           brne 0x27c0 <_loc_27c0>
  27c8: 01f8           r31:r30 := r17:r16
  27ca: 8391           *(r31:r30 + 0x01) := r25
  27cc: 8380           *(r31:r30) := r24
  27ce: 818c           r24 := *(r29:r28 + 0x04)
  27d0: e090           r25 := 0
  27d2: 2f98           r25 := r24
  27d4: 2788           r24 := 0
  27d6: 812d           r18 := *(r29:r28 + 0x05)
  27d8: 2b82           r24 |= r18
  27da: e056           r21 := 6
_loc_27dc:
  27dc: 9595           asr r25
  27de: 9587           r24:C := C:r24 ; >> 1
  27e0: 955a           r21 --
  27e2: f7e1           brne 0x27dc <_loc_27dc>
  27e4: 8393           *(r31:r30 + 0x03) := r25
  27e6: 8382           *(r31:r30 + 0x02) := r24
  27e8: 812e           r18 := *(r29:r28 + 0x06)
  27ea: e030           r19 := 0
  27ec: 2f32           r19 := r18
  27ee: 2722           r18 := 0
  27f0: 818f           r24 := *(r29:r28 + 0x07)
  27f2: 2b28           r18 |= r24
  27f4: e076           r23 := 6
_loc_27f6:
  27f6: 9535           asr r19
  27f8: 9527           r18:C := C:r18 ; >> 1
  27fa: 957a           r23 --
  27fc: f7e1           brne 0x27f6 <_loc_27f6>
  27fe: 8335           *(r31:r30 + 0x05) := r19
  2800: 8324           *(r31:r30 + 0x04) := r18
  2802: 9627           r29:r28 += 7
  2804: b60f           r0 := PORT.SREG
  2806: 94f8           Clear(I flag)
  2808: bfde           PORT.SPH := r29
  280a: be0f           PORT.SREG := r0
  280c: bfcd           PORT.SPL := r28
  280e: 91df           pop r29
  2810: 91cf           pop r28
  2812: 911f           pop r17
  2814: 910f           pop r16
  2816: 90ff           pop r15
  2818: 90ef           pop r14
  281a: 90df           pop r13
  281c: 90cf           pop r12
  281e: 9508           ret

void Ndh15Badge::updateAccel(void):
  2820: e060           r22 := 0
  2822: 940c 139f      jmp 0x273e <void Ndh15Badge::accelero_read(uint8_t reg_addr)>

void Ndh15Badge::??led(led, value):
  2826: 931f           push r17
  2828: 93cf           push r28
  282a: 93df           push r29
  282c: 2f18           r17 := r24
  282e: 01eb           r29:r28 := r23:r22
  2830: e061           r22 := 1
  2832: 940e 15cf      call 0x2b9e <pinMode(r24=pin, r22=value)>
  2836: 9720 f411      if(r29:r28 != 0):jmp 0x283e <_loc_283e>
_loc_283a:
  283a: e060           r22 := 0
  283c: c004           jmp 0x2846 <_loc_2846>
_loc_283e:
  283e: 3fcf 05d1 f439 if(r29:r28 != 0xff):jmp 0x2852 <_loc_2852>
_loc_2844:
  2844: e061           r22 := 1
_loc_2846:
  2846: 2f81           r24 := r17
  2848: 91df           pop r29
  284a: 91cf           pop r28
  284c: 911f           pop r17
  284e: 940c 160b      jmp 0x2c16 <digitalWrite(r24=pin, r22=value)>
_loc_2852:
  2852: 2fe1 e0f0      r31:r30 := 0:r17
  2856: 51ec 4fff      r31:r30 -= -0xe4 (=UDFNUML)
  285a: 91e4           r30 := PROG[r31:r30]
  285c: 2f4e e050      r21:r20 := 0:r30
  2860: 01fa           r31:r30 := r21:r20
  2862: 9731           r31:r30 -= 1
  2864: 30ee 05f1 f008 if(r31:r30 < 14):jmp 0x286c <_loc_286c>
  286a: c062           jmp 0x2930 <_loc_2930>
_loc_286c:
  286c: 5aea 4fff      r31:r30 -= -0x56
  2870: 940c 1d96      jmp 0x3b2c <jump_indirect_to_PROG[r31:r30*2]>
_loc_2874:
  2874: b584           r24 := PORT.TCCR0A
  2876: 6880           r24 |= 0x80
  2878: bd84           PORT.TCCR0A := r24
  287a: bdc7           PORT.OCR0A := r28
  287c: c05e           jmp 0x293a <_loc_293a>
_loc_287e:
  287e: b584           r24 := PORT.TCCR0A
  2880: 6280           r24 |= 0x20
  2882: bd84           PORT.TCCR0A := r24
  2884: bdc8           PORT.OCR0B := r28
  2886: c059           jmp 0x293a <_loc_293a>
_loc_2888:
  2888: 9180 0080      r24 := SRAM.TCCR1A
  288c: 6880           r24 |= 0x80
  288e: 9380 0080      SRAM.TCCR1A := r24
  2892: 93d0 0089      SRAM.OCR1AH := r29
  2896: 93c0 0088      SRAM.OCR1AL := r28
  289a: c04f           jmp 0x293a <_loc_293a>
_loc_289c:
  289c: 9180 0080      r24 := SRAM.TCCR1A
  28a0: 6280           r24 |= 0x20
  28a2: 9380 0080      SRAM.TCCR1A := r24
  28a6: 93d0 008b      SRAM.OCR1BH := r29
  28aa: 93c0 008a      SRAM.OCR1BL := r28
  28ae: c045           jmp 0x293a <_loc_293a>
_loc_28b0:
  28b0: 9180 0090      r24 := SRAM.TCCR3A
  28b4: 6880           r24 |= 0x80
  28b6: 9380 0090      SRAM.TCCR3A := r24
  28ba: 93d0 0099      SRAM.OCR3AH := r29
  28be: 93c0 0098      SRAM.OCR3AL := r28
  28c2: c03b           jmp 0x293a <_loc_293a>
_loc_28c4:
  28c4: 9180 0090      r24 := SRAM.TCCR3A
  28c8: 6280           r24 |= 0x20
  28ca: 9380 0090      SRAM.TCCR3A := r24
  28ce: 93d0 009b      SRAM.OCR3BH := r29
  28d2: 93c0 009a      SRAM.OCR3BL := r28
  28d6: c031           jmp 0x293a <_loc_293a>
_loc_28d8:
  28d8: 9180 0090      r24 := SRAM.TCCR3A
  28dc: 6088           r24 |= 8
  28de: 9380 0090      SRAM.TCCR3A := r24
  28e2: 93d0 009d      SRAM.OCR3CH := r29
  28e6: 93c0 009c      SRAM.OCR3CL := r28
  28ea: c027           jmp 0x293a <_loc_293a>
_loc_28ec:
  28ec: 9180 00c0      r24 := SRAM.TCCR4A
  28f0: 6880           r24 |= 0x80
  28f2: 9380 00c0      SRAM.TCCR4A := r24
  28f6: 9180 00c0      r24 := SRAM.TCCR4A
  28fa: 7b8f           r24 &= 0xbf
  28fc: 9380 00c0      SRAM.TCCR4A := r24
  2900: 93c0 00cf      SRAM.OCR4A := r28
  2904: c01a           jmp 0x293a <_loc_293a>
_loc_2906:
  2906: 9180 00c0      r24 := SRAM.TCCR4A
  290a: 6280           r24 |= 0x20
  290c: 9380 00c0      SRAM.TCCR4A := r24
  2910: 93c0 00d0      SRAM.OCR4B := r28
  2914: c012           jmp 0x293a <_loc_293a>
_loc_2916:
  2916: 9180 00c2      r24 := SRAM.TCCR4C
  291a: 6088           r24 |= 8
  291c: 9380 00c2      SRAM.TCCR4C := r24
  2920: 9180 00c2      r24 := SRAM.TCCR4C
  2924: 7f8b           r24 &= 0xfb
  2926: 9380 00c2      SRAM.TCCR4C := r24
  292a: 93c0 00d2      SRAM.OCR4D := r28
  292e: c005           jmp 0x293a <_loc_293a>
_loc_2930:
  2930: 38c0 05d1 f00c if(r29:r28 <s 0x80):jmp 0x2938 <_loc_2938>
  2936: cf86           jmp 0x2844 <_loc_2844>
_loc_2938:
  2938: cf80           jmp 0x283a <_loc_283a>
_loc_293a:
  293a: 91df           pop r29
  293c: 91cf           pop r28
  293e: 911f           pop r17
  2940: 9508           ret

TIMER0_OVF_vect:
  2942: 921f           push r1
  2944: 920f           push r0
  2946: b60f           r0 := PORT.SREG
  2948: 920f           push r0
  294a: 2411           r1 := 0
  294c: 932f           push r18
  294e: 933f           push r19
  2950: 938f           push r24
  2952: 939f           push r25
  2954: 93af           push r26
  2956: 93bf           push r27
  2958: 9180 082f      r24 := SRAM.timer0_millis_LL
  295c: 9190 0830      r25 := SRAM.timer0_millis_LH
  2960: 91a0 0831      r26 := SRAM.timer0_millis_HL
  2964: 91b0 0832      r27 := SRAM.timer0_millis_HH
  2968: 9130 082e      r19 := SRAM.timer0_fract
  296c: e023           r18 := 3
  296e: 0f23           r18 += r19
  2970: 372d f420      if(r18 >= 0x7d):jmp 0x297c <_loc_297c>
  2974: 9601 1da1 1db1 r27:r26:r25:r24 += 1
  297a: c005           jmp 0x2986 <_loc_2986>
_loc_297c:
  297c: e826           r18 := 0x86
  297e: 0f23           r18 += r19
  2980: 9602 1da1 1db1 r27:r26:r25:r24 += 2
_loc_2986:
  2986: 9320 082e      SRAM.timer0_fract := r18
  298a: 9380 082f      SRAM.timer0_millis_LL := r24
  298e: 9390 0830      SRAM.timer0_millis_LH := r25
  2992: 93a0 0831      SRAM.timer0_millis_HL := r26
  2996: 93b0 0832      SRAM.timer0_millis_HH := r27
  299a: 9180 0833      r24 := SRAM.timer0_overflow_count_LL
  299e: 9190 0834      r25 := SRAM.timer0_overflow_count_LH
  29a2: 91a0 0835      r26 := SRAM.timer0_overflow_count_HL
  29a6: 91b0 0836      r27 := SRAM.timer0_overflow_count_HH
  29aa: 9601 1da1 1db1 r27:r26:r25:r24 += 1
  29b0: 9380 0833      SRAM.timer0_overflow_count_LL := r24
  29b4: 9390 0834      SRAM.timer0_overflow_count_LH := r25
  29b8: 93a0 0835      SRAM.timer0_overflow_count_HL := r26
  29bc: 93b0 0836      SRAM.timer0_overflow_count_HH := r27
  29c0: 91bf           pop r27
  29c2: 91af           pop r26
  29c4: 919f           pop r25
  29c6: 918f           pop r24
  29c8: 913f           pop r19
  29ca: 912f           pop r18
  29cc: 900f           pop r0
  29ce: be0f           PORT.SREG := r0
  29d0: 900f           pop r0
  29d2: 901f           pop r1
  29d4: 9518           ret_int

unsigned long micros():
  29d6: b73f           r19 := PORT.SREG
  29d8: 94f8           Clear(I flag)
  29da: 9180 0833      r24 := SRAM.timer0_overflow_count_LL
  29de: 9190 0834      r25 := SRAM.timer0_overflow_count_LH
  29e2: 91a0 0835      r26 := SRAM.timer0_overflow_count_HL
  29e6: 91b0 0836      r27 := SRAM.timer0_overflow_count_HH
  29ea: b526           r18 := PORT.TCNT0
  29ec: 9ba8 c005      if_not(bit(PORT.TIFR0, 0)):jmp 0x29fa <_loc_29fa>
  29f0: 3f2f f019      if(r18 == 0xff):jmp 0x29fa <_loc_29fa>
  29f4: 9601 1da1 1db1 r27:r26:r25:r24 += 1
_loc_29fa:
  29fa: bf3f           PORT.SREG := r19
  29fc: 2fba           r27 := r26
  29fe: 2fa9           r26 := r25
  2a00: 2f98           r25 := r24
  2a02: 2788           r24 := 0
  2a04: 0f82 1d91 1da1 1db1 r27:r26:r25:r24 += 0:0:0:r18
  2a0c: 01bc           r23:r22 := r25:r24
  2a0e: 01cd           r25:r24 := r27:r26
  2a10: e042           r20 := 2
_loc_2a12:
  2a12: 0f66 1f77 1f88 1f99 r25:r24:r23:r22 *= 2
  2a1a: 954a           r20 --
  2a1c: f7d1           brne 0x2a12 <_loc_2a12>
  2a1e: 9508           ret

void delay(unsigned long ms):
  2a20: 92cf           push r12
  2a22: 92df           push r13
  2a24: 92ef           push r14
  2a26: 92ff           push r15
  2a28: 93cf           push r28
  2a2a: 93df           push r29
  2a2c: 016b           r13:r12 := r23:r22
  2a2e: 017c           r15:r14 := r25:r24
  2a30: 940e 14eb      call 0x29d6 <unsigned long micros()>
  2a34: 01eb           r29:r28 := r23:r22
_loc_2a36:
  2a36: 14c1 04d1 04e1 04f1 f079 if(r15:r14:r13:r12 == 0):jmp 0x2a5e <_loc_2a5e>
  2a40: 940e 14eb      call 0x29d6 <unsigned long micros()>
  2a44: 1b6c 0b7d      r23:r22 -= r29:r28
  2a48: 3e68           cmp r22, 0xe8
  2a4a: 4073           r23 -= 3+C
  2a4c: f3a0           if(r23 < 0):jmp 0x2a36 <_loc_2a36>
  2a4e: e081           r24 := 1
  2a50: 1ac8 08d1 08e1 08f1 r15:r14:r13:r12 -= 0:0:0:r24
  2a58: 51c8 4fdc      r29:r28 -= -0x3e8
  2a5c: cfec           jmp 0x2a36 <_loc_2a36>
_loc_2a5e:
  2a5e: 91df           pop r29
  2a60: 91cf           pop r28
  2a62: 90ff           pop r15
  2a64: 90ef           pop r14
  2a66: 90df           pop r13
  2a68: 90cf           pop r12
  2a6a: 9508           ret

void delayMicroseconds(unsigned int us):
  2a6c: 9701           r25:r24 -= 1
  2a6e: f039           breq 0x2a7e <_loc_2a7e>
  2a70: 0f88 1f99      r25:r24 *= 2
  2a74: 0f88 1f99      r25:r24 *= 2
  2a78: 9702           r25:r24 -= 2
_loc_2a7a:
  2a7a: 9701           r25:r24 -= 1
  2a7c: f7f1           brne 0x2a7a <_loc_2a7a>
_loc_2a7e:
  2a7e: 9508           ret

void init():
  2a80: 9478           Set(I flag)
  2a82: b584           r24 := PORT.TCCR0A
  2a84: 6082           r24 |= 2
  2a86: bd84           PORT.TCCR0A := r24
  2a88: b584           r24 := PORT.TCCR0A
  2a8a: 6081           r24 |= 1
  2a8c: bd84           PORT.TCCR0A := r24
  2a8e: b585           r24 := PORT.TCCR0B
  2a90: 6082           r24 |= 2
  2a92: bd85           PORT.TCCR0B := r24
  2a94: b585           r24 := PORT.TCCR0B
  2a96: 6081           r24 |= 1
  2a98: bd85           PORT.TCCR0B := r24
  2a9a: e6ee e0f0      r31:r30 := 0x6e (=TIMSK0)
  2a9e: 8180           r24 := *(r31:r30)
  2aa0: 6081           r24 |= 1
  2aa2: 8380           *(r31:r30) := r24
  2aa4: e8e1 e0f0      r31:r30 := 0x81 (=TCCR1B)
  2aa8: 8210           *(r31:r30) := 0
  2aaa: 8180           r24 := *(r31:r30)
  2aac: 6082           r24 |= 2
  2aae: 8380           *(r31:r30) := r24
  2ab0: 8180           r24 := *(r31:r30)
  2ab2: 6081           r24 |= 1
  2ab4: 8380           *(r31:r30) := r24
  2ab6: e8e0 e0f0      r31:r30 := 0x80 (=TCCR1A)
  2aba: 8180           r24 := *(r31:r30)
  2abc: 6081           r24 |= 1
  2abe: 8380           *(r31:r30) := r24
  2ac0: e9e1 e0f0      r31:r30 := 0x91 (=TCCR3B)
  2ac4: 8180           r24 := *(r31:r30)
  2ac6: 6082           r24 |= 2
  2ac8: 8380           *(r31:r30) := r24
  2aca: 8180           r24 := *(r31:r30)
  2acc: 6081           r24 |= 1
  2ace: 8380           *(r31:r30) := r24
  2ad0: e9e0 e0f0      r31:r30 := 0x90 (=TCCR3A)
  2ad4: 8180           r24 := *(r31:r30)
  2ad6: 6081           r24 |= 1
  2ad8: 8380           *(r31:r30) := r24
  2ada: ece1 e0f0      r31:r30 := 0xc1 (=TCCR4B)
  2ade: 8180           r24 := *(r31:r30)
  2ae0: 6084           r24 |= 4
  2ae2: 8380           *(r31:r30) := r24
  2ae4: 8180           r24 := *(r31:r30)
  2ae6: 6082           r24 |= 2
  2ae8: 8380           *(r31:r30) := r24
  2aea: 8180           r24 := *(r31:r30)
  2aec: 6081           r24 |= 1
  2aee: 8380           *(r31:r30) := r24
  2af0: ece3 e0f0      r31:r30 := 0xc3 (=TCCR4D)
  2af4: 8180           r24 := *(r31:r30)
  2af6: 6081           r24 |= 1
  2af8: 8380           *(r31:r30) := r24
  2afa: ece0 e0f0      r31:r30 := 0xc0 (=TCCR4A)
  2afe: 8180           r24 := *(r31:r30)
  2b00: 6082           r24 |= 2
  2b02: 8380           *(r31:r30) := r24
  2b04: ece2 e0f0      r31:r30 := 0xc2 (=TCCR4C)
  2b08: 8180           r24 := *(r31:r30)
  2b0a: 6081           r24 |= 1
  2b0c: 8380           *(r31:r30) := r24
  2b0e: e7ea e0f0      r31:r30 := 0x7a (=ADCSRA)
  2b12: 8180           r24 := *(r31:r30)
  2b14: 6084           r24 |= 4
  2b16: 8380           *(r31:r30) := r24
  2b18: 8180           r24 := *(r31:r30)
  2b1a: 6082           r24 |= 2
  2b1c: 8380           *(r31:r30) := r24
  2b1e: 8180           r24 := *(r31:r30)
  2b20: 6081           r24 |= 1
  2b22: 8380           *(r31:r30) := r24
  2b24: 8180           r24 := *(r31:r30)
  2b26: 6880           r24 |= 0x80
  2b28: 8380           *(r31:r30) := r24
  2b2a: 9508           ret

sub_2b2c:
  2b2c: e090           r25 := 0
  2b2e: 01fc           r31:r30 := r25:r24
  2b30: 9731           r31:r30 -= 1
  2b32: 30ee 05f1 f590 if(r31:r30 >= 14):jmp 0x2b9c <_loc_2b9c>
  2b38: 59ec 4fff      r31:r30 -= -0x64 (=PRR0)
  2b3c: 940c 1d96      jmp 0x3b2c <jump_indirect_to_PROG[r31:r30*2]>
_loc_2b40:
  2b40: 9180 0080      r24 := SRAM.TCCR1A
  2b44: 778f           r24 &= 0x7f
  2b46: c003           jmp 0x2b4e <_loc_2b4e>
_loc_2b48:
  2b48: 9180 0080      r24 := SRAM.TCCR1A
  2b4c: 7d8f           r24 &= 0xdf
_loc_2b4e:
  2b4e: 9380 0080      SRAM.TCCR1A := r24
  2b52: 9508           ret
_loc_2b54:
  2b54: b584           r24 := PORT.TCCR0A
  2b56: 778f           r24 &= 0x7f
  2b58: c002           jmp 0x2b5e <_loc_2b5e>
_loc_2b5a:
  2b5a: b584           r24 := PORT.TCCR0A
  2b5c: 7d8f           r24 &= 0xdf
_loc_2b5e:
  2b5e: bd84           PORT.TCCR0A := r24
  2b60: 9508           ret
_loc_2b62:
  2b62: 9180 0090      r24 := SRAM.TCCR3A
  2b66: 778f           r24 &= 0x7f
  2b68: c007           jmp 0x2b78 <_loc_2b78>
_loc_2b6a:
  2b6a: 9180 0090      r24 := SRAM.TCCR3A
  2b6e: 7d8f           r24 &= 0xdf
  2b70: c003           jmp 0x2b78 <_loc_2b78>
_loc_2b72:
  2b72: 9180 0090      r24 := SRAM.TCCR3A
  2b76: 7f87           r24 &= 0xf7
_loc_2b78:
  2b78: 9380 0090      SRAM.TCCR3A := r24
  2b7c: 9508           ret
_loc_2b7e:
  2b7e: 9180 00c0      r24 := SRAM.TCCR4A
  2b82: 778f           r24 &= 0x7f
  2b84: c003           jmp 0x2b8c <_loc_2b8c>
_loc_2b86:
  2b86: 9180 00c0      r24 := SRAM.TCCR4A
  2b8a: 7d8f           r24 &= 0xdf
_loc_2b8c:
  2b8c: 9380 00c0      SRAM.TCCR4A := r24
  2b90: 9508           ret
_loc_2b92:
  2b92: 9180 00c2      r24 := SRAM.TCCR4C
  2b96: 7f87           r24 &= 0xf7
  2b98: 9380 00c2      SRAM.TCCR4C := r24
_loc_2b9c:
  2b9c: 9508           ret

pinMode(r24=pin, r22=value):
  2b9e: 93cf           push r28
  2ba0: 93df           push r29
  2ba2: e090           r25 := 0
  2ba4: 01fc           r31:r30 := r25:r24
  2ba6: 5fee 4ffe      r31:r30 -= -0x102
  2baa: 9124           r18 := PROG[r31:r30]
  2bac: 01fc           r31:r30 := r25:r24
  2bae: 5ee0 4ffe      r31:r30 -= -0x120
  2bb2: 9184           r24 := PROG[r31:r30]
  2bb4: 2388 f161      if_not(r24):jmp 0x2c10 <_loc_2c10>
  2bb8: e090           r25 := 0
  2bba: 0f88 1f99      r25:r24 *= 2
  2bbe: 01fc           r31:r30 := r25:r24
  2bc0: 5be4 4ffe      r31:r30 -= -0x14c
  2bc4: 91c5           r28 := PROG[r31:r30 ++]
  2bc6: 91d4           r29 := PROG[r31:r30]
  2bc8: 01fc           r31:r30 := r25:r24
  2bca: 5ce2 4ffe      r31:r30 -= -0x13e
  2bce: 91a5           r26 := PROG[r31:r30 ++]
  2bd0: 91b4           r27 := PROG[r31:r30]
  2bd2: 1161 c009      if_not(r22 == 0):jmp 0x2be8 <_loc_2be8>
  2bd6: b79f           r25 := PORT.SREG
  2bd8: 94f8           Clear(I flag)
  2bda: 8188           r24 := *(r29:r28)
  2bdc: 9520           r18 := 0xff - r18
  2bde: 2382           r24 &= r18
  2be0: 8388           *(r29:r28) := r24
  2be2: 91ec           r30 := *(r27:r26)
  2be4: 232e           r18 &= r30
  2be6: c00b           jmp 0x2bfe <_loc_2bfe>
_loc_2be8:
  2be8: 3062 f461      if(r22 != 2):jmp 0x2c04 <_loc_2c04>
  2bec: b79f           r25 := PORT.SREG
  2bee: 94f8           Clear(I flag)
  2bf0: 8138           r19 := *(r29:r28)
  2bf2: 2f82           r24 := r18
  2bf4: 9580           r24 := 0xff - r24
  2bf6: 2383           r24 &= r19
  2bf8: 8388           *(r29:r28) := r24
  2bfa: 91ec           r30 := *(r27:r26)
  2bfc: 2b2e           r18 |= r30
_loc_2bfe:
  2bfe: 932c           *(r27:r26) := r18
  2c00: bf9f           PORT.SREG := r25
  2c02: c006           jmp 0x2c10 <_loc_2c10>
_loc_2c04:
  2c04: b78f           r24 := PORT.SREG
  2c06: 94f8           Clear(I flag)
  2c08: 81e8           r30 := *(r29:r28)
  2c0a: 2b2e           r18 |= r30
  2c0c: 8328           *(r29:r28) := r18
  2c0e: bf8f           PORT.SREG := r24
_loc_2c10:
  2c10: 91df           pop r29
  2c12: 91cf           pop r28
  2c14: 9508           ret

digitalWrite(r24=pin, r22=value):
  2c16: 931f           push r17
  2c18: 93cf           push r28
  2c1a: 93df           push r29
  2c1c: 2f28 e030      r19:r18 := 0:r24
  2c20: 01f9           r31:r30 := r19:r18
  2c22: 51ec 4fff      r31:r30 -= -0xe4 (=UDFNUML)
  2c26: 9184           r24 := PROG[r31:r30]
  2c28: 01f9           r31:r30 := r19:r18
  2c2a: 5fee 4ffe      r31:r30 -= -0x102
  2c2e: 91d4           r29 := PROG[r31:r30]
  2c30: 01f9           r31:r30 := r19:r18
  2c32: 5ee0 4ffe      r31:r30 -= -0x120
  2c36: 91c4           r28 := PROG[r31:r30]
  2c38: 23cc f0c9      if_not(r28):jmp 0x2c6e <_loc_2c6e>
  2c3c: 2f16           r17 := r22
  2c3e: 1181 940e 1596 if_not(r24 == 0):call 0x2b2c <sub_2b2c>
  2c44: 2fec e0f0      r31:r30 := 0:r28
  2c48: 0fee 1fff      r31:r30 *= 2
  2c4c: 5ce2 4ffe      r31:r30 -= -0x13e
  2c50: 91a5           r26 := PROG[r31:r30 ++]
  2c52: 91b4           r27 := PROG[r31:r30]
  2c54: b78f           r24 := PORT.SREG
  2c56: 94f8           Clear(I flag)
  2c58: 1111 c005      if_not(r17 == 0):jmp 0x2c66 <_loc_2c66>
  2c5c: 919c           r25 := *(r27:r26)
  2c5e: 2fed           r30 := r29
  2c60: 95e0           r30 := 0xff - r30
  2c62: 23e9           r30 &= r25
  2c64: c002           jmp 0x2c6a <_loc_2c6a>
_loc_2c66:
  2c66: 91ec           r30 := *(r27:r26)
  2c68: 2bed           r30 |= r29
_loc_2c6a:
  2c6a: 93ec           *(r27:r26) := r30
  2c6c: bf8f           PORT.SREG := r24
_loc_2c6e:
  2c6e: 91df           pop r29
  2c70: 91cf           pop r28
  2c72: 911f           pop r17
  2c74: 9508           ret

size_t Print::write(const uint8_t *buffer=r23:r22, size_t size):
  2c76: 92cf           push r12
  2c78: 92df           push r13
  2c7a: 92ef           push r14
  2c7c: 92ff           push r15
  2c7e: 930f           push r16
  2c80: 931f           push r17
  2c82: 93cf           push r28
  2c84: 93df           push r29
  2c86: 016c           r13:r12 := r25:r24
  2c88: 01eb           r29:r28 := r23:r22
  2c8a: 017b           r15:r14 := r23:r22
  2c8c: 0ee4 1ef5      r15:r14 += r21:r20
  2c90: e000 e010      r17:r16 := 0
_loc_2c94:
  2c94: 15ce 05df f061 if(r29:r28 == r15:r14):jmp 0x2cb2 <_loc_2cb2>
  2c9a: 9169           r22 := *(r29:r28 ++)
  2c9c: 01d6           r27:r26 := r13:r12
  2c9e: 91ed           r30 := *(r27:r26 ++)
  2ca0: 91fc           r31 := *(r27:r26)
  2ca2: 9001           r0 := *(r31:r30 ++)
  2ca4: 81f0           r31 := *(r31:r30)
  2ca6: 2de0           r30 := r0
  2ca8: 01c6           r25:r24 := r13:r12
  2caa: 9509           icall r31:r30
  2cac: 0f08 1f19      r17:r16 += r25:r24
  2cb0: cff1           jmp 0x2c94 <_loc_2c94>
_loc_2cb2:
  2cb2: 01c8           r25:r24 := r17:r16
  2cb4: 91df           pop r29
  2cb6: 91cf           pop r28
  2cb8: 911f           pop r17
  2cba: 910f           pop r16
  2cbc: 90ff           pop r15
  2cbe: 90ef           pop r14
  2cc0: 90df           pop r13
  2cc2: 90cf           pop r12
  2cc4: 9508           ret

size_t Print::write(const char *str):
  2cc6: 1561 0571 f079 if(r23:r22 == 0):jmp 0x2cea <_loc_2cea>
  2ccc: 01fb           r31:r30 := r23:r22
_loc_2cce:
  2cce: 9001           r0 := *(r31:r30 ++)
  2cd0: 2000 f7e9      if(r0):jmp 0x2cce <_loc_2cce>
  2cd4: 9731           r31:r30 -= 1
  2cd6: 01af           r21:r20 := r31:r30
  2cd8: 1b46 0b57      r21:r20 -= r23:r22
  2cdc: 01dc           r27:r26 := r25:r24
  2cde: 91ed           r30 := *(r27:r26 ++)
  2ce0: 91fc           r31 := *(r27:r26)
  2ce2: 8002           r0 := *(r31:r30 + 0x02)
  2ce4: 81f3           r31 := *(r31:r30 + 0x03)
  2ce6: 2de0           r30 := r0
  2ce8: 9409           ijmp r31:r30
_loc_2cea:
  2cea: e080 e090      r25:r24 := 0
  2cee: 9508           ret

size_t Print::print(const char str[]=r23:r22):
  2cf0: 940c 1663      jmp 0x2cc6 <size_t Print::write(const char *str)>

size_t Print::print(char c=r22):
  2cf4: 01dc           r27:r26 := r25:r24
  2cf6: 91ed           r30 := *(r27:r26 ++)
  2cf8: 91fc           r31 := *(r27:r26)
  2cfa: 9001           r0 := *(r31:r30 ++)
  2cfc: 81f0           r31 := *(r31:r30)
  2cfe: 2de0           r30 := r0
  2d00: 9409           ijmp r31:r30

size_t Print::println(void):
  2d02: 930f           push r16
  2d04: 931f           push r17
  2d06: 93cf           push r28
  2d08: 93df           push r29
  2d0a: 01ec           r29:r28 := r25:r24
  2d0c: e06d           r22 := 13
  2d0e: 940e 167a      call 0x2cf4 <size_t Print::print(char c=r22)>
  2d12: 018c           r17:r16 := r25:r24
  2d14: e06a           r22 := 10
  2d16: 01ce           r25:r24 := r29:r28
  2d18: 940e 167a      call 0x2cf4 <size_t Print::print(char c=r22)>
  2d1c: 0f80 1f91      r25:r24 += r17:r16
  2d20: 91df           pop r29
  2d22: 91cf           pop r28
  2d24: 911f           pop r17
  2d26: 910f           pop r16
  2d28: 9508           ret

size_t Print::println(const char c[]=r23:r22):
  2d2a: 930f           push r16
  2d2c: 931f           push r17
  2d2e: 93cf           push r28
  2d30: 93df           push r29
  2d32: 01ec           r29:r28 := r25:r24
  2d34: 940e 1663      call 0x2cc6 <size_t Print::write(const char *str)>
  2d38: 018c           r17:r16 := r25:r24
  2d3a: 01ce           r25:r24 := r29:r28
  2d3c: 940e 1681      call 0x2d02 <size_t Print::println(void)>
  2d40: 0f80 1f91      r25:r24 += r17:r16
  2d44: 91df           pop r29
  2d46: 91cf           pop r28
  2d48: 911f           pop r17
  2d4a: 910f           pop r16
  2d4c: 9508           ret

size_t Print::printNumber(unsigned long n=r23:r22:r21:r20, uint8_t base=r19:r18):
  2d4e: 928f           push r8
  2d50: 929f           push r9
  2d52: 92af           push r10
  2d54: 92bf           push r11
  2d56: 92cf           push r12
  2d58: 92df           push r13
  2d5a: 92ef           push r14
  2d5c: 92ff           push r15
  2d5e: 930f           push r16
  2d60: 931f           push r17
  2d62: 93cf           push r28
  2d64: 93df           push r29
  2d66: b7cd           r28 := PORT.SPL
  2d68: b7de           r29 := PORT.SPH
  2d6a: 97a1           r29:r28 -= 0x21
  2d6c: b60f           r0 := PORT.SREG
  2d6e: 94f8           Clear(I flag)
  2d70: bfde           PORT.SPH := r29
  2d72: be0f           PORT.SREG := r0
  2d74: bfcd           PORT.SPL := r28
  2d76: 016c           r13:r12 := r25:r24
  2d78: 2f14           r17 := r20
  2d7a: 2fe5           r30 := r21
  2d7c: 01cb           r25:r24 := r23:r22
  2d7e: 2f02           r16 := r18
  2d80: a219           *(r29:r28 + 0x21) := 0
  2d82: 3022 f408      if(r18 >= 2):jmp 0x2d88 <_loc_2d88>
  2d86: e00a           r16 := 10
_loc_2d88:
  2d88: 017e           r15:r14 := r29:r28
  2d8a: e221           r18 := 0x21
  2d8c: 0ee2 1cf1      r15:r14 += 0:r18
  2d90: 2e80 2c91      r9:r8 := 0:r16
  2d94: 2ca1 2cb1      r11:r10 := 0
_loc_2d98:
  2d98: 2f61           r22 := r17
  2d9a: 2f7e           r23 := r30
  2d9c: 01a5           r21:r20 := r11:r10
  2d9e: 0194           r19:r18 := r9:r8
  2da0: 940e 1d55      call 0x3aaa <libgcc.udivmodsi4(dividend=r25:r24:r23:r22, divisor=r21:r20:r19:r18)->r25:r24:r23:r22=r,r21:r20:r19:r18=q>
  2da4: 9f02           r1:r0 := r16 * r18
  2da6: 1910           r17 -= r0
  2da8: 2411           r1 := 0
  2daa: e081           r24 := 1
  2dac: 1ae8 08f1      r15:r14 -= 0:r24
  2db0: 301a f414      if(r17 >=s 10):jmp 0x2db8 <_loc_2db8>
  2db4: 5d10           r17 -= -0x30
  2db6: c001           jmp 0x2dba <_loc_2dba>
_loc_2db8:
  2db8: 5c19           r17 -= -0x37
_loc_2dba:
  2dba: 01f7           r31:r30 := r15:r14
  2dbc: 8310           *(r31:r30) := r17
  2dbe: 2f12           r17 := r18
  2dc0: 2fe3           r30 := r19
  2dc2: 01ca           r25:r24 := r21:r20
  2dc4: 2b23           r18 |= r19
  2dc6: 2b24           r18 |= r20
  2dc8: 2b25           r18 |= r21
  2dca: f731           brne 0x2d98 <_loc_2d98>
  2dcc: 01b7           r23:r22 := r15:r14
  2dce: 01c6           r25:r24 := r13:r12
  2dd0: 940e 1663      call 0x2cc6 <size_t Print::write(const char *str)>
  2dd4: 96a1           r29:r28 += 0x21
  2dd6: b60f           r0 := PORT.SREG
  2dd8: 94f8           Clear(I flag)
  2dda: bfde           PORT.SPH := r29
  2ddc: be0f           PORT.SREG := r0
  2dde: bfcd           PORT.SPL := r28
  2de0: 91df           pop r29
  2de2: 91cf           pop r28
  2de4: 911f           pop r17
  2de6: 910f           pop r16
  2de8: 90ff           pop r15
  2dea: 90ef           pop r14
  2dec: 90df           pop r13
  2dee: 90cf           pop r12
  2df0: 90bf           pop r11
  2df2: 90af           pop r10
  2df4: 909f           pop r9
  2df6: 908f           pop r8
  2df8: 9508           ret

size_t Print::print(long n=r23:r22:r21:r20, int base=r19:r18):
  2dfa: 92cf           push r12
  2dfc: 92df           push r13
  2dfe: 92ef           push r14
  2e00: 92ff           push r15
  2e02: 930f           push r16
  2e04: 931f           push r17
  2e06: 93cf           push r28
  2e08: 93df           push r29
  2e0a: 01ec           r29:r28 := r25:r24
  2e0c: 016a           r13:r12 := r21:r20
  2e0e: 017b           r15:r14 := r23:r22
  2e10: 1521 0531 f479 if(r19:r18 != 0):jmp 0x2e34 <_loc_2e34>
  2e16: 81e8           r30 := *(r29:r28)
  2e18: 81f9           r31 := *(r29:r28 + 0x01)
  2e1a: 9001           r0 := *(r31:r30 ++)
  2e1c: 81f0           r31 := *(r31:r30)
  2e1e: 2de0           r30 := r0
  2e20: 2f64           r22 := r20
  2e22: 91df           pop r29
  2e24: 91cf           pop r28
  2e26: 911f           pop r17
  2e28: 910f           pop r16
  2e2a: 90ff           pop r15
  2e2c: 90ef           pop r14
  2e2e: 90df           pop r13
  2e30: 90cf           pop r12
  2e32: 9409           ijmp r31:r30
_loc_2e34:
  2e34: 302a 0531 f4e9 if(r19:r18 != 10):jmp 0x2e74 <_loc_2e74>
  2e3a: ff77 c01a      if_not(bit(r23, 7)):jmp 0x2e72 <_loc_2e72>
  2e3e: e26d           r22 := 0x2d
  2e40: 940e 167a      call 0x2cf4 <size_t Print::print(char c=r22)>
  2e44: 018c           r17:r16 := r25:r24
  2e46: 2744 2755      r21:r20 := 0
  2e4a: 01ba           r23:r22 := r21:r20
  2e4c: 194c 095d 096e 097f r23:r22:r21:r20 -= r15:r14:r13:r12
  2e54: e02a           r18 := 10
  2e56: 01ce           r25:r24 := r29:r28
  2e58: 940e 16a7      call 0x2d4e <size_t Print::printNumber(unsigned long n=r23:r22:r21:r20, uint8_t base=r19:r18)>
  2e5c: 0f80 1f91      r25:r24 += r17:r16
  2e60: 91df           pop r29
  2e62: 91cf           pop r28
  2e64: 911f           pop r17
  2e66: 910f           pop r16
  2e68: 90ff           pop r15
  2e6a: 90ef           pop r14
  2e6c: 90df           pop r13
  2e6e: 90cf           pop r12
  2e70: 9508           ret
_loc_2e72:
  2e72: e02a           r18 := 10
_loc_2e74:
  2e74: 01b7           r23:r22 := r15:r14
  2e76: 01a6           r21:r20 := r13:r12
  2e78: 01ce           r25:r24 := r29:r28
  2e7a: 91df           pop r29
  2e7c: 91cf           pop r28
  2e7e: 911f           pop r17
  2e80: 910f           pop r16
  2e82: 90ff           pop r15
  2e84: 90ef           pop r14
  2e86: 90df           pop r13
  2e88: 90cf           pop r12
  2e8a: 940c 16a7      jmp 0x2d4e <size_t Print::printNumber(unsigned long n=r23:r22:r21:r20, uint8_t base=r19:r18)>

size_t Print::print(unsigned int n=r23:r22, int base=r21:r20):
  2e8e: 019a           r19:r18 := r21:r20
  2e90: 01ab           r21:r20 := r23:r22
  2e92: 2766           r22 := 0
  2e94: fd57           skip_if_not(bit(r21, 7))
  2e96: 9560           r22 := 0xff - r22
  2e98: 2f76           r23 := r22
  2e9a: 940c 16fd      jmp 0x2dfa <size_t Print::print(long n=r23:r22:r21:r20, int base=r19:r18)>

size_t Print::print(unsigned long n=r23:r22:r21:r20, int base=r19:r18):
  2e9e: 1521 0531 f441 if(r19:r18 != 0):jmp 0x2eb4 <_loc_2eb4>
  2ea4: 01dc           r27:r26 := r25:r24
  2ea6: 91ed           r30 := *(r27:r26 ++)
  2ea8: 91fc           r31 := *(r27:r26)
  2eaa: 9001           r0 := *(r31:r30 ++)
  2eac: 81f0           r31 := *(r31:r30)
  2eae: 2de0           r30 := r0
  2eb0: 2f64           r22 := r20
  2eb2: 9409           ijmp r31:r30
_loc_2eb4:
  2eb4: 940c 16a7      jmp 0x2d4e <size_t Print::printNumber(unsigned long n=r23:r22:r21:r20, uint8_t base=r19:r18)>

size_t Print::println(unsigned long num, int base):
  2eb8: 930f           push r16
  2eba: 931f           push r17
  2ebc: 93cf           push r28
  2ebe: 93df           push r29
  2ec0: 01ec           r29:r28 := r25:r24
  2ec2: 940e 174f      call 0x2e9e <size_t Print::print(unsigned long n=r23:r22:r21:r20, int base=r19:r18)>
  2ec6: 018c           r17:r16 := r25:r24
  2ec8: 01ce           r25:r24 := r29:r28
  2eca: 940e 1681      call 0x2d02 <size_t Print::println(void)>
  2ece: 0f80 1f91      r25:r24 += r17:r16
  2ed2: 91df           pop r29
  2ed4: 91cf           pop r28
  2ed6: 911f           pop r17
  2ed8: 910f           pop r16
  2eda: 9508           ret

int Serial?::available():
  2edc: 9180 0885      r24 := SRAM.Serial_._rx_buffer_head_L
  2ee0: 9190 0886      r25 := SRAM.Serial_._rx_buffer_head_H
  2ee4: 9120 0887      r18 := SRAM.Serial_._rx_buffer_tail_L
  2ee8: 9130 0888      r19 := SRAM.Serial_._rx_buffer_head_H
  2eec: 1b82 0b93      r25:r24 -= r19:r18
  2ef0: 738f           r24 &= 0x3f
  2ef2: 2799           r25 := 0
  2ef4: 9508           ret

int Serial?::peek():
  2ef6: 9120 0885      r18 := SRAM.Serial_._rx_buffer_head_L
  2efa: 9130 0886      r19 := SRAM.Serial_._rx_buffer_head_H
  2efe: 9180 0887      r24 := SRAM.Serial_._rx_buffer_tail_L
  2f02: 9190 0888      r25 := SRAM.Serial_._rx_buffer_head_H
  2f06: 1728 0739 f049 if(r19:r18 == r25:r24):jmp 0x2f1e <_loc_2f1e>
  2f0c: 91e0 0887      r30 := SRAM.Serial_._rx_buffer_tail_L
  2f10: 91f0 0888      r31 := SRAM.Serial_._rx_buffer_head_H
  2f14: 5beb 4ff7      r31:r30 -= -0x845 (=Serial_._rx_buffer[0])
  2f18: 8180           r24 := *(r31:r30)
  2f1a: e090           r25 := 0
  2f1c: 9508           ret
_loc_2f1e:
  2f1e: ef8f ef9f      r25:r24 := 0xffff
  2f22: 9508           ret

int Serial?::read():
  2f24: 9120 0885      r18 := SRAM.Serial_._rx_buffer_head_L
  2f28: 9130 0886      r19 := SRAM.Serial_._rx_buffer_head_H
  2f2c: 9180 0887      r24 := SRAM.Serial_._rx_buffer_tail_L
  2f30: 9190 0888      r25 := SRAM.Serial_._rx_buffer_head_H
  2f34: 1728 0739 f0a9 if(r19:r18 == r25:r24):jmp 0x2f64 <_loc_2f64>
  2f3a: 91e0 0887      r30 := SRAM.Serial_._rx_buffer_tail_L
  2f3e: 91f0 0888      r31 := SRAM.Serial_._rx_buffer_head_H
  2f42: 5beb 4ff7      r31:r30 -= -0x845 (=Serial_._rx_buffer[0])
  2f46: 8180           r24 := *(r31:r30)
  2f48: 9120 0887      r18 := SRAM.Serial_._rx_buffer_tail_L
  2f4c: 9130 0888      r19 := SRAM.Serial_._rx_buffer_head_H
  2f50: 5f2f 4f3f      r19:r18 -= -1
  2f54: 732f           r18 &= 0x3f
  2f56: 2733           r19 := 0
  2f58: 9330 0888      SRAM.Serial_._rx_buffer_head_H := r19
  2f5c: 9320 0887      SRAM.Serial_._rx_buffer_tail_L := r18
  2f60: e090           r25 := 0
  2f62: 9508           ret
_loc_2f64:
  2f64: ef8f ef9f      r25:r24 := 0xffff
  2f68: 9508           ret

Serial.?(vtable6):
  2f6a: 93cf           push r28
  2f6c: 93df           push r29
_loc_2f6e:
  2f6e: 91c0 0885      r28 := SRAM.Serial_._rx_buffer_head_L
  2f72: 91d0 0886      r29 := SRAM.Serial_._rx_buffer_head_H
  2f76: 9621           r29:r28 += 1
  2f78: 73cf           r28 &= 0x3f
  2f7a: 27dd           r29 := 0
  2f7c: 9180 0887      r24 := SRAM.Serial_._rx_buffer_tail_L
  2f80: 9190 0888      r25 := SRAM.Serial_._rx_buffer_head_H
  2f84: 17c8 07d9 f099 if(r29:r28 == r25:r24):jmp 0x2fb0 <_loc_2fb0>
  2f8a: e082           r24 := 2
  2f8c: 940e 18f3      call 0x31e6 <sub_31e6>
  2f90: 3f8f           cmp r24, 0xff
  2f92: ef2f           r18 := 0xff
  2f94: 0792           cmp_carry r25, r18
  2f96: f061           breq 0x2fb0 <_loc_2fb0>
  2f98: 91e0 0885      r30 := SRAM.Serial_._rx_buffer_head_L
  2f9c: 91f0 0886      r31 := SRAM.Serial_._rx_buffer_head_H
  2fa0: 5beb 4ff7      r31:r30 -= -0x845 (=Serial_._rx_buffer[0])
  2fa4: 8380           *(r31:r30) := r24
  2fa6: 93d0 0886      SRAM.Serial_._rx_buffer_head_H := r29
  2faa: 93c0 0885      SRAM.Serial_._rx_buffer_head_L := r28
  2fae: cfdf           jmp 0x2f6e <_loc_2f6e>
_loc_2fb0:
  2fb0: 91df           pop r29
  2fb2: 91cf           pop r28
  2fb4: 9508           ret

void Serial_::flush(void):
  2fb6: e083           r24 := 3
  2fb8: 940c 1b5a      jmp 0x36b4 <void USB_Flush(uint8_t ep)>

size_t Serial_::write(uint8_t c):
  2fbc: 930f           push r16
  2fbe: 931f           push r17
  2fc0: 93cf           push r28
  2fc2: 93df           push r29
  2fc4: 921f           push r1
  2fc6: b7cd           r28 := PORT.SPL
  2fc8: b7de           r29 := PORT.SPH
  2fca: 018c           r17:r16 := r25:r24
  2fcc: 8369           *(r29:r28 + 0x01) := r22
  2fce: 9180 010f      r24 := SRAM.0x010f
  2fd2: 2388 f059      if_not(r24):jmp 0x2fec <_loc_2fec>
  2fd6: e041 e050      r21:r20 := 1
  2fda: 01be           r23:r22 := r29:r28
  2fdc: 5f6f 4f7f      r23:r22 -= -1
  2fe0: e083           r24 := 3
  2fe2: 940e 1924      call 0x3248 <size_t Serial_::write(const uint8_t *buffer, size_t size)>
  2fe6: 1618 0619 f03c if(0 <s r25:r24):jmp 0x2ffa <_loc_2ffa>
_loc_2fec:
  2fec: e081 e090      r25:r24 := 1
  2ff0: 01f8           r31:r30 := r17:r16
  2ff2: 8393           *(r31:r30 + 0x03) := r25
  2ff4: 8382           *(r31:r30 + 0x02) := r24
  2ff6: e080 e090      r25:r24 := 0
_loc_2ffa:
  2ffa: 900f           pop r0
  2ffc: 91df           pop r29
  2ffe: 91cf           pop r28
  3000: 911f           pop r17
  3002: 910f           pop r16
  3004: 9508           ret

sub_3006:
  3006: 01fc           r31:r30 := r25:r24
  3008: 8190           r25 := *(r31:r30)
  300a: 5f9e           r25 -= -2
  300c: 8390           *(r31:r30) := r25
  300e: e442 e050      r21:r20 := 0x42
  3012: e56a e071      r23:r22 := 0x15a
  3016: e880           r24 := 0x80
  3018: 940c 19bc      jmp 0x3378 <_loc_3378>

sub_301c:
  301c: 01fc           r31:r30 := r25:r24
  301e: 8181           r24 := *(r31:r30 + 0x01)
  3020: 8190           r25 := *(r31:r30)
  3022: 3a91 f459      if(r25 != 0xa1):jmp 0x303c <_loc_303c>
  3026: 3281 f009      if(r24 == 0x21):jmp 0x302c <_loc_302c>
  302a: c04b           jmp 0x30c2 <_loc_30c2>
_loc_302c:
  302c: e047 e050      r21:r20 := 7
  3030: e068 e071      r23:r22 := 0x108
  3034: e080           r24 := 0
  3036: 940e 19bc      call 0x3378 <_loc_3378>
  303a: c045           jmp 0x30c6 <_loc_30c6>
_loc_303c:
  303c: 3291 f009      if(r25 == 0x21):jmp 0x3042 <_loc_3042>
  3040: c040           jmp 0x30c2 <_loc_30c2>
_loc_3042:
  3042: 3280 f439      if(r24 != 0x20):jmp 0x3054 <_loc_3054>
  3046: e067 e070      r23:r22 := 7
  304a: e088 e091      r25:r24 := 0x108
  304e: 940e 1a03      call 0x3406 <sub_3406>
  3052: c039           jmp 0x30c6 <_loc_30c6>
_loc_3054:
  3054: 3282 f009      if(r24 == 0x22):jmp 0x305a <_loc_305a>
  3058: c034           jmp 0x30c2 <_loc_30c2>
_loc_305a:
  305a: 8182           r24 := *(r31:r30 + 0x02)
  305c: 9380 010f      SRAM.0x010f := r24
  3060: 9180 0108      r24 := SRAM.0x0108
  3064: 9190 0109      r25 := SRAM.0x0109
  3068: 91a0 010a      r26 := SRAM.0x010a
  306c: 91b0 010b      r27 := SRAM.0x010b
  3070: 3b80           cmp r24, 0xb0
  3072: 4094           r25 -= 4+C
  3074: 05a1 05b1      cmp_carry r27:r26, 0
  3078: f531           brne 0x30c6 <_loc_30c6>
  307a: 9180 010f      r24 := SRAM.0x010f
  307e: fd80 c012      if(bit(r24, 0)):jmp 0x30a6 <_loc_30a6>
  3082: e787 e797      r25:r24 := 0x7777
  3086: 9390 0801      SRAM.0x0801 := r25
  308a: 9380 0800      SRAM.0x0800 := r24
  308e: e02b           r18 := 11
  3090: e188 e090      r25:r24 := 0x18
  3094: b60f           r0 := PORT.SREG
  3096: 94f8           Clear(I flag)
  3098: 95a8           watchdog_reset
  309a: 9380 0060      SRAM.WDTCSR := r24
  309e: be0f           PORT.SREG := r0
  30a0: 9320 0060      SRAM.WDTCSR := r18
  30a4: c010           jmp 0x30c6 <_loc_30c6>
_loc_30a6:
  30a6: e188           r24 := 0x18
  30a8: b60f           r0 := PORT.SREG
  30aa: 94f8           Clear(I flag)
  30ac: 9380 0060      SRAM.WDTCSR := r24
  30b0: 9210 0060      SRAM.WDTCSR := 0
  30b4: be0f           PORT.SREG := r0
  30b6: 95a8           watchdog_reset
  30b8: 9210 0801      SRAM.0x0801 := 0
  30bc: 9210 0800      SRAM.0x0800 := 0
  30c0: c002           jmp 0x30c6 <_loc_30c6>
_loc_30c2:
  30c2: e080           r24 := 0
  30c4: 9508           ret
_loc_30c6:
  30c6: e081           r24 := 1
  30c8: 9508           ret

Serial.nullsub:
  30ca: 9508           ret

cons2_Serial:
  30cc: e3e7 e0f8      r31:r30 := 0x837 (=Serial)
  30d0: 8213           *(r31:r30 + 0x03) := 0
  30d2: 8212           *(r31:r30 + 0x02) := 0
  30d4: ee88 e093      r25:r24 := 0x3e8
  30d8: e0a0 e0b0      r27:r26 := 0
  30dc: 8384           *(r31:r30 + 0x04) := r24
  30de: 8395           *(r31:r30 + 0x05) := r25
  30e0: 83a6           *(r31:r30 + 0x06) := r26
  30e2: 83b7           *(r31:r30 + 0x07) := r27
  30e4: e38d e096      r25:r24 := 0x63d (=Serial_vtable)
  30e8: 8391           *(r31:r30 + 0x01) := r25
  30ea: 8380           *(r31:r30) := r24
  30ec: 9508           ret

main():
  30ee: 940e 1540      call 0x2a80 <void init()>
  30f2: e889 e098      r25:r24 := 0x889 (=UsbDevice)
  30f6: 940e 1b64      call 0x36c8 <USBDevice.attach>
  30fa: 940e 0c9e      call 0x193c <setup()>
  30fe: e0c0 e0d0      r29:r28 := 0
_loc_3102:
  3102: 940e 0d00      call 0x1a00 <loop()>
  3106: 9720 f3e1      if(r29:r28 == 0):jmp 0x3102 <_loc_3102>
  310a: 940e 0000      call 0x0000 <int0_reset_vect>
  310e: cff9           jmp 0x3102 <_loc_3102>

sub_3110:
  3110: 5061           r22 -= 1
  3112: f030           if(r22 < 0):jmp 0x3120 <_loc_3120>
  3114: 9120 00f1      r18 := SRAM.UEDATX
  3118: 01fc           r31:r30 := r25:r24
  311a: 8320           *(r31:r30) := r18
  311c: 9601           r25:r24 += 1
  311e: cff8           jmp 0x3110 <sub_3110>
_loc_3120:
  3120: 9a28           set_bit(PORT.PORTB, 0)
  3122: e684           r24 := 0x64
  3124: 9380 0890      SRAM.0x0890 := r24
  3128: 9508           ret

sub_312a:
  312a: b72f           r18 := PORT.SREG
  312c: 01fc           r31:r30 := r25:r24
  312e: 8320           *(r31:r30) := r18
  3130: 94f8           Clear(I flag)
  3132: 7067           r22 &= 7
  3134: 9360 00e9      SRAM.UENUM := r22
  3138: 9508           ret

sub_313a:
  313a: 93cf           push r28
  313c: 93df           push r29
  313e: 921f           push r1
  3140: b7cd           r28 := PORT.SPL
  3142: b7de           r29 := PORT.SPH
  3144: 2f68           r22 := r24
  3146: 01ce           r25:r24 := r29:r28
  3148: 9601           r25:r24 += 1
  314a: 940e 1895      call 0x312a <sub_312a>
  314e: 9180 00f2      r24 := SRAM.UEBCLX
  3152: 8199           r25 := *(r29:r28 + 0x01)
  3154: bf9f           PORT.SREG := r25
  3156: 900f           pop r0
  3158: 91df           pop r29
  315a: 91cf           pop r28
  315c: 9508           ret

sub_315e:
  315e: 92ef           push r14
  3160: 92ff           push r15
  3162: 930f           push r16
  3164: 931f           push r17
  3166: 93cf           push r28
  3168: 93df           push r29
  316a: 921f           push r1
  316c: b7cd           r28 := PORT.SPL
  316e: b7de           r29 := PORT.SPH
  3170: 9190 088f      r25 := SRAM.0x088f
  3174: 2399 f011      if_not(r25):jmp 0x317c <_loc_317c>
  3178: ff57 c003      if_not(bit(r21, 7)):jmp 0x3182 <_loc_3182>
_loc_317c:
  317c: ef8f ef9f      r25:r24 := 0xffff
  3180: c02a           jmp 0x31d6 <_loc_31d6>
_loc_3182:
  3182: 018a           r17:r16 := r21:r20
  3184: 017b           r15:r14 := r23:r22
  3186: 2f68           r22 := r24
  3188: 01ce           r25:r24 := r29:r28
  318a: 9601           r25:r24 += 1
  318c: 940e 1895      call 0x312a <sub_312a>
  3190: 9180 00f2      r24 := SRAM.UEBCLX
  3194: e090           r25 := 0
  3196: 01a8           r21:r20 := r17:r16
  3198: 1780 0791 f40c if(r25:r24 >=s r17:r16):jmp 0x31a0 <_loc_31a0>
  319e: 01ac           r21:r20 := r25:r24
_loc_31a0:
  31a0: 2f84           r24 := r20
  31a2: 01f7           r31:r30 := r15:r14
  31a4: e694           r25 := 0x64
_loc_31a6:
  31a6: 5081           r24 -= 1
  31a8: f038           if(r24 < 0):jmp 0x31b8 <_loc_31b8>
  31aa: 9a28           set_bit(PORT.PORTB, 0)
  31ac: 9390 0890      SRAM.0x0890 := r25
  31b0: 9120 00f1      r18 := SRAM.UEDATX
  31b4: 9321           *(r31:r30 ++) := r18
  31b6: cff7           jmp 0x31a6 <_loc_31a6>
_loc_31b8:
  31b8: 1541 0551 f021 if(r21:r20 == 0):jmp 0x31c6 <_loc_31c6>
  31be: 9180 00f2      r24 := SRAM.UEBCLX
  31c2: 2388 f021      if_not(r24):jmp 0x31ce <_loc_31ce>
_loc_31c6:
  31c6: 8189           r24 := *(r29:r28 + 0x01)
  31c8: bf8f           PORT.SREG := r24
  31ca: 01ca           r25:r24 := r21:r20
  31cc: c004           jmp 0x31d6 <_loc_31d6>
_loc_31ce:
  31ce: e68b           r24 := 0x6b
  31d0: 9380 00e8      SRAM.UEINTX := r24
  31d4: cff8           jmp 0x31c6 <_loc_31c6>
_loc_31d6:
  31d6: 900f           pop r0
  31d8: 91df           pop r29
  31da: 91cf           pop r28
  31dc: 911f           pop r17
  31de: 910f           pop r16
  31e0: 90ff           pop r15
  31e2: 90ef           pop r14
  31e4: 9508           ret

sub_31e6:
  31e6: 93cf           push r28
  31e8: 93df           push r29
  31ea: 921f           push r1
  31ec: b7cd           r28 := PORT.SPL
  31ee: b7de           r29 := PORT.SPH
  31f0: e041 e050      r21:r20 := 1
  31f4: 01be           r23:r22 := r29:r28
  31f6: 5f6f 4f7f      r23:r22 -= -1
  31fa: 940e 18af      call 0x315e <sub_315e>
  31fe: 9701           r25:r24 -= 1
  3200: f419           brne 0x3208 <_loc_3208>
  3202: 8189           r24 := *(r29:r28 + 0x01)
  3204: e090           r25 := 0
  3206: c002           jmp 0x320c <_loc_320c>
_loc_3208:
  3208: ef8f ef9f      r25:r24 := 0xffff
_loc_320c:
  320c: 900f           pop r0
  320e: 91df           pop r29
  3210: 91cf           pop r28
  3212: 9508           ret

sub_3214:
  3214: 93cf           push r28
  3216: 93df           push r29
  3218: 921f           push r1
  321a: b7cd           r28 := PORT.SPL
  321c: b7de           r29 := PORT.SPH
  321e: 2f68           r22 := r24
  3220: 01ce           r25:r24 := r29:r28
  3222: 9601           r25:r24 += 1
  3224: 940e 1895      call 0x312a <sub_312a>
  3228: 9190 00e8      r25 := SRAM.UEINTX
  322c: 2f89           r24 := r25
  322e: 7280           r24 &= 0x20
  3230: ff95 c004      if_not(bit(r25, 5)):jmp 0x323c <_loc_323c>
  3234: 9190 00f2      r25 := SRAM.UEBCLX
  3238: e480           r24 := 0x40
  323a: 1b89           r24 -= r25
_loc_323c:
  323c: 8199           r25 := *(r29:r28 + 0x01)
  323e: bf9f           PORT.SREG := r25
  3240: 900f           pop r0
  3242: 91df           pop r29
  3244: 91cf           pop r28
  3246: 9508           ret

size_t Serial_::write(const uint8_t *buffer, size_t size):
  3248: 924f           push r4
  324a: 925f           push r5
  324c: 926f           push r6
  324e: 927f           push r7
  3250: 928f           push r8
  3252: 929f           push r9
  3254: 92af           push r10
  3256: 92bf           push r11
  3258: 92cf           push r12
  325a: 92df           push r13
  325c: 92ef           push r14
  325e: 92ff           push r15
  3260: 930f           push r16
  3262: 931f           push r17
  3264: 93cf           push r28
  3266: 93df           push r29
  3268: 921f           push r1
  326a: b7cd           r28 := PORT.SPL
  326c: b7de           r29 := PORT.SPH
  326e: 2ea8           r10 := r24
  3270: 016b           r13:r12 := r23:r22
  3272: 2eb4           r11 := r20
  3274: 2f05           r16 := r21
  3276: 9180 088f      r24 := SRAM.0x088f
  327a: 2388 f069      if_not(r24):jmp 0x3298 <_loc_3298>
  327e: 2ee4 2ef5      r15:r14 := r21:r20
  3282: ef8a           r24 := 0xfa
  3284: 2e78           r7 := r24
  3286: 2d8a           r24 := r10
  3288: 7280           r24 &= 0x20
  328a: 2e58           r5 := r24
  328c: e39a           r25 := 0x3a
  328e: 2e69           r6 := r25
  3290: 2d8a           r24 := r10
  3292: 7480           r24 &= 0x40
  3294: 2e48           r4 := r24
  3296: c012           jmp 0x32bc <_loc_32bc>
_loc_3298:
  3298: ef8f ef9f      r25:r24 := 0xffff
  329c: c050           jmp 0x333e <_loc_333e>
_loc_329e:
  329e: 2d8a           r24 := r10
  32a0: 940e 190a      call 0x3214 <sub_3214>
  32a4: 2f18           r17 := r24
  32a6: 1181 c00d      if_not(r24 == 0):jmp 0x32c4 <_loc_32c4>
  32aa: 947a           r7 --
  32ac: 2077 f3a1      if_not(r7):jmp 0x3298 <_loc_3298>
  32b0: e061 e070      r23:r22 := 1
  32b4: e080 e090      r25:r24 := 0
  32b8: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
_loc_32bc:
  32bc: 14e1 04f1 f771 if(r15:r14 != 0):jmp 0x329e <_loc_329e>
  32c2: c033           jmp 0x332a <_loc_332a>
_loc_32c4:
  32c4: e090           r25 := 0
  32c6: 16e8 06f9 f40c if(r15:r14 >=s r25:r24):jmp 0x32ce <_loc_32ce>
  32cc: 2d1e           r17 := r14
_loc_32ce:
  32ce: 2e81 2c91      r9:r8 := 0:r17
  32d2: 18e8 08f9      r15:r14 -= r9:r8
  32d6: 2d6a           r22 := r10
  32d8: 01ce           r25:r24 := r29:r28
  32da: 9601           r25:r24 += 1
  32dc: 940e 1895      call 0x312a <sub_312a>
  32e0: 2055 f029      if_not(r5):jmp 0x32ee <_loc_32ee>
_loc_32e4:
  32e4: 5011           r17 -= 1
  32e6: f0a8           if(r17 < 0):jmp 0x3312 <_loc_3312>
  32e8: 9210 00f1      SRAM.UEDATX := 0
  32ec: cffb           jmp 0x32e4 <_loc_32e4>
_loc_32ee:
  32ee: 01f6           r31:r30 := r13:r12
  32f0: fea7 c007      if_not(bit(r10, 7)):jmp 0x3302 <_loc_3302>
_loc_32f4:
  32f4: 5011           r17 -= 1
  32f6: f058           if(r17 < 0):jmp 0x330e <_loc_330e>
  32f8: 9184           r24 := PROG[r31:r30]
  32fa: 9380 00f1      SRAM.UEDATX := r24
  32fe: 9631           r31:r30 += 1
  3300: cff9           jmp 0x32f4 <_loc_32f4>
_loc_3302:
  3302: 5011           r17 -= 1
  3304: f020           if(r17 < 0):jmp 0x330e <_loc_330e>
  3306: 9181           r24 := *(r31:r30 ++)
  3308: 9380 00f1      SRAM.UEDATX := r24
  330c: cffa           jmp 0x3302 <_loc_3302>
_loc_330e:
  330e: 0cc8 1cd9      r13:r12 += r9:r8
_loc_3312:
  3312: 9180 00e8      r24 := SRAM.UEINTX
  3316: ff85 c00f      if_not(bit(r24, 5)):jmp 0x3338 <_loc_3338>
  331a: 14e1 04f1 f411 if(r15:r14 != 0):jmp 0x3324 <_loc_3324>
  3320: 1041 c00a      if_not(r4 == 0):jmp 0x3338 <_loc_3338>
_loc_3324:
  3324: 8189           r24 := *(r29:r28 + 0x01)
  3326: bf8f           PORT.SREG := r24
  3328: cfc9           jmp 0x32bc <_loc_32bc>
_loc_332a:
  332a: 9a5d           set_bit(PORT.PORTD, 5)
  332c: e684           r24 := 0x64
  332e: 9380 0891      SRAM.0x0891 := r24
  3332: 2d8b           r24 := r11
  3334: 2f90           r25 := r16
  3336: c003           jmp 0x333e <_loc_333e>
_loc_3338:
  3338: 9260 00e8      SRAM.UEINTX := r6
  333c: cff3           jmp 0x3324 <_loc_3324>
_loc_333e:
  333e: 900f           pop r0
  3340: 91df           pop r29
  3342: 91cf           pop r28
  3344: 911f           pop r17
  3346: 910f           pop r16
  3348: 90ff           pop r15
  334a: 90ef           pop r14
  334c: 90df           pop r13
  334e: 90cf           pop r12
  3350: 90bf           pop r11
  3352: 90af           pop r10
  3354: 909f           pop r9
  3356: 908f           pop r8
  3358: 907f           pop r7
  335a: 906f           pop r6
  335c: 905f           pop r5
  335e: 904f           pop r4
  3360: 9508           ret

sub_3362:
  3362: 9210 00e9      SRAM.UENUM := 0
  3366: 9210 088e      SRAM.0x088e := 0
  336a: 9210 088d      SRAM.0x088d := 0
  336e: 9390 088c      SRAM.0x088c := r25
  3372: 9380 088b      SRAM.0x088b := r24
  3376: 9508           ret
_loc_3378:
  3378: 930f           push r16
  337a: 931f           push r17
  337c: 93cf           push r28
  337e: 93df           push r29
  3380: 01db           r27:r26 := r23:r22
  3382: 0fa4 1fb5      r27:r26 += r21:r20
  3386: 01fb           r31:r30 := r23:r22
  3388: ef6e           r22 := 0xfe
_loc_338a:
  338a: 17ea 07fb f191 if(r31:r30 == r27:r26):jmp 0x33f4 <_loc_33f4>
  3390: ff87 c002      if_not(bit(r24, 7)):jmp 0x3398 <_loc_3398>
  3394: 9124           r18 := PROG[r31:r30]
  3396: c001           jmp 0x339a <_loc_339a>
_loc_3398:
  3398: 8120           r18 := *(r31:r30)
_loc_339a:
  339a: 9100 088d      r16 := SRAM.0x088d
  339e: 9110 088e      r17 := SRAM.0x088e
  33a2: 91c0 088b      r28 := SRAM.0x088b
  33a6: 91d0 088c      r29 := SRAM.0x088c
  33aa: 170c 071d f4b4 if(r17:r16 >=s r29:r28):jmp 0x33dc <_loc_33dc>
_loc_33b0:
  33b0: 9190 00e8      r25 := SRAM.UEINTX
  33b4: 7095           r25 &= 5
  33b6: f3e1           breq 0x33b0 <_loc_33b0>
  33b8: 9190 00e8      r25 := SRAM.UEINTX
  33bc: fd92 c01c      if(bit(r25, 2)):jmp 0x33f8 <_loc_33f8>
  33c0: 9320 00f1      SRAM.UEDATX := r18
  33c4: 9120 088d      r18 := SRAM.0x088d
  33c8: 9130 088e      r19 := SRAM.0x088e
  33cc: 5f2f 4f3f      r19:r18 -= -1
  33d0: 732f           r18 &= 0x3f
  33d2: 2733           r19 := 0
  33d4: 2b23           r18 |= r19
  33d6: f411           brne 0x33dc <_loc_33dc>
  33d8: 9360 00e8      SRAM.UEINTX := r22
_loc_33dc:
  33dc: 9120 088d      r18 := SRAM.0x088d
  33e0: 9130 088e      r19 := SRAM.0x088e
  33e4: 5f2f 4f3f      r19:r18 -= -1
  33e8: 9330 088e      SRAM.0x088e := r19
  33ec: 9320 088d      SRAM.0x088d := r18
  33f0: 9631           r31:r30 += 1
  33f2: cfcb           jmp 0x338a <_loc_338a>
_loc_33f4:
  33f4: 01ca           r25:r24 := r21:r20
  33f6: c002           jmp 0x33fc <_loc_33fc>
_loc_33f8:
  33f8: ef8f ef9f      r25:r24 := 0xffff
_loc_33fc:
  33fc: 91df           pop r29
  33fe: 91cf           pop r28
  3400: 911f           pop r17
  3402: 910f           pop r16
  3404: 9508           ret

sub_3406:
  3406: 931f           push r17
  3408: 93cf           push r28
  340a: 93df           push r29
  340c: 921f           push r1
  340e: b7cd           r28 := PORT.SPL
  3410: b7de           r29 := PORT.SPH
  3412: 2f16           r17 := r22
_loc_3414:
  3414: 9120 00e8      r18 := SRAM.UEINTX
  3418: ff22 cffc      if_not(bit(r18, 2)):jmp 0x3414 <_loc_3414>
  341c: 2f61           r22 := r17
  341e: 8379           *(r29:r28 + 0x01) := r23
  3420: 940e 1888      call 0x3110 <sub_3110>
  3424: ef8b           r24 := 0xfb
  3426: 9380 00e8      SRAM.UEINTX := r24
  342a: 2f81           r24 := r17
  342c: 8179           r23 := *(r29:r28 + 0x01)
  342e: 2f97           r25 := r23
  3430: 900f           pop r0
  3432: 91df           pop r29
  3434: 91cf           pop r28
  3436: 911f           pop r17
  3438: 9508           ret

sub_343a:
  343a: 93cf           push r28
  343c: 93df           push r29
  343e: 921f           push r1
  3440: b7cd           r28 := PORT.SPL
  3442: b7de           r29 := PORT.SPH
  3444: 8219           *(r29:r28 + 0x01) := 0
  3446: 01ce           r25:r24 := r29:r28
  3448: 9601           r25:r24 += 1
  344a: 940e 1803      call 0x3006 <sub_3006>
  344e: 01ce           r25:r24 := r29:r28
  3450: 9601           r25:r24 += 1
  3452: 940e 1c01      call 0x3802 <sub_3802>
  3456: 8189           r24 := *(r29:r28 + 0x01)
  3458: e090           r25 := 0
  345a: 900f           pop r0
  345c: 91df           pop r29
  345e: 91cf           pop r28
  3460: 9508           ret

int0b:
  3462: 921f           push r1
  3464: 920f           push r0
  3466: b60f           r0 := PORT.SREG
  3468: 920f           push r0
  346a: 2411           r1 := 0
  346c: 92cf           push r12
  346e: 92df           push r13
  3470: 92ef           push r14
  3472: 92ff           push r15
  3474: 931f           push r17
  3476: 932f           push r18
  3478: 933f           push r19
  347a: 934f           push r20
  347c: 935f           push r21
  347e: 936f           push r22
  3480: 937f           push r23
  3482: 938f           push r24
  3484: 939f           push r25
  3486: 93af           push r26
  3488: 93bf           push r27
  348a: 93ef           push r30
  348c: 93ff           push r31
  348e: 93cf           push r28
  3490: 93df           push r29
  3492: b7cd           r28 := PORT.SPL
  3494: b7de           r29 := PORT.SPH
  3496: 9761           r29:r28 -= 0x11
  3498: bfde           PORT.SPH := r29
  349a: bfcd           PORT.SPL := r28
  349c: 9210 00e9      SRAM.UENUM := 0
  34a0: 9180 00e8      r24 := SRAM.UEINTX
  34a4: ff83 c0e8      if_not(bit(r24, 3)):jmp 0x3678 <_loc_3678>
  34a8: e068           r22 := 8
  34aa: 01ce           r25:r24 := r29:r28
  34ac: 960a           r25:r24 += 10
  34ae: 940e 1888      call 0x3110 <sub_3110>
  34b2: ef82           r24 := 0xf2
  34b4: 9380 00e8      SRAM.UEINTX := r24
  34b8: 859a           r25 := *(r29:r28 + 0x0a)
  34ba: ff97 c005      if_not(bit(r25, 7)):jmp 0x34c8 <_loc_34c8>
_loc_34be:
  34be: 9180 00e8      r24 := SRAM.UEINTX
  34c2: ff80 cffc      if_not(bit(r24, 0)):jmp 0x34be <_loc_34be>
  34c6: c003           jmp 0x34ce <_loc_34ce>
_loc_34c8:
  34c8: ef8e           r24 := 0xfe
  34ca: 9380 00e8      SRAM.UEINTX := r24
_loc_34ce:
  34ce: 2f89           r24 := r25
  34d0: 7680           r24 &= 0x60
  34d2: f009           breq 0x34d6 <_loc_34d6>
  34d4: c0b6           jmp 0x3642 <_loc_3642>
_loc_34d6:
  34d6: 858b           r24 := *(r29:r28 + 0x0b)
  34d8: 1181 c005      if_not(r24 == 0):jmp 0x34e6 <_loc_34e6>
  34dc: 9210 00f1      SRAM.UEDATX := 0
  34e0: 9210 00f1      SRAM.UEDATX := 0
  34e4: c0c2           jmp 0x366a <_loc_366a>
_loc_34e6:
  34e6: 2f28           r18 := r24
  34e8: 7f2d           r18 &= 0xfd
  34ea: 3021 f409      if(r18 != 1):jmp 0x34f0 <_loc_34f0>
  34ee: c0bd           jmp 0x366a <_loc_366a>
_loc_34f0:
  34f0: 3085 f449      if(r24 != 5):jmp 0x3506 <_loc_3506>
_loc_34f4:
  34f4: 9180 00e8      r24 := SRAM.UEINTX
  34f8: ff80 cffc      if_not(bit(r24, 0)):jmp 0x34f4 <_loc_34f4>
  34fc: 858c           r24 := *(r29:r28 + 0x0c)
  34fe: 6880           r24 |= 0x80
  3500: 9380 00e3      SRAM.UDADDR := r24
  3504: c0b2           jmp 0x366a <_loc_366a>
_loc_3506:
  3506: 3086 f009      if(r24 == 6):jmp 0x350c <_loc_350c>
  350a: c06f           jmp 0x35ea <_loc_35ea>
_loc_350c:
  350c: 851d           r17 := *(r29:r28 + 0x0d)
  350e: 88e8           r14 := *(r29:r28 + 0x10)
  3510: 88f9           r15 := *(r29:r28 + 0x11)
  3512: 3012 f569      if(r17 != 2):jmp 0x3570 <_loc_3570>
  3516: e080 e090      r25:r24 := 0
  351a: 940e 19b1      call 0x3362 <sub_3362>
  351e: 940e 1a1d      call 0x343a <sub_343a>
  3522: e099           r25 := 9
  3524: 019e           r19:r18 := r29:r28
  3526: 5f2f 4f3f      r19:r18 -= -1
  352a: 0169           r13:r12 := r19:r18
  352c: 01f9           r31:r30 := r19:r18
  352e: 2f29           r18 := r25
_loc_3530:
  3530: 9211           *(r31:r30 ++) := 0
  3532: 952a           r18 --
  3534: f7e9           brne 0x3530 <_loc_3530>
  3536: 8399           *(r29:r28 + 0x01) := r25
  3538: 831a           *(r29:r28 + 0x02) := r17
  353a: e091           r25 := 1
  353c: 839e           *(r29:r28 + 0x06) := r25
  353e: e890           r25 := 0x80
  3540: 8798           *(r29:r28 + 0x08) := r25
  3542: ef9a           r25 := 0xfa
  3544: 8799           *(r29:r28 + 0x09) := r25
  3546: 9120 088d      r18 := SRAM.0x088d
  354a: 9130 088e      r19 := SRAM.0x088e
  354e: 5f27 4f3f      r19:r18 -= -9
  3552: 833c           *(r29:r28 + 0x04) := r19
  3554: 832b           *(r29:r28 + 0x03) := r18
  3556: 838d           *(r29:r28 + 0x05) := r24
  3558: 01c7           r25:r24 := r15:r14
  355a: 940e 19b1      call 0x3362 <sub_3362>
  355e: e049 e050      r21:r20 := 9
  3562: 01b6           r23:r22 := r13:r12
  3564: e080           r24 := 0
  3566: 940e 19bc      call 0x3378 <_loc_3378>
  356a: 940e 1a1d      call 0x343a <sub_343a>
  356e: c07d           jmp 0x366a <_loc_366a>
_loc_3570:
  3570: 01c7           r25:r24 := r15:r14
  3572: 940e 19b1      call 0x3362 <sub_3362>
  3576: 3212 f441      if(r17 != 0x22):jmp 0x358a <_loc_358a>
  357a: e282 e090      r25:r24 := 0x22
  357e: 940e 1c0c      call 0x3818 <sub_3818>
  3582: 2b89           r24 |= r25
  3584: f009           breq 0x3588 <_loc_3588>
  3586: c071           jmp 0x366a <_loc_366a>
_loc_3588:
  3588: c074           jmp 0x3672 <_loc_3672>
_loc_358a:
  358a: 3011 f469      if(r17 != 1):jmp 0x35a8 <_loc_35a8>
  358e: 8988           r24 := *(r29:r28 + 0x10)
  3590: 8999           r25 := *(r29:r28 + 0x11)
  3592: 9708           r25:r24 -= 8
  3594: f411           brne 0x359a <_loc_359a>
  3596: 9310 088a      SRAM.0x088a := r17
_loc_359a:
  359a: 9180 088a      r24 := SRAM.0x088a
  359e: 1181 c011      if_not(r24 == 0):jmp 0x35c4 <_loc_35c4>
  35a2: eb63 e071      r23:r22 := 0x1b3
  35a6: c016           jmp 0x35d4 <_loc_35d4>
_loc_35a8:
  35a8: 3013 f009      if(r17 == 3):jmp 0x35ae <_loc_35ae>
  35ac: c062           jmp 0x3672 <_loc_3672>
_loc_35ae:
  35ae: 858c           r24 := *(r29:r28 + 0x0c)
  35b0: 2388 f059      if_not(r24):jmp 0x35ca <_loc_35ca>
  35b4: 3082 f061      if(r24 == 2):jmp 0x35d0 <_loc_35d0>
  35b8: 3081 f009      if(r24 == 1):jmp 0x35be <_loc_35be>
  35bc: c05a           jmp 0x3672 <_loc_3672>
_loc_35be:
  35be: ec65 e071      r23:r22 := 0x1c5
  35c2: c008           jmp 0x35d4 <_loc_35d4>
_loc_35c4:
  35c4: ea61 e071      r23:r22 := 0x1a1
  35c8: c005           jmp 0x35d4 <_loc_35d4>
_loc_35ca:
  35ca: ef6f e071      r23:r22 := 0x1ff
  35ce: c002           jmp 0x35d4 <_loc_35d4>
_loc_35d0:
  35d0: ed6d e071      r23:r22 := 0x1dd
_loc_35d4:
  35d4: 1561 0571 f409 if(r23:r22 != 0):jmp 0x35dc <_loc_35dc>
  35da: c04b           jmp 0x3672 <_loc_3672>
_loc_35dc:
  35dc: 01fb           r31:r30 := r23:r22
  35de: 9144           r20 := PROG[r31:r30]
  35e0: e050           r21 := 0
  35e2: e880           r24 := 0x80
  35e4: 940e 19bc      call 0x3378 <_loc_3378>
  35e8: c040           jmp 0x366a <_loc_366a>
_loc_35ea:
  35ea: 3087 f409      if(r24 != 7):jmp 0x35f0 <_loc_35f0>
  35ee: c041           jmp 0x3672 <_loc_3672>
_loc_35f0:
  35f0: 3088 f421      if(r24 != 8):jmp 0x35fc <_loc_35fc>
  35f4: e081           r24 := 1
  35f6: 9380 00f1      SRAM.UEDATX := r24
  35fa: c037           jmp 0x366a <_loc_366a>
_loc_35fc:
  35fc: 3089 f5a9      if(r24 != 9):jmp 0x366a <_loc_366a>
  3600: 7093           r25 &= 3
  3602: f5b9           brne 0x3672 <_loc_3672>
  3604: e080 e090      r25:r24 := 0
  3608: e031           r19 := 1
  360a: e326           r18 := 0x36
_loc_360c:
  360c: e041           r20 := 1
  360e: 0f48           r20 += r24
  3610: 9340 00e9      SRAM.UENUM := r20
  3614: 9330 00eb      SRAM.UECONX := r19
  3618: 9601           r25:r24 += 1
  361a: 01fc           r31:r30 := r25:r24
  361c: 56e4 4ffe      r31:r30 -= -0x19c
  3620: 91e4           r30 := PROG[r31:r30]
  3622: 93e0 00ec      SRAM.UECFG0X := r30
  3626: 9320 00ed      SRAM.UECFG1X := r18
  362a: 3084 0591 f771 if(r25:r24 != 4):jmp 0x360c <_loc_360c>
  3630: e78e           r24 := 0x7e
  3632: 9380 00ea      SRAM.UERST := r24
  3636: 9210 00ea      SRAM.UERST := 0
  363a: 858c           r24 := *(r29:r28 + 0x0c)
  363c: 9380 088f      SRAM.0x088f := r24
  3640: c014           jmp 0x366a <_loc_366a>
_loc_3642:
  3642: 8988           r24 := *(r29:r28 + 0x10)
  3644: 8999           r25 := *(r29:r28 + 0x11)
  3646: 940e 19b1      call 0x3362 <sub_3362>
  364a: 858e           r24 := *(r29:r28 + 0x0e)
  364c: 1181 c005      if_not(r24 == 0):jmp 0x365a <_loc_365a>
  3650: 01ce           r25:r24 := r29:r28
  3652: 960a           r25:r24 += 10
  3654: 940e 180e      call 0x301c <sub_301c>
  3658: c006           jmp 0x3666 <_loc_3666>
_loc_365a:
  365a: 3082 f451      if(r24 != 2):jmp 0x3672 <_loc_3672>
  365e: 01ce           r25:r24 := r29:r28
  3660: 960a           r25:r24 += 10
  3662: 940e 1c34      call 0x3868 <sub_3868>
_loc_3666:
  3666: 2388 f021      if_not(r24):jmp 0x3672 <_loc_3672>
_loc_366a:
  366a: ef8e           r24 := 0xfe
  366c: 9380 00e8      SRAM.UEINTX := r24
  3670: c003           jmp 0x3678 <_loc_3678>
_loc_3672:
  3672: e281           r24 := 0x21
  3674: 9380 00eb      SRAM.UECONX := r24
_loc_3678:
  3678: 9661           r29:r28 += 0x11
  367a: b60f           r0 := PORT.SREG
  367c: 94f8           Clear(I flag)
  367e: bfde           PORT.SPH := r29
  3680: be0f           PORT.SREG := r0
  3682: bfcd           PORT.SPL := r28
  3684: 91df           pop r29
  3686: 91cf           pop r28
  3688: 91ff           pop r31
  368a: 91ef           pop r30
  368c: 91bf           pop r27
  368e: 91af           pop r26
  3690: 919f           pop r25
  3692: 918f           pop r24
  3694: 917f           pop r23
  3696: 916f           pop r22
  3698: 915f           pop r21
  369a: 914f           pop r20
  369c: 913f           pop r19
  369e: 912f           pop r18
  36a0: 911f           pop r17
  36a2: 90ff           pop r15
  36a4: 90ef           pop r14
  36a6: 90df           pop r13
  36a8: 90cf           pop r12
  36aa: 900f           pop r0
  36ac: be0f           PORT.SREG := r0
  36ae: 900f           pop r0
  36b0: 901f           pop r1
  36b2: 9518           ret_int

void USB_Flush(uint8_t ep):
  36b4: 9380 00e9      SRAM.UENUM := r24
  36b8: 9180 00f2      r24 := SRAM.UEBCLX
  36bc: 2388 f019      if_not(r24):jmp 0x36c6 <_loc_36c6>
  36c0: e38a           r24 := 0x3a
  36c2: 9380 00e8      SRAM.UEINTX := r24
_loc_36c6:
  36c6: 9508           ret

USBDevice.attach:
  36c8: 9210 088f      SRAM.0x088f := 0
  36cc: e081           r24 := 1
  36ce: 9380 00d7      SRAM.UHWCON := r24
  36d2: ea80           r24 := 0xa0
  36d4: 9380 00d8      SRAM.USBCON := r24
  36d8: e182           r24 := 0x12
  36da: bd89           PORT.PLLCSR := r24
_loc_36dc:
  36dc: b409           r0 := PORT.PLLCSR
  36de: fe00 cffd      if_not(bit(r0, 0)):jmp 0x36dc <_loc_36dc>
  36e2: e061 e070      r23:r22 := 1
  36e6: e080 e090      r25:r24 := 0
  36ea: 940e 1510      call 0x2a20 <void delay(unsigned long ms)>
  36ee: e980           r24 := 0x90
  36f0: 9380 00d8      SRAM.USBCON := r24
  36f4: e08c           r24 := 12
  36f6: 9380 00e2      SRAM.UDIEN := r24
  36fa: 9210 00e0      SRAM.UDCON := 0
  36fe: 9a55           set_bit(PORT.DDRD, 5)
  3700: 9a20           set_bit(PORT.DDRB, 0)
  3702: 985d           clear_bit(PORT.PORTD, 5)
  3704: 9828           clear_bit(PORT.PORTB, 0)
  3706: 9508           ret

int0a:
  3708: 921f           push r1
  370a: 920f           push r0
  370c: b60f           r0 := PORT.SREG
  370e: 920f           push r0
  3710: 2411           r1 := 0
  3712: 932f           push r18
  3714: 933f           push r19
  3716: 934f           push r20
  3718: 935f           push r21
  371a: 936f           push r22
  371c: 937f           push r23
  371e: 938f           push r24
  3720: 939f           push r25
  3722: 93af           push r26
  3724: 93bf           push r27
  3726: 93ef           push r30
  3728: 93ff           push r31
  372a: 9180 00e1      r24 := SRAM.UDINT
  372e: 9210 00e1      SRAM.UDINT := 0
  3732: ff83 c00f      if_not(bit(r24, 3)):jmp 0x3754 <_loc_3754>
  3736: 9210 00e9      SRAM.UENUM := 0
  373a: e091           r25 := 1
  373c: 9390 00eb      SRAM.UECONX := r25
  3740: 9210 00ec      SRAM.UECFG0X := 0
  3744: e392           r25 := 0x32
  3746: 9390 00ed      SRAM.UECFG1X := r25
  374a: 9210 088f      SRAM.0x088f := 0
  374e: e098           r25 := 8
  3750: 9390 00f0      SRAM.UEIENX := r25
_loc_3754:
  3754: ff82 c026      if_not(bit(r24, 2)):jmp 0x37a4 <_loc_37a4>
  3758: e083           r24 := 3
  375a: 940e 1b5a      call 0x36b4 <void USB_Flush(uint8_t ep)>
  375e: e082           r24 := 2
  3760: 940e 189d      call 0x313a <sub_313a>
  3764: 2388 f021      if_not(r24):jmp 0x3770 <_loc_3770>
  3768: e387 e098      r25:r24 := 0x837 (=Serial)
  376c: 940e 17b5      call 0x2f6a <Serial.?(vtable6)>
_loc_3770:
  3770: 9180 0891      r24 := SRAM.0x0891
  3774: 2388 f039      if_not(r24):jmp 0x3786 <_loc_3786>
  3778: 9180 0891      r24 := SRAM.0x0891
  377c: 5081           r24 -= 1
  377e: 9380 0891      SRAM.0x0891 := r24
  3782: 2388 f069      if_not(r24):jmp 0x37a0 <_loc_37a0>
_loc_3786:
  3786: 9180 0890      r24 := SRAM.0x0890
  378a: 2388 f059      if_not(r24):jmp 0x37a4 <_loc_37a4>
  378e: 9180 0890      r24 := SRAM.0x0890
  3792: 5081           r24 -= 1
  3794: 9380 0890      SRAM.0x0890 := r24
  3798: 1181 c004      if_not(r24 == 0):jmp 0x37a4 <_loc_37a4>
  379c: 9828           clear_bit(PORT.PORTB, 0)
  379e: c002           jmp 0x37a4 <_loc_37a4>
_loc_37a0:
  37a0: 985d           clear_bit(PORT.PORTD, 5)
  37a2: cff1           jmp 0x3786 <_loc_3786>
_loc_37a4:
  37a4: 91ff           pop r31
  37a6: 91ef           pop r30
  37a8: 91bf           pop r27
  37aa: 91af           pop r26
  37ac: 919f           pop r25
  37ae: 918f           pop r24
  37b0: 917f           pop r23
  37b2: 916f           pop r22
  37b4: 915f           pop r21
  37b6: 914f           pop r20
  37b8: 913f           pop r19
  37ba: 912f           pop r18
  37bc: 900f           pop r0
  37be: be0f           PORT.SREG := r0
  37c0: 900f           pop r0
  37c2: 901f           pop r1
  37c4: 9518           ret_int

sub?vtable?_37c6:
  37c6: 92ef           push r14
  37c8: 92ff           push r15
  37ca: 931f           push r17
  37cc: 93cf           push r28
  37ce: 93df           push r29
  37d0: 01ec           r29:r28 := r25:r24
  37d2: 2f16           r17 := r22
  37d4: 81e8           r30 := *(r29:r28)
  37d6: 81f9           r31 := *(r29:r28 + 0x01)
  37d8: 8004           r0 := *(r31:r30 + 0x04)
  37da: 81f5           r31 := *(r31:r30 + 0x05)
  37dc: 2de0           r30 := r0
  37de: 9509           icall r31:r30
  37e0: 017c           r15:r14 := r25:r24
  37e2: 81e8           r30 := *(r29:r28)
  37e4: 81f9           r31 := *(r29:r28 + 0x01)
  37e6: 8006           r0 := *(r31:r30 + 0x06)
  37e8: 81f7           r31 := *(r31:r30 + 0x07)
  37ea: 2de0           r30 := r0
  37ec: 2f61           r22 := r17
  37ee: 01ce           r25:r24 := r29:r28
  37f0: 9509           icall r31:r30
  37f2: 01c7           r25:r24 := r15:r14
  37f4: 2799           r25 := 0
  37f6: 91df           pop r29
  37f8: 91cf           pop r28
  37fa: 911f           pop r17
  37fc: 90ff           pop r15
  37fe: 90ef           pop r14
  3800: 9508           ret

sub_3802:
  3802: 01fc           r31:r30 := r25:r24
  3804: 8190           r25 := *(r31:r30)
  3806: 5f9f           r25 -= -1
  3808: 8390           *(r31:r30) := r25
  380a: e149 e050      r21:r20 := 0x19
  380e: e863 e072      r23:r22 := 0x283
  3812: e880           r24 := 0x80
  3814: 940c 19bc      jmp 0x3378 <_loc_3378>

sub_3818:
  3818: e645 e050      r21:r20 := 0x65 (=PRR1)
  381c: e96c e072      r23:r22 := 0x29c
  3820: e880           r24 := 0x80
  3822: 940c 19bc      jmp 0x3378 <_loc_3378>
_loc_3826:
  3826: 92ef           push r14
  3828: 92ff           push r15
  382a: 930f           push r16
  382c: 931f           push r17
  382e: 93cf           push r28
  3830: 93df           push r29
  3832: 921f           push r1
  3834: b7cd           r28 := PORT.SPL
  3836: b7de           r29 := PORT.SPH
  3838: 8389           *(r29:r28 + 0x01) := r24
  383a: 018b           r17:r16 := r23:r22
  383c: 017a           r15:r14 := r21:r20
  383e: e041 e050      r21:r20 := 1
  3842: 01be           r23:r22 := r29:r28
  3844: 5f6f 4f7f      r23:r22 -= -1
  3848: e084           r24 := 4
  384a: 940e 1924      call 0x3248 <size_t Serial_::write(const uint8_t *buffer, size_t size)>
  384e: 01a7           r21:r20 := r15:r14
  3850: 01b8           r23:r22 := r17:r16
  3852: e484           r24 := 0x44
  3854: 940e 1924      call 0x3248 <size_t Serial_::write(const uint8_t *buffer, size_t size)>
  3858: 900f           pop r0
  385a: 91df           pop r29
  385c: 91cf           pop r28
  385e: 911f           pop r17
  3860: 910f           pop r16
  3862: 90ff           pop r15
  3864: 90ef           pop r14
  3866: 9508           ret

sub_3868:
  3868: 01fc           r31:r30 := r25:r24
  386a: 8191           r25 := *(r31:r30 + 0x01)
  386c: 8180           r24 := *(r31:r30)
  386e: 3a81 f431      if(r24 != 0xa1):jmp 0x387e <_loc_387e>
  3872: e081           r24 := 1
  3874: 3091 f091      if(r25 == 1):jmp 0x389c <_loc_389c>
  3878: 3093 f489      if(r25 != 3):jmp 0x389e <_loc_389e>
  387c: c011           jmp 0x38a0 <_loc_38a0>
_loc_387e:
  387e: 3281 f471      if(r24 != 0x21):jmp 0x389e <_loc_389e>
  3882: 309b f421      if(r25 != 11):jmp 0x388e <_loc_388e>
  3886: 8182           r24 := *(r31:r30 + 0x02)
  3888: 9380 0111      SRAM.0x0111 := r24
  388c: c005           jmp 0x3898 <_loc_3898>
_loc_388e:
  388e: 309a f431      if(r25 != 10):jmp 0x389e <_loc_389e>
  3892: 8182           r24 := *(r31:r30 + 0x02)
  3894: 9380 0110      SRAM.0x0110 := r24
_loc_3898:
  3898: e081           r24 := 1
  389a: 9508           ret
_loc_389c:
  389c: 9508           ret
_loc_389e:
  389e: e080           r24 := 0
_loc_38a0:
  38a0: 9508           ret
_loc_38a2:
  38a2: e048 e050      r21:r20 := 8
  38a6: e082           r24 := 2
  38a8: 940c 1c13      jmp 0x3826 <_loc_3826>

sub?vtable?_38ac:
  38ac: 01dc           r27:r26 := r25:r24
  38ae: 3868 f010      if(r22 < 0x88):jmp 0x38b6 <_loc_38b6>
  38b2: 5868           r22 -= -0x78
  38b4: c02e           jmp 0x3912 <_loc_3912>
_loc_38b6:
  38b6: 2fe6 e0f0      r31:r30 := 0:r22
  38ba: ff67 c012      if_not(bit(r22, 7)):jmp 0x38e2 <_loc_38e2>
  38be: 58e0 09f1      r31:r30 -= 0x80
  38c2: e081 e090      r25:r24 := 1
  38c6: 2e0e           r0 := r30
  38c8: c001           jmp 0x38cc <_loc_38cc>
_loc_38ca:
  38ca: 0f88           r24 *= 2
_loc_38cc:
  38cc: 940a           r0 --
  38ce: f7ea           brpl 0x38ca <_loc_38ca>
  38d0: 9614           r27:r26 += 4
  38d2: 919c           r25 := *(r27:r26)
  38d4: 9714           r27:r26 -= 4
  38d6: 2b89           r24 |= r25
  38d8: 9614           r27:r26 += 4
  38da: 938c           *(r27:r26) := r24
  38dc: 9714           r27:r26 -= 4
  38de: e060           r22 := 0
  38e0: c018           jmp 0x3912 <_loc_3912>
_loc_38e2:
  38e2: 5fed 4ffd      r31:r30 -= -0x203
  38e6: 9164           r22 := PROG[r31:r30]
  38e8: 1161 c009      if_not(r22 == 0):jmp 0x38fe <_loc_38fe>
_loc_38ec:
  38ec: e081 e090      r25:r24 := 1
  38f0: 9613           r27:r26 += 3
  38f2: 939c           *(r27:r26) := r25
  38f4: 938e           *(-- r27:r26) := r24
  38f6: 9712           r27:r26 -= 2
  38f8: e080 e090      r25:r24 := 0
  38fc: 9508           ret
_loc_38fe:
  38fe: ff67 c008      if_not(bit(r22, 7)):jmp 0x3912 <_loc_3912>
  3902: 9614           r27:r26 += 4
  3904: 918c           r24 := *(r27:r26)
  3906: 9714           r27:r26 -= 4
  3908: 6082           r24 |= 2
  390a: 9614           r27:r26 += 4
  390c: 938c           *(r27:r26) := r24
  390e: 9714           r27:r26 -= 4
  3910: 776f           r22 &= 0x7f
_loc_3912:
  3912: 9616           r27:r26 += 6
  3914: 918c           r24 := *(r27:r26)
  3916: 9716           r27:r26 -= 6
  3918: 1786 f151      if(r24 == r22):jmp 0x3970 <_loc_3970>
  391c: 9617           r27:r26 += 7
  391e: 918c           r24 := *(r27:r26)
  3920: 9717           r27:r26 -= 7
  3922: 1786 f129      if(r24 == r22):jmp 0x3970 <_loc_3970>
  3926: 9618           r27:r26 += 8
  3928: 918c           r24 := *(r27:r26)
  392a: 9718           r27:r26 -= 8
  392c: 1786 f101      if(r24 == r22):jmp 0x3970 <_loc_3970>
  3930: 9619           r27:r26 += 9
  3932: 918c           r24 := *(r27:r26)
  3934: 9719           r27:r26 -= 9
  3936: 1786 f0d9      if(r24 == r22):jmp 0x3970 <_loc_3970>
  393a: 961a           r27:r26 += 10
  393c: 918c           r24 := *(r27:r26)
  393e: 971a           r27:r26 -= 10
  3940: 1786 f0b1      if(r24 == r22):jmp 0x3970 <_loc_3970>
  3944: 961b           r27:r26 += 11
  3946: 918c           r24 := *(r27:r26)
  3948: 971b           r27:r26 -= 11
  394a: 1786 f089      if(r24 == r22):jmp 0x3970 <_loc_3970>
  394e: 01fd           r31:r30 := r27:r26
  3950: 9636           r31:r30 += 6
  3952: e080 e090      r25:r24 := 0
_loc_3956:
  3956: 9121           r18 := *(r31:r30 ++)
  3958: 1121 c005      if_not(r18 == 0):jmp 0x3966 <_loc_3966>
  395c: 01fd           r31:r30 := r27:r26
  395e: 0fe8 1ff9      r31:r30 += r25:r24
  3962: 8366           *(r31:r30 + 0x06) := r22
  3964: c005           jmp 0x3970 <_loc_3970>
_loc_3966:
  3966: 9601           r25:r24 += 1
  3968: 3086 0591 f7a1 if(r25:r24 != 6):jmp 0x3956 <_loc_3956>
  396e: cfbe           jmp 0x38ec <_loc_38ec>
_loc_3970:
  3970: 01cd           r25:r24 := r27:r26
  3972: 01bd           r23:r22 := r27:r26
  3974: 5f6c 4f7f      r23:r22 -= -4
  3978: 940e 1c51      call 0x38a2 <_loc_38a2>
  397c: e081 e090      r25:r24 := 1
  3980: 9508           ret

sub?vtable?_3982:
  3982: 01dc           r27:r26 := r25:r24
  3984: 3868 f010      if(r22 < 0x88):jmp 0x398c <_loc_398c>
  3988: 5868           r22 -= -0x78
  398a: c026           jmp 0x39d8 <_loc_39d8>
_loc_398c:
  398c: 2fe6 e0f0      r31:r30 := 0:r22
  3990: ff67 c013      if_not(bit(r22, 7)):jmp 0x39ba <_loc_39ba>
  3994: 58e0 09f1      r31:r30 -= 0x80
  3998: e081 e090      r25:r24 := 1
  399c: 2e0e           r0 := r30
  399e: c001           jmp 0x39a2 <_loc_39a2>
_loc_39a0:
  39a0: 0f88           r24 *= 2
_loc_39a2:
  39a2: 940a           r0 --
  39a4: f7ea           brpl 0x39a0 <_loc_39a0>
  39a6: 9580           r24 := 0xff - r24
  39a8: 9614           r27:r26 += 4
  39aa: 919c           r25 := *(r27:r26)
  39ac: 9714           r27:r26 -= 4
  39ae: 2389           r24 &= r25
  39b0: 9614           r27:r26 += 4
  39b2: 938c           *(r27:r26) := r24
  39b4: 9714           r27:r26 -= 4
  39b6: e060           r22 := 0
  39b8: c00f           jmp 0x39d8 <_loc_39d8>
_loc_39ba:
  39ba: 5fed 4ffd      r31:r30 -= -0x203
  39be: 9164           r22 := PROG[r31:r30]
  39c0: 2366 f101      if_not(r22):jmp 0x3a04 <_loc_3a04>
  39c4: ff67 c008      if_not(bit(r22, 7)):jmp 0x39d8 <_loc_39d8>
  39c8: 9614           r27:r26 += 4
  39ca: 918c           r24 := *(r27:r26)
  39cc: 9714           r27:r26 -= 4
  39ce: 7f8d           r24 &= 0xfd
  39d0: 9614           r27:r26 += 4
  39d2: 938c           *(r27:r26) := r24
  39d4: 9714           r27:r26 -= 4
  39d6: 776f           r22 &= 0x7f
_loc_39d8:
  39d8: 01fd           r31:r30 := r27:r26
  39da: 9636           r31:r30 += 6
  39dc: e086           r24 := 6
_loc_39de:
  39de: 2366 f021      if_not(r22):jmp 0x39ea <_loc_39ea>
  39e2: 8190           r25 := *(r31:r30)
  39e4: 1396 c001      if_not(r25 == r22):jmp 0x39ea <_loc_39ea>
  39e8: 8210           *(r31:r30) := 0
_loc_39ea:
  39ea: 5081           r24 -= 1
  39ec: 9631           r31:r30 += 1
  39ee: 1181 cff6      if_not(r24 == 0):jmp 0x39de <_loc_39de>
  39f2: 01cd           r25:r24 := r27:r26
  39f4: 01bd           r23:r22 := r27:r26
  39f6: 5f6c 4f7f      r23:r22 -= -4
  39fa: 940e 1c51      call 0x38a2 <_loc_38a2>
  39fe: e081 e090      r25:r24 := 1
  3a02: 9508           ret
_loc_3a04:
  3a04: e080 e090      r25:r24 := 0
  3a08: 9508           ret

sub?vtable?_3a0a:
  3a0a: 01fc           r31:r30 := r25:r24
  3a0c: 8216           *(r31:r30 + 0x06) := 0
  3a0e: 8217           *(r31:r30 + 0x07) := 0
  3a10: 8610           *(r31:r30 + 0x08) := 0
  3a12: 8611           *(r31:r30 + 0x09) := 0
  3a14: 8612           *(r31:r30 + 0x0a) := 0
  3a16: 8613           *(r31:r30 + 0x0b) := 0
  3a18: 8214           *(r31:r30 + 0x04) := 0
  3a1a: 01bc           r23:r22 := r25:r24
  3a1c: 5f6c 4f7f      r23:r22 -= -4
  3a20: 940c 1c51      jmp 0x38a2 <_loc_38a2>

cons1_?:
  3a24: 9210 089e      SRAM.0x089e := 0
  3a28: e9e2 e0f8      r31:r30 := 0x892
  3a2c: 8213           *(r31:r30 + 0x03) := 0
  3a2e: 8212           *(r31:r30 + 0x02) := 0
  3a30: e48f e096      r25:r24 := 0x64f (=?2_vtable)
  3a34: 8391           *(r31:r30 + 0x01) := r25
  3a36: 8380           *(r31:r30) := r24
  3a38: 9508           ret

libgcc.mulsi3(A=r25:r24:r23:r22, B=r21:r20:r19:r18)->r25:r24:r23:r22=A*B:
  3a3a: 01db           r27:r26 := r23:r22
  3a3c: 938f           push r24
  3a3e: 939f           push r25
  3a40: 940e 1d9c      call 0x3b38 <libgcc.muluhisi3(A=r27:r26, B=r21:r20:r19:r18)->r25:r24:r23:r22=A*B>
  3a44: 91bf           pop r27
  3a46: 91af           pop r26
  3a48: 9fa2           r1:r0 := r26 * r18
  3a4a: 0d80 1d91      r25:r24 += r1:r0
  3a4e: 9fa3           r1:r0 := r26 * r19
  3a50: 0d90           r25 += r0
  3a52: 9fb2           r1:r0 := r27 * r18
  3a54: 0d90           r25 += r0
  3a56: 2411           r1 := 0
  3a58: 9508           ret

libgcc.udivmodhi4(dividend=r25:r24, divisor=r23:r22)->25:r24=r,r23:r22=q:
  3a5a: 1baa           r26 -= r26
  3a5c: 1bbb           r27 -= r27
  3a5e: e151           r21 := 0x11
  3a60: c007           jmp 0x3a70 <_loc_3a70>
_loc_3a62:
  3a62: 1faa 1fbb      C:r27:r26 := r27:r26:C ; << 1
  3a66: 17a6 07b7 f010 if(r27:r26 < r23:r22):jmp 0x3a70 <_loc_3a70>
  3a6c: 1ba6 0bb7      r27:r26 -= r23:r22
_loc_3a70:
  3a70: 1f88 1f99      C:r25:r24 := r25:r24:C ; << 1
  3a74: 955a           r21 --
  3a76: f7a9           brne 0x3a62 <_loc_3a62>
  3a78: 9580           r24 := 0xff - r24
  3a7a: 9590           r25 := 0xff - r25
  3a7c: 01bc           r23:r22 := r25:r24
  3a7e: 01cd           r25:r24 := r27:r26
  3a80: 9508           ret

libgcc.divmodhi4(dividend=r25:r24, divisor=r23:r22)->25:r24=r,r23:r22=q:
  3a82: fb97           T := bit(r25, 7)
  3a84: 2e07           r0 := r23
  3a86: f416           brtc 0x3a8c <_loc_3a8c>
  3a88: 9400           r0 := 0xff - r0
  3a8a: d007           call 0x3a9a <sub_3a9a>
_loc_3a8c:
  3a8c: fd77 d009      if(bit(r23, 7)):call 0x3aa2 <sub_3aa2>
  3a90: 940e 1d2d      call 0x3a5a <libgcc.udivmodhi4(dividend=r25:r24, divisor=r23:r22)->25:r24=r,r23:r22=q>
  3a94: fc07 d005      if(bit(r0, 7)):call 0x3aa2 <sub_3aa2>
  3a98: f43e           brtc 0x3aa8 <_loc_3aa8>

sub_3a9a:
  3a9a: 9590           r25 := 0xff - r25
  3a9c: 9581           r24 := -r24
  3a9e: 4f9f           r25 -= -1+C
  3aa0: 9508           ret

sub_3aa2:
  3aa2: 9570           r23 := 0xff - r23
  3aa4: 9561           r22 := -r22
  3aa6: 4f7f           r23 -= -1+C
_loc_3aa8:
  3aa8: 9508           ret

libgcc.udivmodsi4(dividend=r25:r24:r23:r22, divisor=r21:r20:r19:r18)->r25:r24:r23:r22=r,r21:r20:r19:r18=q:
  3aaa: e2a1           r26 := 0x21
  3aac: 2e1a           r1 := r26
  3aae: 1baa           r26 -= r26
  3ab0: 1bbb           r27 -= r27
  3ab2: 01fd           r31:r30 := r27:r26
  3ab4: c00d           jmp 0x3ad0 <_loc_3ad0>
_loc_3ab6:
  3ab6: 1faa 1fbb      C:r27:r26 := r27:r26:C ; << 1
  3aba: 1fee 1fff      C:r31:r30 := r31:r30:C ; << 1
  3abe: 17a2 07b3      cmp r27:r26, r19:r18
  3ac2: 07e4 07f5      cmp_carry r31:r30, r21:r20
  3ac6: f020           brcs 0x3ad0 <_loc_3ad0>
  3ac8: 1ba2 0bb3      r27:r26 -= r19:r18
  3acc: 0be4 0bf5      r31:r30 -= r21:r20+C
_loc_3ad0:
  3ad0: 1f66 1f77 1f88 1f99 C:r25:r24:r23:r22 := r25:r24:r23:r22:C ; << 1
  3ad8: 941a           r1 --
  3ada: f769           brne 0x3ab6 <_loc_3ab6>
  3adc: 9560           r22 := 0xff - r22
  3ade: 9570           r23 := 0xff - r23
  3ae0: 9580           r24 := 0xff - r24
  3ae2: 9590           r25 := 0xff - r25
  3ae4: 019b           r19:r18 := r23:r22
  3ae6: 01ac           r21:r20 := r25:r24
  3ae8: 01bd           r23:r22 := r27:r26
  3aea: 01cf           r25:r24 := r31:r30
  3aec: 9508           ret

libgcc.divmodsi4(dividend=r25:r24:r23:r22, divisor=r21:r20:r19:r18)->r25:r24:r23:r22=r,r21:r20:r19:r18=q:
  3aee: 2e05           r0 := r21
  3af0: fb97           T := bit(r25, 7)
  3af2: f41e           brtc 0x3afa <_loc_3afa>
  3af4: 9400           r0 := 0xff - r0
  3af6: 940e 1d8e      call 0x3b1c <_loc_3b1c>
_loc_3afa:
  3afa: fd57 d007      if(bit(r21, 7)):call 0x3b0c <sub_3b0c>
  3afe: 940e 1d55      call 0x3aaa <libgcc.udivmodsi4(dividend=r25:r24:r23:r22, divisor=r21:r20:r19:r18)->r25:r24:r23:r22=r,r21:r20:r19:r18=q>
  3b02: fc07 d003      if(bit(r0, 7)):call 0x3b0c <sub_3b0c>
  3b06: f44e           brtc 0x3b1a <_loc_3b1a>
  3b08: 940c 1d8e      jmp 0x3b1c <_loc_3b1c>

sub_3b0c:
  3b0c: 9550           r21 := 0xff - r21
  3b0e: 9540           r20 := 0xff - r20
  3b10: 9530           r19 := 0xff - r19
  3b12: 9521           r18 := -r18
  3b14: 4f3f 4f4f 4f5f r21:r20:r19 -= -1+C
_loc_3b1a:
  3b1a: 9508           ret
_loc_3b1c:
  3b1c: 9590           r25 := 0xff - r25
  3b1e: 9580           r24 := 0xff - r24
  3b20: 9570           r23 := 0xff - r23
  3b22: 9561           r22 := -r22
  3b24: 4f7f 4f8f 4f9f r25:r24:r23 -= -1+C
  3b2a: 9508           ret

jump_indirect_to_PROG[r31:r30*2]:
  3b2c: 0fee 1fff      r31:r30 *= 2
  3b30: 9005           r0 := PROG[r31:r30 ++]
  3b32: 91f4           r31 := PROG[r31:r30]
  3b34: 2de0           r30 := r0
  3b36: 9409           ijmp r31:r30

libgcc.muluhisi3(A=r27:r26, B=r21:r20:r19:r18)->r25:r24:r23:r22=A*B:
  3b38: 940e 1da7      call 0x3b4e <libgcc.umulhisi3(A=r27:r26, B=r19:r18)->r25:r24:r23:r22=A*B>
  3b3c: 9fa5           r1:r0 := r26 * r21
  3b3e: 0d90           r25 += r0
  3b40: 9fb4           r1:r0 := r27 * r20
  3b42: 0d90           r25 += r0
  3b44: 9fa4           r1:r0 := r26 * r20
  3b46: 0d80 1d91      r25:r24 += r1:r0
  3b4a: 2411           r1 := 0
  3b4c: 9508           ret

libgcc.umulhisi3(A=r27:r26, B=r19:r18)->r25:r24:r23:r22=A*B:
  3b4e: 9fa2           r1:r0 := r26 * r18
  3b50: 01b0           r23:r22 := r1:r0
  3b52: 9fb3           r1:r0 := r27 * r19
  3b54: 01c0           r25:r24 := r1:r0
  3b56: 9fa3           r1:r0 := r26 * r19
  3b58: 0d70 1d81      r24:r23 += r1:r0
  3b5c: 2411           r1 := 0
  3b5e: 1d91           r25 += 0+C
  3b60: 9fb2           r1:r0 := r27 * r18
  3b62: 0d70 1d81      r24:r23 += r1:r0
  3b66: 2411           r1 := 0
  3b68: 1d91           r25 += 0+C
  3b6a: 9508           ret

libgcc.atoi(r25:r24=str)->r25:r24=number:
  3b6c: 01fc           r31:r30 := r25:r24
  3b6e: 2788 2799      r25:r24 := 0
  3b72: 94e8           Clear(T flag)
_loc_3b74:
  3b74: 9121           r18 := *(r31:r30 ++)
  3b76: 3220 f3e9      if(r18 == 0x20):jmp 0x3b74 <_loc_3b74>
  3b7a: 3029 f010      if(r18 < 9):jmp 0x3b82 <_loc_3b82>
  3b7e: 302e f3c8      if(r18 < 14):jmp 0x3b74 <_loc_3b74>
_loc_3b82:
  3b82: 322b f041      if(r18 == 0x2b):jmp 0x3b96 <_read_+>
  3b86: 322d f439      if(r18 != 0x2d):jmp 0x3b98 <_read_digit>
  3b8a: 9468           Set(T flag)
  3b8c: c004           jmp 0x3b96 <_read_+>
_loc_3b8e:
  3b8e: 940e 1de2      call 0x3bc4 <mul_by_10(r25:r24)->r25:r24>
  3b92: 0f82 1d91      r25:r24 += 0:r18
_read_+:
  3b96: 9121           r18 := *(r31:r30 ++)
_read_digit:
  3b98: 5320           r18 -= 0x30
  3b9a: 302a f3c0      if(r18 < 10):jmp 0x3b8e <_loc_3b8e>
  3b9e: f41e           brtc 0x3ba6 <_loc_3ba6>
  3ba0: 9590           r25 := 0xff - r25
  3ba2: 9581           r24 := -r24
  3ba4: 4f9f           r25 -= -1+C
_loc_3ba6:
  3ba6: 9508           ret

libgcc.strncmp(r25:r24=s1, r23:r22=s2, r21:r20=n)->r24:
  3ba8: 01fb           r31:r30 := r23:r22
  3baa: 01dc           r27:r26 := r25:r24
_loc_3bac:
  3bac: 5041 4050      r21:r20 -= 1
  3bb0: f030           if(r21:r20 < 0):jmp 0x3bbe <_loc_3bbe>
  3bb2: 918d           r24 := *(r27:r26 ++)
  3bb4: 9001           r0 := *(r31:r30 ++)
  3bb6: 1980           r24 -= r0
  3bb8: f419           brne 0x3bc0 <_loc_3bc0>
  3bba: 2000 f7b9      if(r0):jmp 0x3bac <_loc_3bac>
_loc_3bbe:
  3bbe: 1b88           r24 -= r24
_loc_3bc0:
  3bc0: 0b99           r25 -= r25+C
  3bc2: 9508           ret

mul_by_10(r25:r24)->r25:r24:
  3bc4: e07a           r23 := 10
  3bc6: 9f97           r1:r0 := r25 * r23
  3bc8: 2d90           r25 := r0
  3bca: 9f87           r1:r0 := r24 * r23
  3bcc: 2d80           r24 := r0
  3bce: 0d91           r25 += r1
  3bd0: 2411           r1 := 0
  3bd2: 9508           ret

halt:
  3bd4: 94f8           Clear(I flag)
_loc_3bd6:
  3bd6: cfff           loop_forever_here

gamemode_addresses:
  3bd8:                      f005 f605 fd05 0306          ........
  3be0:  00e1 0000 0000 0000 0101                 ..........

quizz_questions:
  3bea:                           c202 1603 3903            ....9.
  3bf0:  6203 8e03                                b...

"==============================================":
  3bf4:            3d3d 3d3d 3d3d 3d3d 3d3d 3d3d      ============
  3c00:  3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================
  3c10:  3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================
  3c20:  3d3d 00                                  ==.

"              World War Simulation":
  3c23:         20 2020 2020 2020 2020 2020 2020                  
  3c30:  2057 6f72 6c64 2057 6172 2053 696d 756c   World War Simul
  3c40:  6174 696f 6e00                           ation.

"=====================\o/======================":
  3c46:                 3d3d 3d3d 3d3d 3d3d 3d3d        ==========
  3c50:  3d3d 3d3d 3d3d 3d3d 3d3d 3d5c 6f2f 3d3d  ===========\o/==
  3c60:  3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d  ================
  3c70:  3d3d 3d3d 00                             ====.

"Enter access code to launch nuclear strike: ":
  3c75:              45 6e74 6572 2061 6363 6573       Enter acces
  3c80:  7320 636f 6465 2074 6f20 6c61 756e 6368  s code to launch
  3c90:  206e 7563 6c65 6172 2073 7472 696b 653a   nuclear strike:
  3ca0:  2000                                      .

"- ERROR -":
  3ca2:       0d0a 2d20 4552 524f 5220 2d0d 0a00    ..- ERROR -...

"Read serial:":
  3cb0:  5265 6164 2073 6572 6961 6c3a 00         Read serial:.

"Expecting: ":
  3cbd:                                  45 7870               Exp
  3cc0:  6563 7469 6e67 3a20 00                   ecting: .

"- MISSILES LAUNCHED, ENJOY -":
  3cc9:                        0d 0a2d 204d 4953           ..- MIS
  3cd0:  5349 4c45 5320 4c41 554e 4348 4544 2c20  SILES LAUNCHED, 
  3ce0:  454e 4a4f 5920 2d0d 0a00                 ENJOY -...

"!!! GOD MODE ENABLED !!!":
  3cea:                           2121 2120 474f            !!! GO
  3cf0:  4420 4d4f 4445 2045 4e41 424c 4544 2021  D MODE ENABLED !
  3d00:  2121 00                                  !!.

"Quizz> answer 'q' to quit the game, names start with a capital letter.":
  3d03:         51 7569 7a7a 3e20 616e 7377 6572     Quizz> answer
  3d10:  2027 7127 2074 6f20 7175 6974 2074 6865   'q' to quit the
  3d20:  2067 616d 652c 206e 616d 6573 2073 7461   game, names sta
  3d30:  7274 2077 6974 6820 6120 6361 7069 7461  rt with a capita
  3d40:  6c20 6c65 7474 6572 2e00                 l letter..

"You won this game !":
  3d4a:                           596f 7520 776f            You wo
  3d50:  6e20 7468 6973 2067 616d 6520 2100       n this game !.

"Quizz> ":
  3d5e:                                     5175                Qu
  3d60:  697a 7a3e 2000                           izz> .

"Question ":
  3d66:                 5175 6573 7469 6f6e 2000        Question .

"Correct.":
  3d70:  436f 7272 6563 742e 00                   Correct..

" Next question.":
  3d79:                        20 4e65 7874 2071            Next q
  3d80:  7565 7374 696f 6e2e 00                   uestion..

"Nope, try again.":
  3d89:                        4e 6f70 652c 2074           Nope, t
  3d90:  7279 2061 6761 696e 2e00                 ry again..

"What is the Answer to the Ultimate Question of Life, The Universe, and Everything ?":
  3d9a:                           5768 6174 2069            What i
  3da0:  7320 7468 6520 416e 7377 6572 2074 6f20  s the Answer to 
  3db0:  7468 6520 556c 7469 6d61 7465 2051 7565  the Ultimate Que
  3dc0:  7374 696f 6e20 6f66 204c 6966 652c 2054  stion of Life, T
  3dd0:  6865 2055 6e69 7665 7273 652c 2061 6e64  he Universe, and
  3de0:  2045 7665 7279 7468 696e 6720 3f00        Everything ?.

"What is the main town of Assyria ?":
  3dee:                                     5768                Wh
  3df0:  6174 2069 7320 7468 6520 6d61 696e 2074  at is the main t
  3e00:  6f77 6e20 6f66 2041 7373 7972 6961 203f  own of Assyria ?
  3e10:  00                                       .

"Uncipher this: 413532 541215 244422 1154":
  3e11:    55 6e63 6970 6865 7220 7468 6973 3a20   Uncipher this: 
  3e20:  3431 3335 3332 2035 3431 3231 3520 3234  413532 541215 24
  3e30:  3434 3232 2031 3135 3400                 4422 1154.

"Can you name Gibson's *cold* intelligence ?":
  3e3a:                           4361 6e20 796f            Can yo
  3e40:  7520 6e61 6d65 2047 6962 736f 6e27 7320  u name Gibson's 
  3e50:  2a63 6f6c 642a 2069 6e74 656c 6c69 6765  *cold* intellige
  3e60:  6e63 6520 3f00                           nce ?.

"Who reads Playboy in the movie 'Sneakers' ?":
  3e66:                 5768 6f20 7265 6164 7320        Who reads 
  3e70:  506c 6179 626f 7920 696e 2074 6865 206d  Playboy in the m
  3e80:  6f76 6965 2027 536e 6561 6b65 7273 2720  ovie 'Sneakers' 
  3e90:  3f00                                     ?.

"Fortune> Get 65535 coins to win this game. Enter 'q' to quit.":
  3e92:       466f 7274 756e 653e 2047 6574 2036    Fortune> Get 6
  3ea0:  3535 3335 2063 6f69 6e73 2074 6f20 7769  5535 coins to wi
  3eb0:  6e20 7468 6973 2067 616d 652e 2045 6e74  n this game. Ent
  3ec0:  6572 2027 7127 2074 6f20 7175 6974 2e00  er 'q' to quit..

"Fortune> You have ":
  3ed0:  466f 7274 756e 653e 2059 6f75 2068 6176  Fortune> You hav
  3ee0:  6520 00                                  e .

"You won this game.":
  3ee3:         59 6f75 2077 6f6e 2074 6869 7320     You won this 
  3ef0:  6761 6d65 2e00                           game..

"Fortune> Bet on number (0-9): ":
  3ef6:                 466f 7274 756e 653e 2042        Fortune> B
  3f00:  6574 206f 6e20 6e75 6d62 6572 2028 302d  et on number (0-
  3f10:  3929                                     9)

": ":
  3f12:       3a20 00                               : .

"Fortune> Number of coins to bet: ":
  3f15:              46 6f72 7475 6e65 3e20 4e75       Fortune> Nu
  3f20:  6d62 6572 206f 6620 636f 696e 7320 746f  mber of coins to
  3f30:  2062 6574 3a20 00                         bet: .

"Fortune> Lucky you ! You've been rewarded with ":
  3f37:                   46 6f72 7475 6e65 3e20         Fortune> 
  3f40:  4c75 636b 7920 796f 7520 2120 596f 7527  Lucky you ! You'
  3f50:  7665 2062 6565 6e20 7265 7761 7264 6564  ve been rewarded
  3f60:  2077 6974 6820 00                         with .

" coins !":
  3f67:                   20 636f 696e 7320 2100          coins !.

"Fortune> Nope, you lost ":
  3f70:  466f 7274 756e 653e 204e 6f70 652c 2079  Fortune> Nope, y
  3f80:  6f75 206c 6f73 7420 00                   ou lost .

" coins ...":
  3f89:                        20 636f 696e 7320            coins 
  3f90:  2e2e 2e00                                ....

"Fortune> You don't have enough coins.":
  3f94:            466f 7274 756e 653e 2059 6f75      Fortune> You
  3fa0:  2064 6f6e 2774 2068 6176 6520 656e 6f75   don't have enou
  3fb0:  6768 2063 6f69 6e73 2e00                 gh coins..

"0123456789ABCDEF":
  3fba:                           3031 3233 3435            012345
  3fc0:  3637 3839 4142 4344 4546 00              6789ABCDEF.

"Memory> Dumping ...":
  3fcb:                             4d 656d 6f72             Memor
  3fd0:  793e 2044 756d 7069 6e67 202e 2e2e 00    y> Dumping ....

"> Shall we play a game ?":
  3fdf:                                       0d                 .
  3fe0:  0a3e 2053 6861 6c6c 2077 6520 706c 6179  .> Shall we play
  3ff0:  2061 2067 616d 6520 3f0d 0a               a game ?..

"\r\n":
  3ffb:                             0d 0a                    ..

"":
  3ffd:                                  00                    .

" 1 - Quizz":
  3ffe:                                     2031                 1
  4000:  202d 2051 7569 7a7a 00                    - Quizz.

" 2 - Fortune":
  4009:                        20 3220 2d20 466f            2 - Fo
  4010:  7274 756e 6500                           rtune.

" 3 - Wargame":
  4016:                 2033 202d 2057 6172 6761         3 - Warga
  4020:  6d65 00                                  me.

" h - Badge infos":
  4023:         20 6820 2d20 4261 6467 6520 696e      h - Badge in
  4030:  666f 730d 0a00                           fos...

" m - Dump memory":
  4036:                 206d 202d 2044 756d 7020         m - Dump 
  4040:  6d65 6d6f 7279 0d0a 00                   memory...

"Choice: ":
  4049:                        0d 0a43 686f 6963           ..Choic
  4050:  653a 2000                                e: .

"XXX MEMORY CORRUPTION DETECTED XXX":
  4054:            5858 5820 4d45 4d4f 5259 2043      XXX MEMORY C
  4060:  4f52 5255 5054 494f 4e20 4445 5445 4354  ORRUPTION DETECT
  4070:  4544 2058 5858 00                        ED XXX.

"<< Ndh2015 - National LOL Agency >>":
  4077:                   3c 3c20 4e64 6832 3031         << Ndh201
  4080:  3520 2d20 4e61 7469 6f6e 616c 204c 4f4c  5 - National LOL
  4090:  2041 6765 6e63 7920 3e3e 000d 0a0d 0a     Agency >>.....

"BADGE INFOS:":
  409f:                                       42                 B
  40a0:  4144 4745 2049 4e46 4f53 3a00            ADGE INFOS:.

"------------":
  40ac:                                2d2d 2d2d              ----
  40b0:  2d2d 2d2d 2d2d 2d2d 00                   --------.

"Current mode: ":
  40b9:                        43 7572 7265 6e74           Current
  40c0:  206d 6f64 653a 2000                       mode: .

"DUMMY":
  40c8:                      4455 4d4d 5900               DUMMY.

"ROOKIE":
  40ce:                                     524f                RO
  40d0:  4f4b 4945 00                             OKIE.

"NINJA":
  40d5:              4e 494e 4a41 00                   NINJA.

"GOD":
  40db:                             47 4f44 00               GOD.

accelero_laby:
  40df:                                       01                 .
  40e0:  0000 0001 0000 0002 0000 0002 0000 0003  ................
  40f0:  0000 0004 0000 0003 0000 0004 0000 0007  ................
  4100:  0000 0000 00                             .....

TwoWire_vtable:
  4105: 0f1b addr 0x1e36 <size_t TwoWire::write(uint8_t data)>
  4107: 0eeb addr 0x1dd6 <size_t TwoWire::write(const uint8_t *data, size_t quantity)>
  4109: 0ebf addr 0x1d7e <int TwoWire::available(void)>
  410b: 0ec7 addr 0x1d8e <int TwoWire::read(void)>
  410d: 0edb addr 0x1db6 <int TwoWire::peek(void)>
  410f: 0eea addr 0x1dd4 <void TwoWire::flush(void)>

padding:
  4111:    00 0000 00                              ....

Serial_vtable:
  4115: 17de addr 0x2fbc <size_t Serial_::write(uint8_t c)>
  4117: 163b addr 0x2c76 <size_t Print::write(const uint8_t *buffer=r23:r22, size_t size)>
  4119: 176e addr 0x2edc <int Serial?::available()>
  411b: 1792 addr 0x2f24 <int Serial?::read()>
  411d: 177b addr 0x2ef6 <int Serial?::peek()>
  411f: 17db addr 0x2fb6 <void Serial_::flush(void)>
  4121: 17b5 addr 0x2f6a <Serial.?(vtable6)>

padding:
  4123:         00 0000 00                           ....

?2_vtable:
  4127: 1be3 addr 0x37c6 <sub?vtable?_37c6>
  4129: 163b addr 0x2c76 <size_t Print::write(const uint8_t *buffer=r23:r22, size_t size)>
  412b: 1c56 addr 0x38ac <sub?vtable?_38ac>
  412d: 1cc1 addr 0x3982 <sub?vtable?_3982>
  412f: 1d05 addr 0x3a0a <sub?vtable?_3a0a>

padding:
  4131:    00                                      .
